'All variables will be of type LONG unless explicitly defined
DEFLNG A-Z

'All arrays will be dynamically allocated so they can be REDIM-ed
'$DYNAMIC

'We need console access to support command-line compilation via the -x command line compile option
$CONSOLE

'Initially the "SCREEN" will be hidden, if the -x option is used it will never be created
$SCREENHIDE

$EXEICON:'./qb64pe.ico'

$VERSIONINFO:CompanyName=QB64 Phoenix Edition
$VERSIONINFO:FileDescription=QB64 IDE and Compiler
$VERSIONINFO:InternalName=qb64pe.bas
$VERSIONINFO:LegalCopyright=MIT
$VERSIONINFO:LegalTrademarks=
$VERSIONINFO:OriginalFilename=qb64pe.exe
$VERSIONINFO:ProductName=QB64-PE
$VERSIONINFO:Comments=QB64 is a modern extended BASIC programming language that retains QB4.5/QBasic compatibility and compiles native binaries for Windows, Linux and macOS.

'$INCLUDE:'global\version.bas'
'$INCLUDE:'global\settings.bas'
'$INCLUDE:'global\constants.bas'
'$INCLUDE:'subs_functions\extensions\opengl\opengl_global.bas'
'$INCLUDE:'utilities\ini-manager\ini.bi'
'$INCLUDE:'utilities\s-buffer\simplebuffer.bi'

DEFLNG A-Z

'-------- Optional IDE Component (1/2) --------
'$INCLUDE:'ide\ide_global.bas'

REDIM SHARED OName(1000) AS STRING 'Operation Name
REDIM SHARED PL(1000) AS INTEGER 'Priority Level
REDIM SHARED PP_TypeMod(0) AS STRING, PP_ConvertedMod(0) AS STRING 'Prepass Name Conversion variables.
Set_OrderOfOperations

DIM SHARED NoExeSaved AS INTEGER

DIM SHARED vWatchOn, vWatchRecompileAttempts, vWatchDesiredState, vWatchErrorCall$
DIM SHARED vWatchNewVariable$, vWatchVariableExclusions$
vWatchErrorCall$ = "if (stop_program) {*__LONG_VWATCH_LINENUMBER=0; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars);};if(new_error){bkp_new_error=new_error;new_error=0;*__LONG_VWATCH_LINENUMBER=-1; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars);new_error=bkp_new_error;};"
vWatchVariableExclusions$ = "@__LONG_VWATCH_LINENUMBER@__LONG_VWATCH_SUBLEVEL@__LONG_VWATCH_GOTO@" + _
              "@__STRING_VWATCH_SUBNAME@__STRING_VWATCH_CALLSTACK@__ARRAY_BYTE_VWATCH_BREAKPOINTS" + _
              "@__ARRAY_BYTE_VWATCH_SKIPLINES@__STRING_VWATCH_INTERNALSUBNAME@__ARRAY_STRING_VWATCH_STACK@"

DIM SHARED nativeDataTypes$
nativeDataTypes$ = "@_OFFSET@OFFSET@_UNSIGNED _OFFSET@UNSIGNED OFFSET@_BIT@BIT@_UNSIGNED _BIT@UNSIGNED BIT@_BYTE@_UNSIGNED _BYTE@BYTE@UNSIGNED BYTE@INTEGER@_UNSIGNED INTEGER@UNSIGNED INTEGER@LONG@_UNSIGNED LONG@UNSIGNED LONG@_INTEGER64@INTEGER64@_UNSIGNED _INTEGER64@UNSIGNED INTEGER64@SINGLE@DOUBLE@_FLOAT@FLOAT@STRING@"

DIM SHARED qb64prefix_set_recompileAttempts, qb64prefix_set_desiredState
DIM SHARED opex_recompileAttempts, opex_desiredState
DIM SHARED opexarray_recompileAttempts, opexarray_desiredState

REDIM EveryCaseSet(100), SelectCaseCounter AS _UNSIGNED LONG
REDIM SelectCaseHasCaseBlock(100)
DIM ExecLevel(255), ExecCounter AS INTEGER
REDIM SHARED UserDefine(1, 100) AS STRING '0 element is the name, 1 element is the string value
REDIM SHARED InValidLine(10000) AS _BYTE
DIM DefineElse(255) AS _BYTE
DIM SHARED UserDefineCount AS INTEGER, UserDefineList$
UserDefineList$ = "@DEFINED@UNDEFINED@WINDOWS@WIN@LINUX@MAC@MACOSX@32BIT@64BIT@VERSION@"
UserDefine(0, 0) = "WINDOWS": UserDefine(0, 1) = "WIN"
UserDefine(0, 2) = "LINUX"
UserDefine(0, 3) = "MAC": UserDefine(0, 4) = "MACOSX"
UserDefine(0, 5) = "32BIT": UserDefine(0, 6) = "64BIT"
UserDefine(0, 7) = "VERSION"
IF INSTR(_OS$, "WIN") THEN UserDefine(1, 0) = "-1": UserDefine(1, 1) = "-1" ELSE UserDefine(1, 0) = "0": UserDefine(1, 1) = "0"
IF INSTR(_OS$, "LINUX") THEN UserDefine(1, 2) = "-1" ELSE UserDefine(1, 2) = "0"
IF INSTR(_OS$, "MAC") THEN UserDefine(1, 3) = "-1": UserDefine(1, 4) = "-1" ELSE UserDefine(1, 3) = "0": UserDefine(1, 4) = "0"
IF INSTR(_OS$, "32BIT") THEN UserDefine(1, 5) = "-1": UserDefine(1, 6) = "0" ELSE UserDefine(1, 5) = "0": UserDefine(1, 6) = "-1"
UserDefine(1, 7) = Version$

DIM SHARED QB64_uptime!
DIM SHARED AS INTEGER NewDialogs, OptionsMenuNewDialogs
NewDialogs = -1

QB64_uptime! = TIMER

NoInternalFolder:
IF _DIREXISTS("internal") = 0 THEN
    _SCREENSHOW
    PRINT "QB64-PE cannot locate the 'internal' folder"
    PRINT
    PRINT "Check that QB64-PE has been extracted properly."
    PRINT "For MacOSX, launch 'qb64pe_start.command' or enter './qb64pe' in Terminal."
    PRINT "For Linux, in the console enter './qb64pe'."
    DO
        _LIMIT 1
    LOOP UNTIL INKEY$ <> ""
    SYSTEM 1
END IF

DIM SHARED Include_GDB_Debugging_Info 'set using "options.bin"

DIM SHARED DEPENDENCY_LAST
CONST DEPENDENCY_LOADFONT = 1: DEPENDENCY_LAST = DEPENDENCY_LAST + 1
CONST DEPENDENCY_AUDIO_CONVERSION = 2: DEPENDENCY_LAST = DEPENDENCY_LAST + 1
CONST DEPENDENCY_AUDIO_DECODE = 3: DEPENDENCY_LAST = DEPENDENCY_LAST + 1
CONST DEPENDENCY_AUDIO_OUT = 4: DEPENDENCY_LAST = DEPENDENCY_LAST + 1
CONST DEPENDENCY_GL = 5: DEPENDENCY_LAST = DEPENDENCY_LAST + 1
CONST DEPENDENCY_IMAGE_CODEC = 6: DEPENDENCY_LAST = DEPENDENCY_LAST + 1
CONST DEPENDENCY_CONSOLE_ONLY = 7: DEPENDENCY_LAST = DEPENDENCY_LAST + 1 '=2 if via -g switch, =1 if via metacommand $CONSOLE:ONLY
CONST DEPENDENCY_SOCKETS = 8: DEPENDENCY_LAST = DEPENDENCY_LAST + 1
CONST DEPENDENCY_PRINTER = 9: DEPENDENCY_LAST = DEPENDENCY_LAST + 1
CONST DEPENDENCY_ICON = 10: DEPENDENCY_LAST = DEPENDENCY_LAST + 1
CONST DEPENDENCY_SCREENIMAGE = 11: DEPENDENCY_LAST = DEPENDENCY_LAST + 1
CONST DEPENDENCY_DEVICEINPUT = 12: DEPENDENCY_LAST = DEPENDENCY_LAST + 1 'removes support for gamepad input if not present
CONST DEPENDENCY_ZLIB = 13: DEPENDENCY_LAST = DEPENDENCY_LAST + 1 'ZLIB library linkage, if desired, for compression/decompression.



DIM SHARED DEPENDENCY(1 TO DEPENDENCY_LAST)

DIM SHARED UseGL 'declared SUB _GL (no params)


DIM SHARED OS_BITS AS LONG, WindowTitle AS STRING
OS_BITS = 64: IF INSTR(_OS$, "[32BIT]") THEN OS_BITS = 32

IF OS_BITS = 32 THEN WindowTitle = "QB64 Phoenix Edition (x32)" ELSE WindowTitle = "QB64 Phoenix Edition (x64)"
_TITLE WindowTitle

DIM SHARED ConsoleMode, No_C_Compile_Mode, NoIDEMode
DIM SHARED ShowWarnings AS _BYTE, QuietMode AS _BYTE, CMDLineFile AS STRING
DIM SHARED MonochromeLoggingMode AS _BYTE

TYPE usedVarList
    AS LONG id, linenumber, includeLevel, includedLine, scope, localIndex
    AS LONG arrayElementSize
    AS _BYTE used, watch, isarray, displayFormat 'displayFormat: 0=DEC;1=HEX;2=BIN;3=OCT
    AS STRING name, cname, varType, includedFile, subfunc
    AS STRING watchRange, indexes, elements, elementTypes 'for Arrays and UDTs
    AS STRING elementOffset, storage
END TYPE

REDIM SHARED backupUsedVariableList(1000) AS usedVarList
DIM SHARED typeDefinitions$, backupTypeDefinitions$
DIM SHARED totalVariablesCreated AS LONG, totalMainVariablesCreated AS LONG
DIM SHARED bypassNextVariable AS _BYTE
DIM SHARED totalWarnings AS LONG, warningListItems AS LONG, lastWarningHeader AS STRING
DIM SHARED duplicateConstWarning AS _BYTE, warningsissued AS _BYTE
DIM SHARED emptySCWarning AS _BYTE, maxLineNumber AS LONG
DIM SHARED ExeIconSet AS LONG, qb64prefix$, qb64prefix_set
DIM SHARED VersionInfoSet AS _BYTE

'Variables to handle $VERSIONINFO metacommand:
DIM SHARED viFileVersionNum$, viProductVersionNum$, viCompanyName$
DIM SHARED viFileDescription$, viFileVersion$, viInternalName$
DIM SHARED viLegalCopyright$, viLegalTrademarks$, viOriginalFilename$
DIM SHARED viProductName$, viProductVersion$, viComments$, viWeb$

DIM SHARED NoChecks

DIM SHARED Console
DIM SHARED ScreenHide
DIM SHARED Asserts
DIM SHARED OptMax AS LONG
OptMax = 256
REDIM SHARED Opt(1 TO OptMax, 1 TO 10) AS STRING * 256
'   (1,1)="READ"
'   (1,2)="WRITE"
'   (1,3)="READ WRITE"
REDIM SHARED OptWords(1 TO OptMax, 1 TO 10) AS INTEGER 'The number of words of each opt () element
'   (1,1)=1 '"READ"
'   (1,2)=1 '"WRITE"
'   (1,3)=2 '"READ WRITE"
REDIM SHARED T(1 TO OptMax) AS INTEGER 'The type of the entry
'   t is 0 for ? opts
'   ---------- 0 means ? , 1+ means a symbol or {}block ----------
'   t is 1 for symbol opts
'   t is the number of rhs opt () index enteries for {READ|WRITE|READ WRITE} like opts
REDIM SHARED Lev(1 TO OptMax) AS INTEGER 'The indwelling level of each opt () element (the lowest is 0)
REDIM SHARED EntryLev(1 TO OptMax) AS INTEGER 'The level required from which this opt () can be validly be entered/checked-for
REDIM SHARED DitchLev(1 TO OptMax) AS INTEGER 'The lowest level recorded between the previous Opt and this Opt
REDIM SHARED DontPass(1 TO OptMax) AS INTEGER 'Set to 1 or 0, with 1 meaning don't pass
'Determines whether the opt () entry needs to actually be passed to the C++ sub/function
REDIM SHARED TempList(1 TO OptMax) AS INTEGER
REDIM SHARED PassRule(1 TO OptMax) AS LONG
'0 means no pass rule
'negative values refer to an opt () element
'positive values refer to a flag value
REDIM SHARED LevelEntered(OptMax) 'up to 64 levels supported
REDIM SHARED separgs(OptMax + 1) AS STRING
REDIM SHARED separgslayout(OptMax + 1) AS STRING
REDIM SHARED separgs2(OptMax + 1) AS STRING
REDIM SHARED separgslayout2(OptMax + 1) AS STRING





DIM SHARED E










DIM SHARED ResolveStaticFunctions
REDIM SHARED ResolveStaticFunction_File(1 TO 100) AS STRING
REDIM SHARED ResolveStaticFunction_Name(1 TO 100) AS STRING
REDIM SHARED ResolveStaticFunction_Method(1 TO 100) AS LONG





DIM SHARED Error_Happened AS LONG
DIM SHARED Error_Message AS STRING

DIM SHARED os AS STRING
os$ = "WIN"
IF INSTR(_OS$, "[LINUX]") THEN os$ = "LNX"

DIM SHARED MacOSX AS LONG
IF INSTR(_OS$, "[MACOSX]") THEN MacOSX = 1

DIM SHARED inline_DATA
IF MacOSX THEN inline_DATA = 1

DIM SHARED BATCHFILE_EXTENSION AS STRING
BATCHFILE_EXTENSION = ".bat"
IF os$ = "LNX" THEN BATCHFILE_EXTENSION = ".sh"
IF MacOSX THEN BATCHFILE_EXTENSION = ".command"


DIM inlinedatastr(255) AS STRING
FOR i = 0 TO 255
    inlinedatastr(i) = str2$(i) + ","
NEXT


DIM SHARED extension AS STRING
DIM SHARED path.exe$, path.source$, lastBinaryGenerated$
extension$ = ".exe"
IF os$ = "LNX" THEN extension$ = "" 'no extension under Linux

DIM SHARED pathsep AS STRING * 1
pathsep$ = "\"
IF os$ = "LNX" THEN pathsep$ = "/"
'note: QB64 handles OS specific path separators automatically except under SHELL calls

ON ERROR GOTO qberror_test

DIM SHARED tmpdir AS STRING, tmpdir2 AS STRING
IF os$ = "WIN" THEN tmpdir$ = ".\internal\temp\": tmpdir2$ = "..\\temp\\"
IF os$ = "LNX" THEN tmpdir$ = "./internal/temp/": tmpdir2$ = "../temp/"

IF NOT _DIREXISTS(tmpdir$) THEN MKDIR tmpdir$

DECLARE LIBRARY
    FUNCTION getpid& ()
END DECLARE

thisinstancepid = getpid&
DIM SHARED tempfolderindex

IF INSTR(_OS$, "LINUX") THEN
    fh = FREEFILE
    OPEN ".\internal\temp\tempfoldersearch.bin" FOR RANDOM AS #fh LEN = LEN(tempfolderindex)
    tempfolderrecords = LOF(fh) / LEN(tempfolderindex)
    i = 1
    IF tempfolderrecords = 0 THEN
        'first run ever?
        PUT #fh, 1, thisinstancepid
    ELSE
        FOR i = 1 TO tempfolderrecords
            'check if any of the temp folders is being used = pid still active
            GET #fh, i, tempfoldersearch

            SHELL _HIDE "ps -p " + STR$(tempfoldersearch) + " > /dev/null 2>&1; echo $? > internal/temp/checkpid.bin"
            fh2 = FREEFILE
            OPEN "internal/temp/checkpid.bin" FOR BINARY AS #fh2
            LINE INPUT #fh2, checkpid$
            CLOSE #fh2
            IF VAL(checkpid$) = 1 THEN
                'This temp folder was locked by an instance that's no longer active, so
                'this will be our temp folder
                PUT #fh, i, thisinstancepid
                EXIT FOR
            END IF
        NEXT
        IF i > tempfolderrecords THEN
            'All indexes were busy. Let's initiate a new one:
            PUT #fh, i, thisinstancepid
        END IF
    END IF
    CLOSE #fh
    IF i > 1 THEN
        tmpdir$ = "./internal/temp" + str2$(i) + "/": tmpdir2$ = "../temp" + str2$(i) + "/"
        IF _DIREXISTS(tmpdir$) = 0 THEN
            MKDIR tmpdir$
        END IF
    END IF
    OPEN tmpdir$ + "temp.bin" FOR OUTPUT LOCK WRITE AS #26
ELSE
    ON ERROR GOTO qberror_test
    E = 0
    i = 1
    OPEN tmpdir$ + "temp.bin" FOR OUTPUT LOCK WRITE AS #26
    DO WHILE E
        i = i + 1
        IF i = 1000 THEN PRINT "Unable to locate the 'internal' folder": END 1
        MKDIR ".\internal\temp" + str2$(i)
        IF os$ = "WIN" THEN tmpdir$ = ".\internal\temp" + str2$(i) + "\": tmpdir2$ = "..\\temp" + str2$(i) + "\\"
        IF os$ = "LNX" THEN tmpdir$ = "./internal/temp" + str2$(i) + "/": tmpdir2$ = "../temp" + str2$(i) + "/"
        E = 0
        OPEN tmpdir$ + "temp.bin" FOR OUTPUT LOCK WRITE AS #26
    LOOP
END IF


'temp folder established
tempfolderindex = i
IF i > 1 THEN
    'create modified version of qbx.cpp
    OPEN ".\internal\c\qbx" + str2$(i) + ".cpp" FOR OUTPUT AS #2
    OPEN ".\internal\c\qbx.cpp" FOR BINARY AS #1
    DO UNTIL EOF(1)
        LINE INPUT #1, a$
        x = INSTR(a$, "..\\temp\\"): IF x THEN a$ = LEFT$(a$, x - 1) + "..\\temp" + str2$(i) + "\\" + RIGHT$(a$, LEN(a$) - (x + 9))
        x = INSTR(a$, "../temp/"): IF x THEN a$ = LEFT$(a$, x - 1) + "../temp" + str2$(i) + "/" + RIGHT$(a$, LEN(a$) - (x + 7))
        PRINT #2, a$
    LOOP
    CLOSE #1, #2
END IF

IF Debug THEN OPEN tmpdir$ + "debug.txt" FOR OUTPUT AS #9

ON ERROR GOTO qberror



DIM SHARED tempfolderindexstr AS STRING 'appended to "Untitled"
DIM SHARED tempfolderindexstr2 AS STRING
IF tempfolderindex <> 1 THEN tempfolderindexstr$ = "(" + str2$(tempfolderindex) + ")": tempfolderindexstr2$ = str2$(tempfolderindex)


DIM SHARED idedebuginfo
DIM SHARED seperateargs_error
DIM SHARED seperateargs_error_message AS STRING

DIM SHARED compfailed

DIM SHARED reginternalsubfunc
DIM SHARED reginternalvariable


DIM SHARED symboltype_size
symboltype_size = 0

DIM SHARED use_global_byte_elements
use_global_byte_elements = 0

'compiler-side IDE data & definitions
'SHARED variables "passed" to/from the compiler & IDE
DIM SHARED idecommand AS STRING 'a 1 byte message-type code, followed by optional string data
DIM SHARED idereturn AS STRING 'used to pass formatted-lines and return information back to the IDE
DIM SHARED ideerror AS LONG
DIM SHARED idecompiled AS LONG
DIM SHARED idemode '1 if using the IDE to compile
DIM SHARED ideerrorline AS LONG 'set by qb64-error(...) to the line number it would have reported, this number
'is later passed to the ide in message #8
DIM SHARED idemessage AS STRING 'set by qb64-error(...) to the error message to be reported, this
'is later passed to the ide in message #8

DIM SHARED optionexplicit AS _BYTE
DIM SHARED optionexplicitarray AS _BYTE
DIM SHARED optionexplicit_cmd AS _BYTE
DIM SHARED ideStartAtLine AS LONG, errorLineInInclude AS LONG
DIM SHARED warningInInclude AS LONG, warningInIncludeLine AS LONG
DIM SHARED outputfile_cmd$
DIM SHARED compilelog$

'$INCLUDE:'global\IDEsettings.bas'

DIM OutputIsRelativeToStartDir AS LONG

CMDLineFile = ParseCMDLineArgs$
IF CMDLineFile <> "" AND _FILEEXISTS(_STARTDIR$ + "/" + CMDLineFile) THEN
    CMDLineFile = _STARTDIR$ + "/" + CMDLineFile
    OutputIsRelativeToStartDir = -1
END IF

IF ConsoleMode THEN
    _DEST _CONSOLE
ELSE
    _CONSOLE OFF
    _SCREENSHOW
    _ICON
END IF

'the function ?=ide(?) should always be passed 0, it returns a message code number, any further information
'is passed back in idereturn

'message code numbers:
'0  no ide present  (auto defined array ide() return 0)

'1  launch ide & with passed filename (compiler->ide)

'2  begin new compilation with returned line of code (compiler<-ide)
'   [2][line of code]

'3  request next line (compiler->ide)
'   [3]

'4  next line of code returned (compiler<-ide)
'   [4][line of code]

'5  no more lines of code exist (compiler<-ide)
'   [5]

'6  code is OK/ready (compiler->ide)
'   [6]

'7  repass the code from the beginning (compiler->ide)
'   [7]

'8  an error has occurred with 'this' message on 'this' line(compiler->ide)
'   [8][error message][line as LONG]

'9  C++ compile (if necessary) and run with 'this' name (compiler<-ide)
'   [9][name(no path, no .bas)]

'10 The line requires more time to process
'       Pass-back 'line of code' using method [4] when ready
'   [10][line of code]

'11 ".EXE file created" message

'12     The name of the exe I'll create is '...' (compiler->ide)
'   [12][exe name without .exe]

'255    A qb error happened in the IDE (compiler->ide)
'   note: detected by the fact that ideerror was not set to 0
'   [255]

'hash table data
TYPE HashListItem
    Flags AS LONG
    Reference AS LONG
    NextItem AS LONG
    PrevItem AS LONG
    LastItem AS LONG 'note: this value is only valid on the first item in the list
    'note: name is stored in a seperate array of strings
END TYPE
DIM SHARED HashFind_NextListItem AS LONG
DIM SHARED HashFind_Reverse AS LONG
DIM SHARED HashFind_SearchFlags AS LONG
DIM SHARED HashFind_Name AS STRING
DIM SHARED HashRemove_LastFound AS LONG
DIM SHARED HashListSize AS LONG
DIM SHARED HashListNext AS LONG
DIM SHARED HashListFreeSize AS LONG
DIM SHARED HashListFreeLast AS LONG
'hash lookup tables
DIM SHARED hash1char(255) AS INTEGER
DIM SHARED hash2char(65535) AS INTEGER
FOR x = 1 TO 26
    hash1char(64 + x) = x
    hash1char(96 + x) = x
NEXT
hash1char(95) = 27 '_
hash1char(48) = 28 '0
hash1char(49) = 29 '1
hash1char(50) = 30 '2
hash1char(51) = 31 '3
hash1char(52) = 23 '4 'note: x, y, z and beginning alphabet letters avoided because of common usage (eg. a2, y3)
hash1char(53) = 22 '5
hash1char(54) = 20 '6
hash1char(55) = 19 '7
hash1char(56) = 18 '8
hash1char(57) = 17 '9
FOR c1 = 0 TO 255
    FOR c2 = 0 TO 255
        hash2char(c1 + c2 * 256) = hash1char(c1) + hash1char(c2) * 32
    NEXT
NEXT
'init
HashListSize = 65536
HashListNext = 1
HashListFreeSize = 1024
HashListFreeLast = 0
REDIM SHARED HashList(1 TO HashListSize) AS HashListItem
REDIM SHARED HashListName(1 TO HashListSize) AS STRING * 256
REDIM SHARED HashListFree(1 TO HashListFreeSize) AS LONG
REDIM SHARED HashTable(16777215) AS LONG '64MB lookup table with indexes to the hashlist

CONST HASHFLAG_LABEL = 2
CONST HASHFLAG_TYPE = 4
CONST HASHFLAG_RESERVED = 8
CONST HASHFLAG_OPERATOR = 16
CONST HASHFLAG_CUSTOMSYNTAX = 32
CONST HASHFLAG_SUB = 64
CONST HASHFLAG_FUNCTION = 128
CONST HASHFLAG_UDT = 256
CONST HASHFLAG_UDTELEMENT = 512
CONST HASHFLAG_CONSTANT = 1024
CONST HASHFLAG_VARIABLE = 2048
CONST HASHFLAG_ARRAY = 4096
CONST HASHFLAG_XELEMENTNAME = 8192
CONST HASHFLAG_XTYPENAME = 16384

TYPE Label_Type
    State AS _UNSIGNED _BYTE '0=label referenced, 1=label created
    cn AS STRING * 256
    Scope AS LONG
    Data_Offset AS _INTEGER64 'offset within data
    Data_Referenced AS _UNSIGNED _BYTE 'set to 1 if data is referenced (data_offset will be used to create the data offset variable)
    Error_Line AS LONG 'the line number to reference on errors
    Scope_Restriction AS LONG 'cannot exist inside this scope (post checked)
    SourceLineNumber AS LONG
END TYPE
DIM SHARED nLabels, Labels_Ubound
Labels_Ubound = 100
REDIM SHARED Labels(1 TO Labels_Ubound) AS Label_Type
DIM SHARED Empty_Label AS Label_Type

DIM SHARED PossibleSubNameLabels AS STRING 'format: name+sp+name+sp+name <-ucase$'d
DIM SHARED SubNameLabels AS STRING 'format: name+sp+name+sp+name <-ucase$'d
DIM SHARED CreatingLabel AS LONG

DIM SHARED AllowLocalName AS LONG

DIM SHARED DataOffset

DIM SHARED prepass


DIM SHARED autoarray

DIM SHARED ontimerid, onkeyid, onstrigid

DIM SHARED revertmaymusthave(1 TO 10000)
DIM SHARED revertmaymusthaven

DIM SHARED linecontinuation

DIM SHARED dim2typepassback AS STRING 'passes back correct case sensitive version of type


DIM SHARED inclevel
DIM SHARED incname(100) AS STRING 'must be full path as given
DIM SHARED inclinenumber(100) AS LONG
DIM SHARED incerror AS STRING


DIM SHARED fix046 AS STRING
fix046$ = "__" + "ASCII" + "_" + "CHR" + "_" + "046" + "__" 'broken up to avoid detection for layout reversion

DIM SHARED layout AS STRING 'passed to IDE
DIM SHARED layoutok AS LONG 'tracks status of entire line

DIM SHARED layoutcomment AS STRING

DIM SHARED tlayout AS STRING 'temporary layout string set by supporting functions
DIM SHARED layoutdone AS LONG 'tracks status of single command


DIM SHARED fooindwel

DIM SHARED alphanumeric(255)
FOR i = 48 TO 57
    alphanumeric(i) = -1
NEXT
FOR i = 65 TO 90
    alphanumeric(i) = -1
NEXT
FOR i = 97 TO 122
    alphanumeric(i) = -1
NEXT
'_ is treated as an alphabet letter
alphanumeric(95) = -1

DIM SHARED isalpha(255)
FOR i = 65 TO 90
    isalpha(i) = -1
NEXT
FOR i = 97 TO 122
    isalpha(i) = -1
NEXT
'_ is treated as an alphabet letter
isalpha(95) = -1

DIM SHARED isnumeric(255)
FOR i = 48 TO 57
    isnumeric(i) = -1
NEXT


DIM SHARED lfsinglechar(255)
lfsinglechar(40) = 1 '(
lfsinglechar(41) = 1 ')
lfsinglechar(42) = 1 '*
lfsinglechar(43) = 1 '+
lfsinglechar(45) = 1 '-
lfsinglechar(47) = 1 '/
lfsinglechar(60) = 1 '<
lfsinglechar(61) = 1 '=
lfsinglechar(62) = 1 '>
lfsinglechar(92) = 1 '\
lfsinglechar(94) = 1 '^

lfsinglechar(44) = 1 ',
lfsinglechar(46) = 1 '.
lfsinglechar(58) = 1 ':
lfsinglechar(59) = 1 ';

lfsinglechar(35) = 1 '# (file no only)
lfsinglechar(36) = 1 '$ (metacommand only)
lfsinglechar(63) = 1 '? (print macro)
lfsinglechar(95) = 1 '_










DIM SHARED nextrunlineindex AS LONG

DIM SHARED lineinput3buffer AS STRING
DIM SHARED lineinput3index AS LONG

DIM SHARED dimstatic AS LONG

DIM SHARED staticarraylist AS STRING
DIM SHARED staticarraylistn AS LONG
DIM SHARED commonarraylist AS STRING
DIM SHARED commonarraylistn AS LONG

'CONST support
DIM SHARED constmax AS LONG
constmax = 100
DIM SHARED constlast AS LONG
constlast = -1
REDIM SHARED constname(constmax) AS STRING
REDIM SHARED constcname(constmax) AS STRING
REDIM SHARED constnamesymbol(constmax) AS STRING 'optional name symbol
' `1 and `no-number must be handled correctly
'DIM SHARED constlastshared AS LONG 'so any defined inside a sub/function after this index can be "forgotten" when sub/function exits
'constlastshared = -1
REDIM SHARED consttype(constmax) AS LONG 'variable type number
'consttype determines storage
REDIM SHARED constinteger(constmax) AS _INTEGER64
REDIM SHARED constuinteger(constmax) AS _UNSIGNED _INTEGER64
REDIM SHARED constfloat(constmax) AS _FLOAT
REDIM SHARED conststring(constmax) AS STRING
REDIM SHARED constsubfunc(constmax) AS LONG
REDIM SHARED constdefined(constmax) AS LONG

'UDT
'names
DIM SHARED lasttype AS LONG
DIM SHARED lasttypeelement AS LONG

TYPE idstruct

    n AS STRING * 256 'name
    cn AS STRING * 256 'case sensitive version of n

    arraytype AS LONG 'similar to t
    arrayelements AS INTEGER
    staticarray AS INTEGER 'set for arrays declared in the main module with static elements

    mayhave AS STRING * 8 'mayhave and musthave are exclusive of each other
    musthave AS STRING * 8
    t AS LONG 'type

    tsize AS LONG


    subfunc AS INTEGER 'if function=1, sub=2 (max 100 arguments)
    Dependency AS INTEGER
    internal_subfunc AS INTEGER

    callname AS STRING * 256
    ccall AS INTEGER
    overloaded AS _BYTE
    args AS INTEGER
    minargs AS INTEGER
    arg AS STRING * 400 'similar to t
    argsize AS STRING * 400 'similar to tsize (used for fixed length strings)
    specialformat AS STRING * 256
    secondargmustbe AS STRING * 256
    secondargcantbe AS STRING * 256
    ret AS LONG 'the value it returns if it is a function (again like t)

    insubfunc AS STRING * 256
    insubfuncn AS LONG

    share AS INTEGER
    nele AS STRING * 100
    nelereq AS STRING * 100
    linkid AS LONG
    linkarg AS INTEGER
    staticscope AS INTEGER
    'For variables which are arguments passed to a sub/function
    sfid AS LONG 'id number of variable's parent sub/function
    sfarg AS INTEGER 'argument/parameter # within call (1=first)

    hr_syntax AS STRING
END TYPE

DIM SHARED id AS idstruct

DIM SHARED idn AS LONG
DIM SHARED ids_max AS LONG
ids_max = 1024
REDIM SHARED ids(1 TO ids_max) AS idstruct
REDIM SHARED cmemlist(1 TO ids_max + 1) AS INTEGER 'variables that must be in cmem
REDIM SHARED sfcmemargs(1 TO ids_max + 1) AS STRING * 100 's/f arg that must be in cmem
REDIM SHARED arrayelementslist(1 TO ids_max + 1) AS INTEGER 'arrayelementslist (like cmemlist) helps to resolve the number of elements in arrays with an unknown number of elements. Note: arrays with an unknown number of elements have .arrayelements=-1


'create blank id template for idclear to copy (stops strings being set to chr$(0))
DIM SHARED cleariddata AS idstruct
cleariddata.cn = ""
cleariddata.n = ""
cleariddata.mayhave = ""
cleariddata.musthave = ""
cleariddata.callname = ""
cleariddata.arg = ""
cleariddata.argsize = ""
cleariddata.specialformat = ""
cleariddata.secondargmustbe = ""
cleariddata.secondargcantbe = ""
cleariddata.insubfunc = ""
cleariddata.nele = ""
cleariddata.nelereq = ""

DIM SHARED ISSTRING AS LONG
DIM SHARED ISFLOAT AS LONG
DIM SHARED ISUNSIGNED AS LONG
DIM SHARED ISPOINTER AS LONG
DIM SHARED ISFIXEDLENGTH AS LONG
DIM SHARED ISINCONVENTIONALMEMORY AS LONG
DIM SHARED ISOFFSETINBITS AS LONG
DIM SHARED ISARRAY AS LONG
DIM SHARED ISREFERENCE AS LONG
DIM SHARED ISUDT AS LONG
DIM SHARED ISOFFSET AS LONG

DIM SHARED STRINGTYPE AS LONG
DIM SHARED BITTYPE AS LONG
DIM SHARED UBITTYPE AS LONG
DIM SHARED BYTETYPE AS LONG
DIM SHARED UBYTETYPE AS LONG
DIM SHARED INTEGERTYPE AS LONG
DIM SHARED UINTEGERTYPE AS LONG
DIM SHARED LONGTYPE AS LONG
DIM SHARED ULONGTYPE AS LONG
DIM SHARED INTEGER64TYPE AS LONG
DIM SHARED UINTEGER64TYPE AS LONG
DIM SHARED SINGLETYPE AS LONG
DIM SHARED DOUBLETYPE AS LONG
DIM SHARED FLOATTYPE AS LONG
DIM SHARED OFFSETTYPE AS LONG
DIM SHARED UOFFSETTYPE AS LONG
DIM SHARED UDTTYPE AS LONG

DIM SHARED gosubid AS LONG
DIM SHARED redimoption AS INTEGER
DIM SHARED dimoption AS INTEGER
DIM SHARED arraydesc AS INTEGER
DIM SHARED qberrorhappened AS INTEGER
DIM SHARED qberrorcode AS INTEGER
DIM SHARED qberrorline AS INTEGER
'COMMON SHARED defineaz() AS STRING
'COMMON SHARED defineextaz() AS STRING

DIM SHARED sourcefile AS STRING 'the full path and filename
DIM SHARED file AS STRING 'name of the file (without .bas or path)

'COMMON SHARED separgs() AS STRING

DIM SHARED constequation AS INTEGER
DIM SHARED DynamicMode AS INTEGER
DIM SHARED findidsecondarg AS STRING
DIM SHARED findanotherid AS INTEGER
DIM SHARED findidinternal AS LONG
DIM SHARED currentid AS LONG 'is the index of the last ID accessed
DIM SHARED linenumber AS LONG, reallinenumber AS LONG, totallinenumber AS LONG, definingtypeerror AS LONG
DIM SHARED wholeline AS STRING
DIM SHARED firstLineNumberLabelvWatch AS LONG, lastLineNumberLabelvWatch AS LONG
DIM SHARED vWatchUsedLabels AS STRING, vWatchUsedSkipLabels AS STRING
DIM SHARED linefragment AS STRING
'COMMON SHARED bitmask() AS _INTEGER64
'COMMON SHARED bitmaskinv() AS _INTEGER64

DIM SHARED arrayprocessinghappened AS INTEGER
DIM SHARED stringprocessinghappened AS INTEGER
DIM SHARED cleanupstringprocessingcall AS STRING
DIM SHARED inputfunctioncalled AS _BYTE
DIM SHARED recompile AS INTEGER 'forces recompilation
'COMMON SHARED cmemlist() AS INTEGER
DIM SHARED optionbase AS INTEGER

DIM SHARED addmetastatic AS INTEGER
DIM SHARED addmetadynamic AS INTEGER
DIM SHARED addmetainclude AS STRING

DIM SHARED closedmain AS INTEGER
DIM SHARED module AS STRING

DIM SHARED subfunc AS STRING
DIM SHARED subfuncn AS LONG
DIM SHARED closedsubfunc AS _BYTE
DIM SHARED subfuncid AS LONG

DIM SHARED defdatahandle AS INTEGER
DIM SHARED dimsfarray AS INTEGER
DIM SHARED dimshared AS INTEGER

'Allows passing of known elements to recompilation
DIM SHARED sflistn AS INTEGER
'COMMON SHARED sfidlist() AS LONG
'COMMON SHARED sfarglist() AS INTEGER
'COMMON SHARED sfelelist() AS INTEGER
DIM SHARED glinkid AS LONG
DIM SHARED glinkarg AS INTEGER
DIM SHARED typname2typsize AS LONG
DIM SHARED uniquenumbern AS LONG

'CLEAR , , 16384


DIM SHARED bitmask(1 TO 64) AS _INTEGER64
DIM SHARED bitmaskinv(1 TO 64) AS _INTEGER64

DIM SHARED defineextaz(1 TO 27) AS STRING
DIM SHARED defineaz(1 TO 27) AS STRING '27 is an underscore

ISSTRING = 1073741824
ISFLOAT = 536870912
ISUNSIGNED = 268435456
ISPOINTER = 134217728
ISFIXEDLENGTH = 67108864 'only set for strings with pointer flag
ISINCONVENTIONALMEMORY = 33554432
ISOFFSETINBITS = 16777216
ISARRAY = 8388608
ISREFERENCE = 4194304
ISUDT = 2097152
ISOFFSET = 1048576

STRINGTYPE = ISSTRING + ISPOINTER
BITTYPE = 1& + ISPOINTER + ISOFFSETINBITS
UBITTYPE = 1& + ISPOINTER + ISUNSIGNED + ISOFFSETINBITS 'QB64 will also support BIT*n, eg. DIM bitarray[10] AS _UNSIGNED _BIT*10
BYTETYPE = 8& + ISPOINTER
UBYTETYPE = 8& + ISPOINTER + ISUNSIGNED
INTEGERTYPE = 16& + ISPOINTER
UINTEGERTYPE = 16& + ISPOINTER + ISUNSIGNED
LONGTYPE = 32& + ISPOINTER
ULONGTYPE = 32& + ISPOINTER + ISUNSIGNED
INTEGER64TYPE = 64& + ISPOINTER
UINTEGER64TYPE = 64& + ISPOINTER + ISUNSIGNED
SINGLETYPE = 32& + ISFLOAT + ISPOINTER
DOUBLETYPE = 64& + ISFLOAT + ISPOINTER
FLOATTYPE = 256& + ISFLOAT + ISPOINTER '8-32 bytes
OFFSETTYPE = 64& + ISOFFSET + ISPOINTER: IF OS_BITS = 32 THEN OFFSETTYPE = 32& + ISOFFSET + ISPOINTER
UOFFSETTYPE = 64& + ISOFFSET + ISUNSIGNED + ISPOINTER: IF OS_BITS = 32 THEN UOFFSETTYPE = 32& + ISOFFSET + ISUNSIGNED + ISPOINTER
UDTTYPE = ISUDT + ISPOINTER






DIM SHARED statementn AS LONG
DIM SHARED everycasenewcase AS LONG




DIM SHARED controllevel AS INTEGER '0=not in a control block
DIM SHARED controltype(1000) AS INTEGER
'1=IF (awaiting END IF)
'2=FOR (awaiting NEXT)
'3=DO (awaiting LOOP [UNTIL|WHILE param])
'4=DO WHILE/UNTIL (awaiting LOOP)
'5=WHILE (awaiting WEND)
'6=$IF (precompiler)
'10=SELECT CASE qbs (awaiting END SELECT/CASE)
'11=SELECT CASE int64 (awaiting END SELECT/CASE)
'12=SELECT CASE uint64 (awaiting END SELECT/CASE)
'13=SELECT CASE LONG double (awaiting END SELECT/CASE/CASE ELSE)
'14=SELECT CASE float ...
'15=SELECT CASE double
'16=SELECT CASE int32
'17=SELECT CASE uint32
'18=CASE (awaiting END SELECT/CASE/CASE ELSE)
'19=CASE ELSE (awaiting END SELECT)
'32=SUB/FUNCTION (awaiting END SUB/FUNCTION)
DIM controlid(1000) AS LONG
DIM controlvalue(1000) AS LONG
DIM controlstate(1000) AS INTEGER
DIM SHARED controlref(1000) AS LONG 'the line number the control was created on

'
' Collection of flags indicating which unstable features should be used during compilation
'
REDIM SHARED unstableFlags(1) AS _BYTE
DIM UNSTABLE_MIDI AS LONG

UNSTABLE_MIDI = 1




ON ERROR GOTO qberror

i2&& = 1
FOR i&& = 1 TO 64
    bitmask(i&&) = i2&&
    bitmaskinv(i&&) = NOT i2&&
    i2&& = i2&& + 2 ^ i&&
NEXT

DIM id2 AS idstruct

cleanupstringprocessingcall$ = "qbs_cleanup(qbs_tmp_base,"

DIM SHARED sfidlist(1000) AS LONG
DIM SHARED sfarglist(1000) AS INTEGER
DIM SHARED sfelelist(1000) AS INTEGER















'----------------ripgl.bas--------------------------------------------------------------------------------
gl_scan_header
'----------------ripgl.bas--------------------------------------------------------------------------------







'-----------------------QB64 COMPILER ONCE ONLY SETUP CODE ENDS HERE---------------------------------------

IF NoIDEMode THEN IDE_AutoPosition = 0: GOTO noide
DIM FileDropEnabled AS _BYTE
IF FileDropEnabled = 0 THEN FileDropEnabled = -1: _ACCEPTFILEDROP

IF IDE_AutoPosition AND NOT IDE_BypassAutoPosition THEN _SCREENMOVE IDE_LeftPosition, IDE_TopPosition
idemode = 1
sendc$ = "" 'no initial message
IF CMDLineFile <> "" THEN sendc$ = CHR$(1) + CMDLineFile
sendcommand:
idecommand$ = sendc$
C = ide(0)
ideerror = 0
IF C = 0 THEN idemode = 0: GOTO noide
c$ = idereturn$

IF C = 2 THEN 'begin
    ideerrorline = 0 'addresses invalid prepass error line numbers being reported
    idepass = 1
    GOTO fullrecompile
    ideret1:
    wholeline$ = c$
    GOTO ideprepass
    ideret2:
    IF lastLineReturn THEN GOTO lastLineReturn
    sendc$ = CHR$(3) 'request next line
    GOTO sendcommand
END IF

IF C = 4 THEN 'next line
    IF idepass = 1 THEN
        wholeline$ = c$
        GOTO ideprepass
        '(returns to ideret2: above)
    END IF
    'assume idepass>1
    a3$ = c$
    continuelinefrom = 0
    GOTO ide4
    ideret4:
    IF lastLineReturn THEN GOTO lastLineReturn
    sendc$ = CHR$(3) 'request next line
    GOTO sendcommand
END IF

IF C = 5 THEN 'end of program reached

    lastLine = 1
    lastLineReturn = 1
    IF idepass = 1 THEN
        wholeline$ = ""
        GOTO ideprepass
        '(returns to ideret2: above, then to lastLinePrepassReturn below)
    END IF
    'idepass>1
    a3$ = ""
    continuelinefrom = 0
    GOTO ide4 'returns to ideret4, then to lastLinePrepassReturn below
    lastLineReturn:
    lastLineReturn = 0
    lastLine = 0

    IF idepass = 1 THEN
        'prepass complete
        idepass = 2
        GOTO ide3
        ideret3:
        sendc$ = CHR$(7) 'repass request
        firstLine = 1
        GOTO sendcommand
    END IF
    'assume idepass=2
    'finalize program
    GOTO ide5
    ideret5: 'note: won't return here if a recompile was required!
    sendc$ = CHR$(6) 'ready
    idecompiled = 0
    GOTO sendcommand
END IF

IF C = 9 THEN 'run

    IF idecompiled = 0 THEN 'exe needs to be compiled
        file$ = c$

        'locate accessible file and truncate
        f$ = file$

        path.exe$ = ""
        IF SaveExeWithSource THEN
            IF LEN(ideprogname) THEN path.exe$ = idepath$ + pathsep$
        END IF

        i = 1
        nextexeindex:
        IF _FILEEXISTS(path.exe$ + file$ + extension$) THEN
            E = 0
            ON ERROR GOTO qberror_test
            KILL path.exe$ + file$ + extension$
            ON ERROR GOTO qberror
            IF E = 1 THEN
                i = i + 1
                file$ = f$ + "(" + str2$(i) + ")"
                GOTO nextexeindex
            END IF
        END IF

        'inform IDE of name change if necessary (IDE will respond with message 9 and corrected name)
        IF i <> 1 THEN
            sendc$ = CHR$(12) + file$
            GOTO sendcommand
        END IF

        ideerrorline = 0 'addresses C++ comp. error's line number
        GOTO ide6
        ideret6:
        idecompiled = 1
    END IF

    IF iderunmode = 2 THEN
        sendc$ = CHR$(11) '.EXE file created
        GOTO sendcommand
    END IF

    'execute program




    IF iderunmode = 1 THEN
        IF NoExeSaved THEN
            'This is the section which deals with if the user selected to run the program without
            'saving an EXE file to the disk.
            'We start off by first running the EXE, and then we delete it from the drive.
            'making it a temporary file when all is said and done.
            IF os$ = "WIN" THEN
                SHELL QuotedFilename$(CHR$(34) + lastBinaryGenerated$ + CHR$(34)) + ModifyCOMMAND$ 'run the newly created program
                SHELL _HIDE _DONTWAIT "del " + QuotedFilename$(CHR$(34) + lastBinaryGenerated$ + CHR$(34)) 'kill it
            END IF
            IF path.exe$ = "" THEN path.exe$ = "./"
            IF os$ = "LNX" THEN
                IF LEFT$(lastBinaryGenerated$, LEN(path.exe$)) = path.exe$ THEN
                    SHELL QuotedFilename$(lastBinaryGenerated$) + ModifyCOMMAND$
                    KILL lastBinaryGenerated$
                ELSE
                    SHELL QuotedFilename$(path.exe$ + lastBinaryGenerated$) + ModifyCOMMAND$
                    KILL path.exe$ + lastBinaryGenerated$
                END IF
            END IF
            IF path.exe$ = "./" THEN path.exe$ = ""
            NoExeSaved = 0 'reset the flag for a temp EXE
            sendc$ = CHR$(6) 'ready
            GOTO sendcommand
        END IF



        IF os$ = "WIN" THEN SHELL _DONTWAIT QuotedFilename$(CHR$(34) + lastBinaryGenerated$ + CHR$(34)) + ModifyCOMMAND$
        IF path.exe$ = "" THEN path.exe$ = "./"
        IF os$ = "LNX" THEN
            IF LEFT$(lastBinaryGenerated$, LEN(path.exe$)) = path.exe$ THEN
                SHELL _DONTWAIT QuotedFilename$(lastBinaryGenerated$) + ModifyCOMMAND$
            ELSE
                SHELL _DONTWAIT QuotedFilename$(path.exe$ + lastBinaryGenerated$) + ModifyCOMMAND$
            END IF
        END IF
        IF path.exe$ = "./" THEN path.exe$ = ""
    ELSE
        IF os$ = "WIN" THEN SHELL QuotedFilename$(CHR$(34) + lastBinaryGenerated$ + CHR$(34)) + ModifyCOMMAND$
        IF path.exe$ = "" THEN path.exe$ = "./"
        IF os$ = "LNX" THEN
            IF LEFT$(lastBinaryGenerated$, LEN(path.exe$)) = path.exe$ THEN
                SHELL QuotedFilename$(lastBinaryGenerated$) + ModifyCOMMAND$
            ELSE
                SHELL QuotedFilename$(path.exe$ + lastBinaryGenerated$) + ModifyCOMMAND$
            END IF
        END IF
        IF path.exe$ = "./" THEN path.exe$ = ""
        DO: LOOP UNTIL INKEY$ = ""
        DO: LOOP UNTIL _KEYHIT = 0
    END IF

    IF idemode THEN
        'Darken fg/bg colors
        dummy = DarkenFGBG(0)
    END IF

    IF vWatchOn THEN
        sendc$ = CHR$(254) 'launch debug interface
    ELSE
        sendc$ = CHR$(6) 'ready
    END IF
    GOTO sendcommand
END IF

PRINT "Invalid IDE message": END

ideerror:
IF INSTR(idemessage$, sp$) THEN
    'Something went wrong here, so let's give a generic error message to the user.
    '(No error message should contain sp$ - that is, CHR$(13), when not in Debug mode)
    terrmsg$ = _ERRORMESSAGE$
    IF terrmsg$ = "No error" THEN terrmsg$ = "Internal error"
    idemessage$ = "Compiler error (check for syntax errors) (" + terrmsg$ + ":"
    IF ERR THEN idemessage$ = idemessage$ + str2$(ERR) + "-"
    IF _ERRORLINE THEN idemessage$ = idemessage$ + str2$(_ERRORLINE)
    IF _INCLERRORLINE THEN idemessage$ = idemessage$ + "-" + _INCLERRORFILE$ + "-" + str2$(_INCLERRORLINE)
    idemessage$ = idemessage$ + ")"
    IF inclevel > 0 THEN idemessage$ = idemessage$ + incerror$
END IF

sendc$ = CHR$(8) + idemessage$ + MKL$(ideerrorline)
GOTO sendcommand


noide:
IF (qb64versionprinted = 0 OR ConsoleMode = 0) AND NOT QuietMode THEN
    qb64versionprinted = -1
    PRINT "QB64-PE Compiler V" + Version$
END IF

IF CMDLineFile = "" THEN
    LINE INPUT ; "COMPILE (.bas)>", f$
ELSE
    f$ = CMDLineFile
END IF

f$ = LTRIM$(RTRIM$(f$))

IF FileHasExtension(f$) = 0 THEN f$ = f$ + ".bas"

sourcefile$ = f$
CMDLineFile = sourcefile$
'derive name from sourcefile
f$ = RemoveFileExtension$(f$)

path.exe$ = ""
currentdir$ = _CWD$
path.source$ = getfilepath$(sourcefile$)
IF LEN(path.source$) THEN
    IF _DIREXISTS(path.source$) = 0 THEN
        PRINT
        PRINT "Cannot locate source file: " + sourcefile$
        IF ConsoleMode THEN SYSTEM 1
        END 1
    END IF
    CHDIR path.source$
    path.source$ = _CWD$
    IF RIGHT$(path.source$, 1) <> pathsep$ THEN path.source$ = path.source$ + pathsep$
    CHDIR currentdir$
END IF
IF SaveExeWithSource THEN path.exe$ = path.source$

FOR x = LEN(f$) TO 1 STEP -1
    a$ = MID$(f$, x, 1)
    IF a$ = "/" OR a$ = "\" THEN
        f$ = RIGHT$(f$, LEN(f$) - x)
        EXIT FOR
    END IF
NEXT
file$ = f$

'if cmemlist(currentid+1)<>0 before calling regid the variable
'MUST be defined in cmem!

fullrecompile:

BU_DEPENDENCY_CONSOLE_ONLY = DEPENDENCY(DEPENDENCY_CONSOLE_ONLY)
FOR i = 1 TO UBOUND(DEPENDENCY): DEPENDENCY(i) = 0: NEXT
DEPENDENCY(DEPENDENCY_CONSOLE_ONLY) = BU_DEPENDENCY_CONSOLE_ONLY AND 2 'Restore -g switch if used

Error_Happened = 0

FOR closeall = 1 TO 255: CLOSE closeall: NEXT

OPEN tmpdir$ + "temp.bin" FOR OUTPUT LOCK WRITE AS #26 'relock

bh = OpenBuffer%("O", tmpdir$ + "dyninfo.txt")

IF Debug THEN CLOSE #9: OPEN tmpdir$ + "debug.txt" FOR OUTPUT AS #9

FOR i = 1 TO ids_max + 1
    arrayelementslist(i) = 0
    cmemlist(i) = 0
    sfcmemargs(i) = ""
NEXT

'erase cmemlist
'erase sfcmemargs

lastunresolved = -1 'first pass
sflistn = -1 'no entries

SubNameLabels = sp 'QB64 will perform a repass to resolve sub names used as labels

vWatchDesiredState = 0
vWatchRecompileAttempts = 0

qb64prefix_set_desiredState = 0
qb64prefix_set_recompileAttempts = 0

opex_desiredState = 0
opex_recompileAttempts = 0

opexarray_desiredState = 0
opexarray_recompileAttempts = 0

recompile:
vWatchOn = vWatchDesiredState
vWatchVariable "", -1 'reset internal variables list

qb64prefix_set = qb64prefix_set_desiredState
qb64prefix$ = "_"

optionexplicit = opex_desiredState
IF optionexplicit_cmd = -1 AND NoIDEMode = 1 THEN optionexplicit = -1
optionexplicitarray = opexarray_desiredState

lastLineReturn = 0
lastLine = 0
firstLine = 1

Resize = 0
Resize_Scale = 0

UseGL = 0

Error_Happened = 0

HashClear 'clear the hash table

'add reserved words to hashtable

f = HASHFLAG_TYPE + HASHFLAG_RESERVED
HashAdd "_UNSIGNED", f, 0
HashAdd "_BIT", f, 0
HashAdd "_BYTE", f, 0
HashAdd "INTEGER", f, 0
HashAdd "LONG", f, 0
HashAdd "_INTEGER64", f, 0
HashAdd "_OFFSET", f, 0
HashAdd "SINGLE", f, 0
HashAdd "DOUBLE", f, 0
HashAdd "_FLOAT", f, 0
HashAdd "STRING", f, 0
HashAdd "ANY", f, 0

f = HASHFLAG_OPERATOR + HASHFLAG_RESERVED
HashAdd "NOT", f, 0
HashAdd "IMP", f, 0
HashAdd "EQV", f, 0
HashAdd "AND", f, 0
HashAdd "OR", f, 0
HashAdd "XOR", f, 0
HashAdd "MOD", f, 0

f = HASHFLAG_RESERVED + HASHFLAG_CUSTOMSYNTAX
HashAdd "LIST", f, 0
HashAdd "BASE", f, 0
HashAdd "_EXPLICIT", f, 0
HashAdd "AS", f, 0
HashAdd "IS", f, 0
HashAdd "OFF", f, 0
HashAdd "ON", f, 0
HashAdd "STOP", f, 0
HashAdd "TO", f, 0
HashAdd "USING", f, 0
'PUT(graphics) statement:
HashAdd "PRESET", f, 0
HashAdd "PSET", f, 0
'OPEN statement:
HashAdd "FOR", f, 0
HashAdd "OUTPUT", f, 0
HashAdd "RANDOM", f, 0
HashAdd "BINARY", f, 0
HashAdd "APPEND", f, 0
HashAdd "SHARED", f, 0
HashAdd "ACCESS", f, 0
HashAdd "LOCK", f, 0
HashAdd "READ", f, 0
HashAdd "WRITE", f, 0
'LINE statement:
HashAdd "STEP", f, 0
'WIDTH statement:
HashAdd "LPRINT", f, 0
'VIEW statement:
HashAdd "PRINT", f, 0

f = HASHFLAG_RESERVED + HASHFLAG_XELEMENTNAME + HASHFLAG_XTYPENAME
'A
'B
'C
HashAdd "COMMON", f, 0
HashAdd "CALL", f, 0
HashAdd "CASE", f - HASHFLAG_XELEMENTNAME, 0
HashAdd "COM", f, 0 '(ON...)
HashAdd "CONST", f, 0
'D
HashAdd "DATA", f, 0
HashAdd "DECLARE", f, 0
HashAdd "DEF", f, 0
HashAdd "DEFDBL", f, 0
HashAdd "DEFINT", f, 0
HashAdd "DEFLNG", f, 0
HashAdd "DEFSNG", f, 0
HashAdd "DEFSTR", f, 0
HashAdd "DIM", f, 0
HashAdd "DO", f - HASHFLAG_XELEMENTNAME, 0
'E
HashAdd "ERROR", f - HASHFLAG_XELEMENTNAME, 0 '(ON ...)
HashAdd "ELSE", f, 0
HashAdd "ELSEIF", f, 0
HashAdd "ENDIF", f, 0
HashAdd "EXIT", f - HASHFLAG_XELEMENTNAME, 0
'F
HashAdd "FIELD", f - HASHFLAG_XELEMENTNAME, 0
HashAdd "FUNCTION", f, 0
'G
HashAdd "GOSUB", f, 0
HashAdd "GOTO", f, 0
'H
'I
HashAdd "INPUT", f - HASHFLAG_XELEMENTNAME - HASHFLAG_XTYPENAME, 0 '(INPUT$ function exists, so conflicts if allowed as custom syntax)
HashAdd "IF", f, 0
'K
HashAdd "KEY", f - HASHFLAG_XELEMENTNAME - HASHFLAG_XTYPENAME, 0 '(ON...)
'L
HashAdd "LET", f - HASHFLAG_XELEMENTNAME, 0
HashAdd "LOOP", f - HASHFLAG_XELEMENTNAME, 0
HashAdd "LEN", f - HASHFLAG_XELEMENTNAME, 0 '(LEN function exists, so conflicts if allowed as custom syntax)
'M
'N
HashAdd "NEXT", f - HASHFLAG_XELEMENTNAME, 0
'O
'P
HashAdd "PLAY", f - HASHFLAG_XELEMENTNAME - HASHFLAG_XTYPENAME, 0 '(ON...)
HashAdd "PEN", f - HASHFLAG_XELEMENTNAME - HASHFLAG_XTYPENAME, 0 '(ON...)
'Q
'R
HashAdd "REDIM", f, 0
HashAdd "REM", f, 0
HashAdd "RESTORE", f - HASHFLAG_XELEMENTNAME, 0
HashAdd "RESUME", f - HASHFLAG_XELEMENTNAME, 0
HashAdd "RETURN", f - HASHFLAG_XELEMENTNAME, 0
HashAdd "RUN", f - HASHFLAG_XELEMENTNAME, 0
'S
HashAdd "STATIC", f, 0
HashAdd "STRIG", f, 0 '(ON...)
HashAdd "SEG", f, 0
HashAdd "SELECT", f - HASHFLAG_XELEMENTNAME - HASHFLAG_XTYPENAME, 0
HashAdd "SUB", f, 0
HashAdd "SCREEN", f - HASHFLAG_XELEMENTNAME - HASHFLAG_XTYPENAME, 0
'T
HashAdd "THEN", f, 0
HashAdd "TIMER", f - HASHFLAG_XELEMENTNAME - HASHFLAG_XTYPENAME, 0 '(ON...)
HashAdd "TYPE", f - HASHFLAG_XELEMENTNAME, 0
'U
HashAdd "UNTIL", f, 0
HashAdd "UEVENT", f, 0
'V
'W
HashAdd "WEND", f, 0
HashAdd "WHILE", f, 0
'X
'Y
'Z







'clear/init variables
Console = 0
ScreenHide = 0
Asserts = 0
ResolveStaticFunctions = 0
dynamiclibrary = 0
dimsfarray = 0
dimstatic = 0
AllowLocalName = 0
PossibleSubNameLabels = sp 'QB64 will perform a repass to resolve sub names used as labels
use_global_byte_elements = 0
dimshared = 0: dimmethod = 0: dimoption = 0: redimoption = 0: commonoption = 0
mylib$ = "": mylibopt$ = ""
declaringlibrary = 0
nLabels = 0
dynscope = 0
elsefollowup = 0
ontimerid = 0: onkeyid = 0: onstrigid = 0
commonarraylist = "": commonarraylistn = 0
staticarraylist = "": staticarraylistn = 0
fooindwel = 0
layout = ""
layoutok = 0
NoChecks = 0
inclevel = 0
errorLineInInclude = 0
addmetainclude$ = ""
nextrunlineindex = 1
lasttype = 0
lasttypeelement = 0
REDIM SHARED udtxname(1000) AS STRING * 256
REDIM SHARED udtxcname(1000) AS STRING * 256
REDIM SHARED udtxsize(1000) AS LONG
REDIM SHARED udtxbytealign(1000) AS INTEGER 'first element MUST be on a byte alignment & size is a multiple of 8
REDIM SHARED udtxnext(1000) AS LONG
REDIM SHARED udtxvariable(1000) AS INTEGER 'true if the udt contains variable length elements
'elements
REDIM SHARED udtename(1000) AS STRING * 256
REDIM SHARED udtecname(1000) AS STRING * 256
REDIM SHARED udtebytealign(1000) AS INTEGER
REDIM SHARED udtesize(1000) AS LONG
REDIM SHARED udtetype(1000) AS LONG
REDIM SHARED udtetypesize(1000) AS LONG
REDIM SHARED udtearrayelements(1000) AS LONG
REDIM SHARED udtenext(1000) AS LONG
definingtype = 0
definingtypeerror = 0
constlast = -1
'constlastshared = -1
closedmain = 0
addmetastatic = 0
addmetadynamic = 0
DynamicMode = 0
optionbase = 0
ExeIconSet = 0
VersionInfoSet = 0
viFileVersionNum$ = "": viProductVersionNum$ = "": viCompanyName$ = ""
viFileDescription$ = "": viFileVersion$ = "": viInternalName$ = ""
viLegalCopyright$ = "": viLegalTrademarks$ = "": viOriginalFilename$ = ""
viProductName$ = "": viProductVersion$ = "": viComments$ = "": viWeb$ = ""
DataOffset = 0
statementn = 0
everycasenewcase = 0
qberrorhappened = 0: qberrorcode = 0: qberrorline = 0
FOR i = 1 TO 27: defineaz(i) = "SINGLE": defineextaz(i) = "!": NEXT
controllevel = 0
findidsecondarg$ = "": findanotherid = 0: findidinternal = 0: currentid = 0
linenumber = 0
wholeline$ = ""
linefragment$ = ""
idn = 0
arrayprocessinghappened = 0
stringprocessinghappened = 0
inputfunctioncalled = 0
subfuncn = 0
closedsubfunc = 0
subfunc = ""
SelectCaseCounter = 0
ExecCounter = 0
UserDefineCount = 7
totalVariablesCreated = 0
typeDefinitions$ = ""
totalMainVariablesCreated = 0
REDIM SHARED usedVariableList(1000) AS usedVarList
totalWarnings = 0
duplicateConstWarning = 0
emptySCWarning = 0
warningListItems = 0
lastWarningHeader = ""
vWatchUsedLabels = SPACE$(1000)
vWatchUsedSkipLabels = SPACE$(1000)
firstLineNumberLabelvWatch = 0
REDIM SHARED warning$(1000)
REDIM SHARED warningLines(1000) AS LONG
REDIM SHARED warningIncLines(1000) AS LONG
REDIM SHARED warningIncFiles(1000) AS STRING
maxLineNumber = 0
uniquenumbern = 0


''create a type for storing memory blocks
''UDT
''names
'DIM SHARED lasttype AS LONG
'DIM SHARED udtxname(1000) AS STRING * 256
'DIM SHARED udtxcname(1000) AS STRING * 256
'DIM SHARED udtxsize(1000) AS LONG
'DIM SHARED udtxbytealign(1000) AS INTEGER 'first element MUST be on a byte alignment & size is a multiple of 8
'DIM SHARED udtxnext(1000) AS LONG
''elements
'DIM SHARED lasttypeelement AS LONG
'DIM SHARED udtename(1000) AS STRING * 256
'DIM SHARED udtecname(1000) AS STRING * 256
'DIM SHARED udtebytealign(1000) AS INTEGER
'DIM SHARED udtesize(1000) AS LONG
'DIM SHARED udtetype(1000) AS LONG
'DIM SHARED udtetypesize(1000) AS LONG
'DIM SHARED udtearrayelements(1000) AS LONG
'DIM SHARED udtenext(1000) AS LONG

'import _MEM type
ptrsz = OS_BITS \ 8

lasttype = lasttype + 1: i = lasttype
udtxname(i) = "_MEM"
udtxcname(i) = "_MEM"
udtxsize(i) = ((ptrsz) * 5 + (4) * 2 + (8) * 1) * 8
udtxbytealign(i) = 1
lasttypeelement = lasttypeelement + 1: i2 = lasttypeelement
udtename(i2) = "OFFSET"
udtecname(i2) = "OFFSET"
udtebytealign(i2) = 1
udtetype(i2) = OFFSETTYPE: udtesize(i2) = ptrsz * 8
udtetypesize(i2) = 0 'tsize
udtxnext(i) = i2
i3 = i2
lasttypeelement = lasttypeelement + 1: i2 = lasttypeelement
udtename(i2) = "SIZE"
udtecname(i2) = "SIZE"
udtebytealign(i2) = 1
udtetype(i2) = OFFSETTYPE: udtesize(i2) = ptrsz * 8
udtetypesize(i2) = 0 'tsize
udtenext(i3) = i2
i3 = i2
lasttypeelement = lasttypeelement + 1: i2 = lasttypeelement
udtename(i2) = "$_LOCK_ID"
udtecname(i2) = "$_LOCK_ID"
udtebytealign(i2) = 1
udtetype(i2) = INTEGER64TYPE: udtesize(i2) = 64
udtetypesize(i2) = 0 'tsize
udtenext(i3) = i2
i3 = i2
lasttypeelement = lasttypeelement + 1: i2 = lasttypeelement
udtename(i2) = "$_LOCK_OFFSET"
udtecname(i2) = "$_LOCK_OFFSET"
udtebytealign(i2) = 1
udtetype(i2) = OFFSETTYPE: udtesize(i2) = ptrsz * 8
udtetypesize(i2) = 0 'tsize
udtenext(i3) = i2
i3 = i2
lasttypeelement = lasttypeelement + 1: i2 = lasttypeelement
udtename(i2) = "TYPE"
udtecname(i2) = "TYPE"
udtebytealign(i2) = 1
udtetype(i2) = OFFSETTYPE: udtesize(i2) = ptrsz * 8
udtetypesize(i2) = 0 'tsize
udtenext(i3) = i2
i3 = i2
lasttypeelement = lasttypeelement + 1: i2 = lasttypeelement
udtename(i2) = "ELEMENTSIZE"
udtecname(i2) = "ELEMENTSIZE"
udtebytealign(i2) = 1
udtetype(i2) = OFFSETTYPE: udtesize(i2) = ptrsz * 8
udtetypesize(i2) = 0 'tsize
udtenext(i3) = i2
udtenext(i2) = 0
i3 = i2
lasttypeelement = lasttypeelement + 1: i2 = lasttypeelement
udtename(i2) = "IMAGE"
udtecname(i2) = "IMAGE"
udtebytealign(i2) = 1
udtetype(i2) = LONGTYPE: udtesize(i2) = 32
udtetypesize(i2) = 0 'tsize
udtenext(i3) = i2
udtenext(i2) = 0
i3 = i2
lasttypeelement = lasttypeelement + 1: i2 = lasttypeelement
udtename(i2) = "SOUND"
udtecname(i2) = "SOUND"
udtebytealign(i2) = 1
udtetype(i2) = LONGTYPE: udtesize(i2) = 32
udtetypesize(i2) = 0 'tsize
udtenext(i3) = i2
udtenext(i2) = 0

' Reset all unstable flags
REDIM SHARED unstableFlags(1) AS _BYTE

' Indicates if a MIDI sound font was selected
'
' Captures both the line number and line contents for error reporting later-on
' in the compilation process
MidiSoundFontSet = 0
MidiSoundFontLine$ = ""

' If MidiSoundFont$ is blank, then the default is used
MidiSoundFont$ = ""








'begin compilation
FOR closeall = 1 TO 255: CLOSE closeall: NEXT
OPEN tmpdir$ + "temp.bin" FOR OUTPUT LOCK WRITE AS #26 'relock

bh = OpenBuffer%("O", tmpdir$ + "icon.rc")

IF Debug THEN CLOSE #9: OPEN tmpdir$ + "debug.txt" FOR APPEND AS #9

IF idemode = 0 THEN
    qberrorhappened = -1
    OPEN sourcefile$ FOR INPUT AS #1
    qberrorhappened1:
    IF qberrorhappened = 1 THEN
        PRINT
        PRINT "Cannot locate source file: " + sourcefile$
        IF ConsoleMode THEN SYSTEM 1
        END 1
    ELSE
        CLOSE #1
    END IF
    qberrorhappened = 0
END IF

reginternal

IF qb64prefix_set THEN
    qb64prefix$ = ""

    're-add internal keywords without the "_" prefix
    reginternal

    f = HASHFLAG_TYPE + HASHFLAG_RESERVED
    HashAdd "UNSIGNED", f, 0
    HashAdd "BIT", f, 0
    HashAdd "BYTE", f, 0
    HashAdd "INTEGER64", f, 0
    HashAdd "OFFSET", f, 0
    HashAdd "FLOAT", f, 0

    f = HASHFLAG_RESERVED + HASHFLAG_CUSTOMSYNTAX
    HashAdd "EXPLICIT", f, 0
END IF

DIM SHARED GlobTxtBuf: GlobTxtBuf = OpenBuffer%("O", tmpdir$ + "global.txt")
defdatahandle = GlobTxtBuf

IF iderecompile THEN
    iderecompile = 0
    idepass = 1 'prepass must be done again
    sendc$ = CHR$(7) 'repass request
    GOTO sendcommand
END IF

IF idemode THEN GOTO ideret1

IF NOT QuietMode THEN
    PRINT
    PRINT "Beginning C++ output from QB64 code... "
END IF

lineinput3load sourcefile$

DO

    '### STEVE EDIT FOR CONST EXPANSION 10/11/2013

    wholeline$ = lineinput3$
    IF wholeline$ = CHR$(13) THEN EXIT DO

    ideprepass:
    prepassLastLine:

    IF lastLine <> 0 OR firstLine <> 0 THEN
        lineBackup$ = wholeline$ 'backup the real line (will be blank when lastline is set)
        forceIncludeFromRoot$ = ""
        IF vWatchOn THEN
            addingvWatch = 1
            IF firstLine <> 0 THEN forceIncludeFromRoot$ = "internal\support\vwatch\vwatch.bi"
            IF lastLine <> 0 THEN forceIncludeFromRoot$ = "internal\support\vwatch\vwatch.bm"
        ELSE
            'IF firstLine <> 0 THEN forceIncludeFromRoot$ = "internal\support\vwatch\vwatch_stub.bi"
            IF lastLine <> 0 THEN forceIncludeFromRoot$ = "internal\support\vwatch\vwatch_stub.bm"
        END IF
        firstLine = 0: lastLine = 0
        IF LEN(forceIncludeFromRoot$) THEN GOTO forceInclude_prepass
        forceIncludeCompleted_prepass:
        addingvWatch = 0
        wholeline$ = lineBackup$
    END IF

    wholestv$ = wholeline$ '### STEVE EDIT FOR CONST EXPANSION 10/11/2013

    prepass = 1
    layout = ""
    layoutok = 0

    linenumber = linenumber + 1
    reallinenumber = reallinenumber + 1

    DO UNTIL linenumber < UBOUND(InValidLine) 'color information flag for each line
        REDIM _PRESERVE InValidLine(UBOUND(InValidLine) + 1000) AS _BYTE
    LOOP
    InValidLine(linenumber) = 0

    IF LEN(wholeline$) THEN

        IF UCASE$(_TRIM$(wholeline$)) = "$NOPREFIX" THEN
            qb64prefix_set_desiredState = 1
            IF qb64prefix_set = 0 THEN
                IF qb64prefix_set_recompileAttempts = 0 THEN
                    qb64prefix_set_recompileAttempts = qb64prefix_set_recompileAttempts + 1
                    GOTO do_recompile
                END IF
            END IF
        END IF

        wholeline$ = lineformat(wholeline$)
        IF Error_Happened THEN GOTO errmes


        temp$ = LTRIM$(RTRIM$(UCASE$(wholestv$)))

        IF temp$ = "$COLOR:0" THEN
            IF qb64prefix_set THEN
                addmetainclude$ = getfilepath$(COMMAND$(0)) + "internal" + pathsep$ + "support" + pathsep$ + "color" + pathsep$ + "color0_noprefix.bi"
            ELSE
                addmetainclude$ = getfilepath$(COMMAND$(0)) + "internal" + pathsep$ + "support" + pathsep$ + "color" + pathsep$ + "color0.bi"
            END IF
            GOTO finishedlinepp
        END IF

        IF temp$ = "$COLOR:32" THEN
            IF qb64prefix_set THEN
                addmetainclude$ = getfilepath$(COMMAND$(0)) + "internal" + pathsep$ + "support" + pathsep$ + "color" + pathsep$ + "color32_noprefix.bi"
            ELSE
                addmetainclude$ = getfilepath$(COMMAND$(0)) + "internal" + pathsep$ + "support" + pathsep$ + "color" + pathsep$ + "color32.bi"
            END IF
            GOTO finishedlinepp
        END IF

        IF temp$ = "$DEBUG" THEN
            vWatchDesiredState = 1
            IF vWatchOn = 0 THEN
                IF vWatchRecompileAttempts = 0 THEN
                    'this is the first time a conflict has occurred, so react immediately with a full recompilation using the desired state
                    vWatchRecompileAttempts = vWatchRecompileAttempts + 1
                    GOTO do_recompile
                ELSE
                    'continue compilation to retrieve the final state requested and act on that as required
                END IF
            END IF
        END IF

        IF LEFT$(temp$, 4) = "$IF " THEN
            IF RIGHT$(temp$, 5) <> " THEN" THEN a$ = "$IF without THEN": GOTO errmes
            temp$ = LTRIM$(MID$(temp$, 4)) 'strip off the $IF and extra spaces
            temp$ = RTRIM$(LEFT$(temp$, LEN(temp$) - 4)) 'and strip off the THEN and extra spaces
            temp = INSTR(temp$, "=")
            ExecCounter = ExecCounter + 1
            ExecLevel(ExecCounter) = -1 'default to a skip value
            DefineElse(ExecCounter) = 1 '1 says we have an $IF statement at this level
            result = EvalPreIF(temp$, a$)
            IF a$ <> "" THEN GOTO errmes
            IF result <> 0 THEN
                ExecLevel(ExecCounter) = ExecLevel(ExecCounter - 1) 'So we inherit the execlevel from above
                IF ExecLevel(ExecCounter) = 0 THEN DefineElse(ExecCounter) = DefineElse(ExecCounter) OR 4 'Else if used and conditon found
            END IF
            GOTO finishedlinepp 'and then we're finished -- and at this point we didn't make a match so we exit with a DONT READ type flag on our code.
        END IF

        IF temp$ = "$ELSE" THEN
            IF DefineElse(ExecCounter) = 0 THEN a$ = "$ELSE without $IF": GOTO errmes
            IF DefineElse(ExecCounter) AND 2 THEN a$ = "$IF block already has $ELSE statement in it": GOTO errmes
            DefineElse(ExecCounter) = DefineElse(ExecCounter) OR 2 'set the flag to declare an $ELSE already in this block
            IF DefineElse(ExecCounter) AND 4 THEN 'If we executed code in a previous IF or ELSE IF statement, we can't do it here
                ExecLevel(ExecCounter) = -1 'So we inherit the execlevel from above
            ELSE
                ExecLevel(ExecCounter) = ExecLevel(ExecCounter - 1) 'If we were processing code before, code after this segment is going to be SKIPPED
            END IF
            GOTO finishedlinepp
        END IF

        IF LEFT$(temp$, 5) = "$ELSE" THEN 'looking for $ELSE IF
            temp$ = LTRIM$(MID$(temp$, 6))
            IF LEFT$(temp$, 3) = "IF " THEN
                IF DefineElse(ExecCounter) = 0 THEN a$ = "$ELSE IF without $IF": GOTO errmes
                IF DefineElse(ExecCounter) AND 2 THEN a$ = "$ELSE IF cannot follow $ELSE": GOTO errmes
                IF RIGHT$(temp$, 5) <> " THEN" THEN a$ = "$ELSE IF without THEN": GOTO errmes
                IF DefineElse(ExecCounter) AND 4 THEN 'If we executed code in a previous IF or ELSE IF statement, we can't do it here
                    ExecLevel(ExecCounter) = -1
                    GOTO finishedlinepp
                END IF
                temp$ = LTRIM$(MID$(temp$, 3)) 'strip off the IF and extra spaces
                temp$ = RTRIM$(LEFT$(temp$, LEN(temp$) - 4)) 'and strip off the THEN and extra spaces
                result = EvalPreIF(temp$, a$)
                IF a$ <> "" THEN GOTO errmes
                IF result <> 0 THEN
                    ExecLevel(ExecCounter) = ExecLevel(ExecCounter - 1) 'So we inherit the execlevel from above
                    IF ExecLevel(ExecCounter) = 0 THEN DefineElse(ExecCounter) = DefineElse(ExecCounter) OR 4 'Else if used and conditon found
                END IF
                GOTO finishedlinepp 'and then we're finished -- and at this point we didn't make a match so we exit with a DONT READ type flag on our code.
            END IF
        END IF

        IF temp$ = "$END IF" OR temp$ = "$ENDIF" THEN
            IF DefineElse(ExecCounter) = 0 THEN a$ = "$END IF without $IF": GOTO errmes
            DefineElse(ExecCounter) = 0 'We no longer have an $IF block at this level
            ExecCounter = ExecCounter - 1
            GOTO finishedlinepp
        END IF

        IF ExecLevel(ExecCounter) THEN
            DO UNTIL linenumber < UBOUND(InValidLine)
                REDIM _PRESERVE InValidLine(UBOUND(InValidLine) + 1000) AS _BYTE
            LOOP

            InValidLine(linenumber) = -1
            GOTO finishedlinepp 'we don't check for anything inside lines that we've marked for skipping
        END IF

        IF LEFT$(temp$, 7) = "$ERROR " THEN
            temp$ = LTRIM$(MID$(temp$, 7))
            a$ = "Compilation check failed: " + temp$
            GOTO errmes
        END IF

        IF LEFT$(temp$, 5) = "$LET " THEN
            temp$ = LTRIM$(MID$(temp$, 5)) 'simply shorten our string to parse
            'For starters, let's make certain that we have 3 elements to deal with
            temp = INSTR(temp$, "=") 'without an = in there, we can't get a value from the left and right side
            IF temp = 0 THEN a$ = "Invalid Syntax.  $LET <flag> = <value>": GOTO errmes
            l$ = RTRIM$(LEFT$(temp$, temp - 1)): r$ = LTRIM$(MID$(temp$, temp + 1))
            'then validate to make certain the left side looks proper
            IF validname(l$) = 0 THEN a$ = "Invalid flag name": GOTO errmes
            IF LEFT$(r$, 1) = CHR$(34) THEN r$ = LTRIM$(MID$(r$, 2))
            IF RIGHT$(r$, 1) = CHR$(34) THEN r$ = RTRIM$(LEFT$(r$, LEN(r$) - 1))
            IF LEFT$(r$, 1) = "-" THEN
                r1$ = "-"
                r$ = LTRIM$(MID$(r$, 2))
            ELSE
                r1$ = ""
            END IF
            'then validate to make certain the left side looks proper
            FOR i = 1 TO LEN(r$)
                a = ASC(r$, i)
                SELECT CASE a
                    CASE 32
                    CASE 46 'periods are fine.
                        r1$ = r1$ + "."
                    CASE IS < 48, IS > 90
                        a$ = "Invalid value": GOTO errmes
                    CASE ELSE
                        r1$ = r1$ + CHR$(a)
                END SELECT
            NEXT
            r$ = r1$
            'First look to see if we have an existing setting like this and if so, update it
            FOR i = 8 TO UserDefineCount 'UserDefineCount 1-7 are reserved for automatic OS/BIT detection & version
                IF UserDefine(0, i) = l$ THEN UserDefine(1, i) = r$: GOTO finishedlinepp
            NEXT
            'Otherwise create a new setting and set the initial value for it
            UserDefineCount = UserDefineCount + 1
            IF UserDefineCount > UBOUND(UserDefine, 2) THEN
                REDIM _PRESERVE UserDefine(1, UBOUND(UserDefine, 2) + 10) 'Add another 10 elements to the array so it'll expand as the user adds to it
            END IF
            UserDefine(0, UserDefineCount) = l$
            UserDefine(1, UserDefineCount) = r$
            GOTO finishedlinepp
        END IF

        ' We check for Unstable flags during the preprocessing step because it
        ' impacts what valid commands there are in all the other steps
        IF LEFT$(temp$, 10) = "$UNSTABLE:" THEN
            token$ = UCASE$(LTRIM$(RTRIM$(MID$(temp$, 11))))

            SELECT CASE token$
                CASE "MIDI"
                    IF NOT UseMiniaudioBackend THEN
                        a$ = "Midi is not supported with the old OpenAL audio backend."
                        GOTO errmes
                    END IF

                    unstableFlags(UNSTABLE_MIDI) = -1

                CASE ELSE
                    a$ = "Unrecognized unstable flag " + AddQuotes$(token$)
                    GOTO errmes
            END SELECT
        END IF

        cwholeline$ = wholeline$
        wholeline$ = eleucase$(wholeline$) '********REMOVE THIS LINE LATER********


        addmetadynamic = 0: addmetastatic = 0
        wholelinen = numelements(wholeline$)

        IF wholelinen THEN

            wholelinei = 1

            'skip line number?
            e$ = getelement$(wholeline$, 1)
            IF (ASC(e$) >= 48 AND ASC(e$) <= 59) OR ASC(e$) = 46 THEN wholelinei = 2: GOTO ppskpl

            'skip 'POSSIBLE' line label?
            IF wholelinen >= 2 THEN
                x2 = INSTR(wholeline$, sp + ":" + sp): x3 = x2 + 2
                IF x2 = 0 THEN
                    IF RIGHT$(wholeline$, 2) = sp + ":" THEN x2 = LEN(wholeline$) - 1: x3 = x2 + 1
                END IF

                IF x2 THEN
                    e$ = LEFT$(wholeline$, x2 - 1)
                    IF validlabel(e$) THEN
                        wholeline$ = RIGHT$(wholeline$, LEN(wholeline$) - x3)
                        cwholeline$ = RIGHT$(cwholeline$, LEN(wholeline$) - x3)
                        wholelinen = numelements(wholeline$)
                        GOTO ppskpl
                    END IF 'valid
                END IF 'includes ":"
            END IF 'wholelinen>=2

            ppskpl:
            IF wholelinei <= wholelinen THEN
                '----------------------------------------
                a$ = ""
                ca$ = ""
                ppblda:
                e$ = getelement$(wholeline$, wholelinei)
                ce$ = getelement$(cwholeline$, wholelinei)
                IF e$ = ":" OR e$ = "ELSE" OR e$ = "THEN" OR e$ = "" THEN
                    IF LEN(a$) THEN
                        IF Debug THEN PRINT #9, "PP[" + a$ + "]"
                        n = numelements(a$)
                        firstelement$ = getelement(a$, 1)
                        secondelement$ = getelement(a$, 2)
                        thirdelement$ = getelement(a$, 3)
                        '========================================

                        IF n = 2 AND firstelement$ = "END" AND (secondelement$ = "SUB" OR secondelement$ = "FUNCTION") THEN
                            closedsubfunc = -1
                        END IF

                        'declare library
                        IF declaringlibrary THEN

                            IF firstelement$ = "END" THEN
                                IF n <> 2 OR secondelement$ <> "DECLARE" THEN a$ = "Expected END DECLARE": GOTO errmes
                                declaringlibrary = 0
                                GOTO finishedlinepp
                            END IF 'end declare

                            declaringlibrary = 2

                            IF firstelement$ = "SUB" OR firstelement$ = "FUNCTION" THEN subfuncn = subfuncn - 1: GOTO declaresubfunc

                            a$ = "Expected SUB/FUNCTION definition or END DECLARE (#2)": GOTO errmes
                        END IF

                        'UDT TYPE definition
                        IF definingtype THEN
                            i = definingtype

                            IF n >= 1 THEN
                                IF firstelement$ = "END" THEN
                                    IF n <> 2 OR secondelement$ <> "TYPE" THEN a$ = "Expected END TYPE": GOTO errmes
                                    IF udtxnext(i) = 0 THEN a$ = "No elements defined in TYPE": GOTO errmes
                                    definingtype = 0

                                    'create global buffer for SWAP space
                                    siz$ = str2$(udtxsize(i) \ 8)
                                    WriteBufLine GlobTxtBuf, "char *g_tmp_udt_" + RTRIM$(udtxname(i)) + "=(char*)malloc(" + siz$ + ");"

                                    'print "END TYPE";udtxsize(i);udtxbytealign(i)
                                    GOTO finishedlinepp
                                END IF
                            END IF

                            IF n < 3 THEN a$ = "Expected element-name AS type, AS type element-list, or END TYPE": GOTO errmes
                            n$ = firstelement$

                            IF n$ <> "AS" THEN
                                'traditional variable-name AS type syntax, single-element
                                lasttypeelement = lasttypeelement + 1
                                i2 = lasttypeelement
                                WHILE i2 > UBOUND(udtenext): increaseUDTArrays: WEND
                                udtenext(i2) = 0

                                ii = 2

                                udtearrayelements(i2) = 0

                                IF ii >= n OR getelement$(a$, ii) <> "AS" THEN a$ = "Expected element-name AS type, AS type element-list, or END TYPE": GOTO errmes
                                t$ = getelements$(a$, ii + 1, n)

                                IF t$ = RTRIM$(udtxname(definingtype)) THEN a$ = "Invalid self-reference": GOTO errmes
                                typ = typname2typ(t$)
                                IF Error_Happened THEN GOTO errmes
                                IF typ = 0 THEN a$ = "Undefined type": GOTO errmes
                                typsize = typname2typsize

                                IF validname(n$) = 0 THEN a$ = "Invalid name": GOTO errmes
                                udtename(i2) = n$
                                udtecname(i2) = getelement$(ca$, 1)
                                NormalTypeBlock:
                                typeDefinitions$ = typeDefinitions$ + MKL$(i2) + MKL$(LEN(n$)) + n$
                                udtetype(i2) = typ
                                udtetypesize(i2) = typsize

                                hashname$ = n$

                                'check for name conflicts (any similar reserved or element from current UDT)
                                hashchkflags = HASHFLAG_RESERVED + HASHFLAG_UDTELEMENT
                                hashres = HashFind(hashname$, hashchkflags, hashresflags, hashresref)
                                DO WHILE hashres
                                    IF hashresflags AND HASHFLAG_UDTELEMENT THEN
                                        IF hashresref = i THEN a$ = "Name already in use (" + hashname$ + ")": GOTO errmes
                                    END IF
                                    IF hashresflags AND HASHFLAG_RESERVED THEN
                                        IF hashresflags AND (HASHFLAG_TYPE + HASHFLAG_CUSTOMSYNTAX + HASHFLAG_OPERATOR + HASHFLAG_XELEMENTNAME) THEN a$ = "Name already in use (" + hashname$ + ")": GOTO errmes
                                    END IF
                                    IF hashres <> 1 THEN hashres = HashFindCont(hashresflags, hashresref) ELSE hashres = 0
                                LOOP
                                'add to hash table
                                HashAdd hashname$, HASHFLAG_UDTELEMENT, i

                                'Calculate element's size
                                IF typ AND ISUDT THEN
                                    u = typ AND 511
                                    udtesize(i2) = udtxsize(u)
                                    IF udtxbytealign(u) THEN udtxbytealign(i) = 1: udtebytealign(i2) = 1
                                    IF udtxvariable(u) THEN udtxvariable(i) = -1
                                ELSE
                                    IF (typ AND ISSTRING) THEN
                                        IF (typ AND ISFIXEDLENGTH) = 0 THEN
                                            udtesize(i2) = OFFSETTYPE AND 511
                                            udtxvariable(i) = -1
                                        ELSE
                                            udtesize(i2) = typsize * 8
                                        END IF
                                        udtxbytealign(i) = 1: udtebytealign(i2) = 1
                                    ELSE
                                        udtesize(i2) = typ AND 511
                                        IF (typ AND ISOFFSETINBITS) = 0 THEN udtxbytealign(i) = 1: udtebytealign(i2) = 1
                                    END IF
                                END IF

                                'Increase block size
                                IF udtebytealign(i2) THEN
                                    IF udtxsize(i) MOD 8 THEN
                                        udtxsize(i) = udtxsize(i) + (8 - (udtxsize(i) MOD 8))
                                    END IF
                                END IF
                                udtxsize(i) = udtxsize(i) + udtesize(i2)

                                'Link element to previous element
                                IF udtxnext(i) = 0 THEN
                                    udtxnext(i) = i2
                                ELSE
                                    udtenext(i2 - 1) = i2
                                END IF

                                'print "+"+rtrim$(udtename(i2));udtetype(i2);udtesize(i2);udtebytealign(i2);udtxsize(i)
                                IF newAsTypeBlockSyntax THEN RETURN
                                GOTO finishedlinepp
                            ELSE
                                'new AS type variable-list syntax, multiple elements
                                ii = 2

                                IF ii >= n THEN a$ = "Expected element-name AS type, AS type element-list, or END TYPE": GOTO errmes
                                previousElement$ = ""
                                t$ = ""
                                lastElement$ = ""
                                buildTypeName:
                                lastElement$ = getelement$(a$, ii)
                                IF lastElement$ <> "," AND lastElement$ <> "" THEN
                                    n$ = lastElement$
                                    cn$ = getelement$(ca$, ii)
                                    IF LEN(previousElement$) THEN t$ = t$ + previousElement$ + " "
                                    previousElement$ = n$
                                    lastElement$ = ""
                                    ii = ii + 1
                                    GOTO buildTypeName
                                END IF

                                t$ = RTRIM$(t$)
                                IF t$ = RTRIM$(udtxname(definingtype)) THEN a$ = "Invalid self-reference": GOTO errmes
                                typ = typname2typ(t$)
                                IF Error_Happened THEN GOTO errmes
                                IF typ = 0 THEN a$ = "Undefined type": GOTO errmes
                                typsize = typname2typsize

                                previousElement$ = lastElement$
                                nexttypeelement:
                                lasttypeelement = lasttypeelement + 1
                                i2 = lasttypeelement
                                WHILE i2 > UBOUND(udtenext): increaseUDTArrays: WEND
                                udtenext(i2) = 0
                                udtearrayelements(i2) = 0

                                udtename(i2) = n$
                                udtecname(i2) = cn$

                                IF validname(n$) = 0 THEN a$ = "Invalid name": GOTO errmes

                                newAsTypeBlockSyntax = -1
                                GOSUB NormalTypeBlock
                                newAsTypeBlockSyntax = 0

                                getNextElement:
                                ii = ii + 1
                                lastElement$ = getelement$(a$, ii)
                                IF lastElement$ = "" THEN GOTO finishedlinepp
                                IF ii = n AND lastElement$ = "," THEN a$ = "Expected element-name": GOTO errmes
                                IF lastElement$ = "," THEN
                                    IF previousElement$ = "," THEN a$ = "Expected element-name": GOTO errmes
                                    previousElement$ = lastElement$
                                    GOTO getNextElement
                                END IF
                                n$ = lastElement$
                                IF previousElement$ <> "," THEN a$ = "Expected ,": GOTO errmes
                                previousElement$ = lastElement$
                                cn$ = getelement$(ca$, ii)
                                GOTO nexttypeelement
                            END IF
                        END IF 'definingtype

                        IF definingtype AND n >= 1 THEN a$ = "Expected END TYPE": GOTO errmes

                        IF n >= 1 THEN
                            IF firstelement$ = "TYPE" THEN
                                IF n <> 2 THEN a$ = "Expected TYPE typename": GOTO errmes
                                lasttype = lasttype + 1
                                typeDefinitions$ = typeDefinitions$ + MKL$(-1) + MKL$(lasttype)
                                definingtype = lasttype
                                i = definingtype
                                WHILE i > UBOUND(udtenext): increaseUDTArrays: WEND
                                IF validname(secondelement$) = 0 THEN a$ = "Invalid name": GOTO errmes
                                typeDefinitions$ = typeDefinitions$ + MKL$(LEN(secondelement$)) + secondelement$
                                udtxname(i) = secondelement$
                                udtxcname(i) = getelement(ca$, 2)
                                udtxnext(i) = 0
                                udtxsize(i) = 0
                                udtxvariable(i) = 0

                                hashname$ = secondelement$
                                hashflags = HASHFLAG_UDT
                                'check for name conflicts (any similar reserved/sub/function/UDT name)
                                hashchkflags = HASHFLAG_RESERVED + HASHFLAG_SUB + HASHFLAG_FUNCTION + HASHFLAG_UDT
                                hashres = HashFind(hashname$, hashchkflags, hashresflags, hashresref)
                                DO WHILE hashres
                                    allow = 0
                                    IF hashresflags AND (HASHFLAG_SUB + HASHFLAG_FUNCTION) THEN
                                        allow = 1
                                    END IF
                                    IF hashresflags AND HASHFLAG_RESERVED THEN
                                        IF (hashresflags AND (HASHFLAG_TYPE + HASHFLAG_OPERATOR + HASHFLAG_CUSTOMSYNTAX + HASHFLAG_XTYPENAME)) = 0 THEN allow = 1
                                    END IF
                                    IF allow = 0 THEN a$ = "Name already in use (" + hashname$ + ")": GOTO errmes
                                    IF hashres <> 1 THEN hashres = HashFindCont(hashresflags, hashresref) ELSE hashres = 0
                                LOOP

                                'add to hash table
                                HashAdd hashname$, hashflags, i

                                GOTO finishedlinepp
                            END IF
                        END IF





                        IF n >= 1 AND firstelement$ = "CONST" THEN
                            'l$ = "CONST"
                            'DEF... do not change type, the expression is stored in a suitable type
                            'based on its value if type isn't forced/specified

                            IF subfuncn > 0 AND closedsubfunc <> 0 THEN a$ = "Statement cannot be placed between SUB/FUNCTIONs": GOTO errmes

                            'convert periods to _046_
                            i2 = INSTR(a$, sp + "." + sp)
                            IF i2 THEN
                                DO
                                    a$ = LEFT$(a$, i2 - 1) + fix046$ + RIGHT$(a$, LEN(a$) - i2 - 2)
                                    ca$ = LEFT$(ca$, i2 - 1) + fix046$ + RIGHT$(ca$, LEN(ca$) - i2 - 2)
                                    i2 = INSTR(a$, sp + "." + sp)
                                LOOP UNTIL i2 = 0
                                n = numelements(a$)
                                firstelement$ = getelement(a$, 1): secondelement$ = getelement(a$, 2): thirdelement$ = getelement(a$, 3)
                            END IF

                            IF n < 3 THEN a$ = "Expected CONST name = value/expression": GOTO errmes
                            i = 2
                            constdefpendingpp:
                            pending = 0

                            n$ = getelement$(ca$, i): i = i + 1
                            typeoverride = 0
                            s$ = removesymbol$(n$)
                            IF Error_Happened THEN GOTO errmes
                            IF s$ <> "" THEN
                                typeoverride = typname2typ(s$)
                                IF Error_Happened THEN GOTO errmes
                                IF typeoverride AND ISFIXEDLENGTH THEN a$ = "Invalid constant type": GOTO errmes
                                IF typeoverride = 0 THEN a$ = "Invalid constant type": GOTO errmes
                            END IF

                            IF getelement$(a$, i) <> "=" THEN a$ = "Expected =": GOTO errmes
                            i = i + 1

                            'get expression
                            e$ = ""
                            readable_e$ = ""
                            B = 0
                            FOR i2 = i TO n
                                e2$ = getelement$(ca$, i2)
                                IF e2$ = "(" THEN B = B + 1
                                IF e2$ = ")" THEN B = B - 1
                                IF e2$ = "," AND B = 0 THEN
                                    pending = 1
                                    i = i2 + 1
                                    IF i > n - 2 THEN a$ = "Expected CONST ... , name = value/expression": GOTO errmes
                                    EXIT FOR
                                END IF
                                IF LEN(e$) = 0 THEN e$ = e2$ ELSE e$ = e$ + sp + e2$

                                e3$ = e2$
                                IF LEN(e2$) > 1 THEN
                                    IF ASC(e2$, 1) = 34 THEN
                                        removeComma = _INSTRREV(e2$, ",")
                                        e3$ = LEFT$(e2$, removeComma - 1)
                                    ELSE
                                        removeComma = INSTR(e2$, ",")
                                        e3$ = MID$(e2$, removeComma + 1)
                                    END IF
                                END IF

                                IF LEN(readable_e$) = 0 THEN
                                    readable_e$ = e3$
                                ELSE
                                    readable_e$ = readable_e$ + " " + e3$
                                END IF
                            NEXT

                            'intercept current expression and pass it through Evaluate_Expression$
                            '(unless it is a literal string)
                            IF LEFT$(readable_e$, 1) <> CHR$(34) THEN
                                temp1$ = _TRIM$(Evaluate_Expression$(readable_e$))
                                IF LEFT$(temp1$, 5) <> "ERROR" AND e$ <> temp1$ THEN
                                    e$ = lineformat(temp1$) 'retrieve parseable format
                                ELSE
                                    IF temp1$ = "ERROR - Division By Zero" THEN a$ = temp1$: GOTO errmes
                                    IF INSTR(temp1$, "Improper operations") THEN
                                        a$ = "Invalid CONST expression.14": GOTO errmes
                                    END IF
                                END IF
                            END IF

                            'Proceed as usual
                            e$ = fixoperationorder(e$)
                            IF Error_Happened THEN GOTO errmes

                            e$ = evaluateconst(e$, t)
                            IF Error_Happened THEN GOTO errmes

                            IF t AND ISSTRING THEN 'string type

                                IF typeoverride THEN
                                    IF (typeoverride AND ISSTRING) = 0 THEN a$ = "Type mismatch": GOTO errmes
                                END IF

                            ELSE 'not a string type

                                IF typeoverride THEN
                                    IF typeoverride AND ISSTRING THEN a$ = "Type mismatch": GOTO errmes
                                END IF

                                IF t AND ISFLOAT THEN
                                    constval## = _CV(_FLOAT, e$)
                                    constval&& = constval##
                                    constval~&& = constval&&
                                ELSE
                                    IF (t AND ISUNSIGNED) AND (t AND 511) = 64 THEN
                                        constval~&& = _CV(_UNSIGNED _INTEGER64, e$)
                                        constval&& = constval~&&
                                        constval## = constval&&
                                    ELSE
                                        constval&& = _CV(_INTEGER64, e$)
                                        constval## = constval&&
                                        constval~&& = constval&&
                                    END IF
                                END IF

                                'override type?
                                IF typeoverride THEN
                                    'range check required here (noted in todo)
                                    t = typeoverride
                                END IF

                            END IF 'not a string type

                            constlast = constlast + 1
                            IF constlast > constmax THEN
                                constmax = constmax * 2
                                REDIM _PRESERVE constname(constmax) AS STRING
                                REDIM _PRESERVE constcname(constmax) AS STRING
                                REDIM _PRESERVE constnamesymbol(constmax) AS STRING 'optional name symbol
                                REDIM _PRESERVE consttype(constmax) AS LONG 'variable type number
                                REDIM _PRESERVE constinteger(constmax) AS _INTEGER64
                                REDIM _PRESERVE constuinteger(constmax) AS _UNSIGNED _INTEGER64
                                REDIM _PRESERVE constfloat(constmax) AS _FLOAT
                                REDIM _PRESERVE conststring(constmax) AS STRING
                                REDIM _PRESERVE constsubfunc(constmax) AS LONG
                                REDIM _PRESERVE constdefined(constmax) AS LONG
                            END IF

                            i2 = constlast

                            constsubfunc(i2) = subfuncn
                            'IF subfunc = "" THEN constlastshared = i2

                            IF validname(n$) = 0 THEN a$ = "Invalid name": GOTO errmes
                            constname(i2) = UCASE$(n$)

                            hashname$ = n$
                            'check for name conflicts (any similar: reserved, sub, function, constant)

                            allow = 0
                            const_recheck:
                            hashchkflags = HASHFLAG_RESERVED + HASHFLAG_SUB + HASHFLAG_FUNCTION + HASHFLAG_CONSTANT
                            hashres = HashFind(hashname$, hashchkflags, hashresflags, hashresref)
                            DO WHILE hashres
                                IF hashresflags AND HASHFLAG_CONSTANT THEN
                                    IF constsubfunc(hashresref) = subfuncn THEN
                                        'If merely redefining a CONST with same value
                                        'just issue a warning instead of an error
                                        issueWarning = 0
                                        IF t AND ISSTRING THEN
                                            IF conststring(hashresref) = e$ THEN issueWarning = -1: thisconstval$ = e$
                                        ELSE
                                            IF t AND ISFLOAT THEN
                                                IF constfloat(hashresref) = constval## THEN issueWarning = -1: thisconstval$ = STR$(constval##)
                                            ELSE
                                                IF t AND ISUNSIGNED THEN
                                                    IF constuinteger(hashresref) = constval~&& THEN issueWarning = -1: thisconstval$ = STR$(constval~&&)
                                                ELSE
                                                    IF constinteger(hashresref) = constval&& THEN issueWarning = -1: thisconstval$ = STR$(constval&&)
                                                END IF
                                            END IF
                                        END IF
                                        IF issueWarning THEN
                                            IF NOT IgnoreWarnings THEN
                                                addWarning linenumber, inclevel, inclinenumber(inclevel), incname$(inclevel), "duplicate constant definition", n$ + " =" + thisconstval$
                                            END IF
                                            GOTO constAddDone
                                        ELSE
                                            a$ = "Name already in use (" + hashname$ + ")": GOTO errmes
                                        END IF
                                    END IF
                                END IF
                                IF hashresflags AND HASHFLAG_RESERVED THEN
                                    a$ = "Name already in use (" + hashname$ + ")": GOTO errmes
                                END IF
                                IF hashresflags AND (HASHFLAG_SUB + HASHFLAG_FUNCTION) THEN
                                    IF ids(hashresref).internal_subfunc = 0 OR RTRIM$(ids(hashresref).musthave) <> "$" THEN a$ = "Name already in use (" + hashname$ + ")": GOTO errmes
                                    IF t AND ISSTRING THEN a$ = "Name already in use (" + hashname$ + ")": GOTO errmes
                                END IF
                                IF hashres <> 1 THEN hashres = HashFindCont(hashresflags, hashresref) ELSE hashres = 0
                            LOOP

                            'add to hash table
                            HashAdd hashname$, HASHFLAG_CONSTANT, i2





                            constdefined(i2) = 1
                            constcname(i2) = n$
                            constnamesymbol(i2) = typevalue2symbol$(t)
                            IF Error_Happened THEN GOTO errmes
                            consttype(i2) = t
                            IF t AND ISSTRING THEN
                                conststring(i2) = e$
                            ELSE
                                IF t AND ISFLOAT THEN
                                    constfloat(i2) = constval##
                                ELSE
                                    IF t AND ISUNSIGNED THEN
                                        constuinteger(i2) = constval~&&
                                    ELSE
                                        constinteger(i2) = constval&&
                                    END IF
                                END IF
                            END IF

                            constAddDone:

                            IF pending THEN
                                'l$ = l$ + sp2 + ","
                                GOTO constdefpendingpp
                            END IF

                            'layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                            GOTO finishedlinepp
                        END IF



                        'DEFINE
                        d = 0
                        IF firstelement$ = "DEFINT" THEN d = 1
                        IF firstelement$ = "DEFLNG" THEN d = 1
                        IF firstelement$ = "DEFSNG" THEN d = 1
                        IF firstelement$ = "DEFDBL" THEN d = 1
                        IF firstelement$ = "DEFSTR" THEN d = 1
                        IF firstelement$ = "_DEFINE" OR (firstelement$ = "DEFINE" AND qb64prefix_set = 1) THEN d = 1
                        IF d THEN
                            predefining = 1: GOTO predefine
                            predefined: predefining = 0
                            GOTO finishedlinepp
                        END IF

                        'declare library
                        IF firstelement$ = "DECLARE" THEN
                            IF secondelement$ = "LIBRARY" OR secondelement$ = "DYNAMIC" OR secondelement$ = "CUSTOMTYPE" OR secondelement$ = "STATIC" THEN
                                declaringlibrary = 1
                                indirectlibrary = 0
                                IF secondelement$ = "CUSTOMTYPE" OR secondelement$ = "DYNAMIC" THEN indirectlibrary = 1
                                GOTO finishedlinepp
                            END IF
                        END IF

                        'SUB/FUNCTION
                        dynamiclibrary = 0
                        declaresubfunc:
                        firstelement$ = getelement$(a$, 1)
                        sf = 0
                        IF firstelement$ = "FUNCTION" THEN sf = 1
                        IF firstelement$ = "SUB" THEN sf = 2
                        IF sf THEN

                            subfuncn = subfuncn + 1
                            closedsubfunc = 0

                            IF n = 1 THEN a$ = "Expected name after SUB/FUNCTION": GOTO errmes

                            'convert periods to _046_
                            i2 = INSTR(a$, sp + "." + sp)
                            IF i2 THEN
                                DO
                                    a$ = LEFT$(a$, i2 - 1) + fix046$ + RIGHT$(a$, LEN(a$) - i2 - 2)
                                    ca$ = LEFT$(ca$, i2 - 1) + fix046$ + RIGHT$(ca$, LEN(ca$) - i2 - 2)
                                    i2 = INSTR(a$, sp + "." + sp)
                                LOOP UNTIL i2 = 0
                                n = numelements(a$)
                                firstelement$ = getelement(a$, 1): secondelement$ = getelement(a$, 2): thirdelement$ = getelement(a$, 3)
                            END IF

                            n$ = getelement$(ca$, 2)
                            symbol$ = removesymbol$(n$)
                            IF Error_Happened THEN GOTO errmes
                            IF sf = 2 AND symbol$ <> "" THEN a$ = "Type symbols after a SUB name are invalid": GOTO errmes

                            'remove STATIC (which is ignored)
                            e$ = getelement$(a$, n): IF e$ = "STATIC" THEN a$ = LEFT$(a$, LEN(a$) - 7): ca$ = LEFT$(ca$, LEN(ca$) - 7): n = n - 1

                            'check for ALIAS
                            aliasname$ = n$ 'use given name by default
                            IF n > 2 THEN
                                e$ = getelement$(a$, 3)
                                IF e$ = "ALIAS" THEN
                                    IF declaringlibrary = 0 THEN a$ = "ALIAS can only be used with DECLARE LIBRARY": GOTO errmes
                                    IF n = 3 THEN a$ = "Expected ALIAS name-in-library": GOTO errmes
                                    e$ = getelement$(ca$, 4)
                                    'strip string content (optional)
                                    IF LEFT$(e$, 1) = CHR$(34) THEN
                                        e$ = RIGHT$(e$, LEN(e$) - 1)
                                        x = INSTR(e$, CHR$(34)): IF x = 0 THEN a$ = "Expected " + CHR$(34): GOTO errmes
                                        e$ = LEFT$(e$, x - 1)
                                    END IF
                                    'strip fix046$ (created by unquoted periods)
                                    DO WHILE INSTR(e$, fix046$)
                                        x = INSTR(e$, fix046$): e$ = LEFT$(e$, x - 1) + "." + RIGHT$(e$, LEN(e$) - x + 1 - LEN(fix046$))
                                    LOOP
                                    'validate alias name
                                    IF LEN(e$) = 0 THEN a$ = "Expected ALIAS name-in-library": GOTO errmes
                                    FOR x = 1 TO LEN(e$)
                                        a = ASC(e$, x)
                                        IF alphanumeric(a) = 0 AND a <> ASC_FULLSTOP AND a <> ASC_COLON THEN a$ = "Expected ALIAS name-in-library": GOTO errmes
                                    NEXT
                                    aliasname$ = e$
                                    'remove ALIAS section from line
                                    IF n <= 4 THEN a$ = getelements(a$, 1, 2)
                                    IF n >= 5 THEN a$ = getelements(a$, 1, 2) + sp + getelements(a$, 5, n)
                                    IF n <= 4 THEN ca$ = getelements(ca$, 1, 2)
                                    IF n >= 5 THEN ca$ = getelements(ca$, 1, 2) + sp + getelements(ca$, 5, n)
                                    n = n - 2
                                END IF
                            END IF

                            IF declaringlibrary THEN
                                IF indirectlibrary THEN
                                    aliasname$ = n$ 'override the alias name
                                END IF
                            END IF

                            params = 0
                            params$ = ""
                            paramsize$ = ""
                            nele$ = ""
                            nelereq$ = ""
                            IF n > 2 THEN
                                e$ = getelement$(a$, 3)
                                IF e$ <> "(" THEN a$ = "Expected (": GOTO errmes
                                e$ = getelement$(a$, n)
                                IF e$ <> ")" THEN a$ = "Expected )": GOTO errmes
                                IF n < 4 THEN a$ = "Expected ( ... )": GOTO errmes
                                IF n = 4 THEN GOTO nosfparams
                                B = 0
                                a2$ = ""
                                FOR i = 4 TO n - 1
                                    e$ = getelement$(a$, i)
                                    IF e$ = "(" THEN B = B + 1
                                    IF e$ = ")" THEN B = B - 1
                                    IF e$ = "," AND B = 0 THEN
                                        IF i = n - 1 THEN a$ = "Expected , ... )": GOTO errmes
                                        getlastparam:
                                        IF a2$ = "" THEN a$ = "Expected ... ,": GOTO errmes
                                        a2$ = LEFT$(a2$, LEN(a2$) - 1)
                                        'possible format: [BYVAL]a[%][(1)][AS][type]
                                        n2 = numelements(a2$)
                                        array = 0
                                        t2$ = ""

                                        i2 = 1
                                        e$ = getelement$(a2$, i2): i2 = i2 + 1

                                        byvalue = 0
                                        IF e$ = "BYVAL" THEN
                                            IF declaringlibrary = 0 THEN a$ = "BYVAL can currently only be used with DECLARE LIBRARY": GOTO errmes
                                            e$ = getelement$(a2$, i2): i2 = i2 + 1: byvalue = 1
                                        END IF

                                        n2$ = e$
                                        symbol2$ = removesymbol$(n2$)
                                        IF validname(n2$) = 0 THEN a$ = "Invalid name": GOTO errmes

                                        IF Error_Happened THEN GOTO errmes
                                        m = 0
                                        FOR i2 = i2 TO n2
                                            e$ = getelement$(a2$, i2)
                                            IF e$ = "(" THEN
                                                IF m <> 0 THEN a$ = "Syntax error - too many opening brackets": GOTO errmes
                                                m = 1
                                                array = 1
                                                GOTO gotaa
                                            END IF
                                            IF e$ = ")" THEN
                                                IF m <> 1 THEN a$ = "Syntax error - closing bracket without opening bracket": GOTO errmes
                                                m = 2
                                                GOTO gotaa
                                            END IF
                                            IF e$ = "AS" THEN
                                                IF m <> 0 AND m <> 2 THEN a$ = "Syntax error - check your brackets": GOTO errmes
                                                m = 3
                                                GOTO gotaa
                                            END IF
                                            IF m = 1 THEN GOTO gotaa 'ignore contents of bracket
                                            IF m <> 3 THEN a$ = "Syntax error - check your brackets": GOTO errmes
                                            IF t2$ = "" THEN t2$ = e$ ELSE t2$ = t2$ + " " + e$
                                            gotaa:
                                        NEXT i2

                                        params = params + 1: IF params > 100 THEN a$ = "SUB/FUNCTION exceeds 100 parameter limit": GOTO errmes

                                        argnelereq = 0

                                        IF symbol2$ <> "" AND t2$ <> "" THEN a$ = "Syntax error - check parameter types": GOTO errmes
                                        IF t2$ = "" AND e$ = "AS" THEN a$ = "Expected AS type": GOTO errmes
                                        IF t2$ = "" THEN t2$ = symbol2$
                                        IF t2$ = "" THEN
                                            IF LEFT$(n2$, 1) = "_" THEN v = 27 ELSE v = ASC(UCASE$(n2$)) - 64
                                            t2$ = defineaz(v)
                                        END IF

                                        paramsize = 0
                                        IF array = 1 THEN
                                            t = typname2typ(t2$)
                                            IF Error_Happened THEN GOTO errmes
                                            IF t = 0 THEN a$ = "Illegal SUB/FUNCTION parameter": GOTO errmes
                                            IF (t AND ISFIXEDLENGTH) THEN paramsize = typname2typsize
                                            t = t + ISARRAY
                                            'check for recompilation override
                                            FOR i10 = 0 TO sflistn
                                                IF sfidlist(i10) = idn + 1 THEN
                                                    IF sfarglist(i10) = params THEN
                                                        argnelereq = sfelelist(i10)
                                                    END IF
                                                END IF
                                            NEXT
                                        ELSE
                                            t = typname2typ(t2$)
                                            IF Error_Happened THEN GOTO errmes
                                            IF t = 0 THEN a$ = "Illegal SUB/FUNCTION parameter": GOTO errmes
                                            IF (t AND ISFIXEDLENGTH) THEN paramsize = typname2typsize

                                            IF byvalue THEN
                                                IF t AND ISPOINTER THEN t = t - ISPOINTER
                                            END IF

                                        END IF
                                        nelereq$ = nelereq$ + CHR$(argnelereq)

                                        'consider changing 0 in following line too!
                                        nele$ = nele$ + CHR$(0)

                                        paramsize$ = paramsize$ + MKL$(paramsize)
                                        params$ = params$ + MKL$(t)
                                        a2$ = ""
                                    ELSE
                                        a2$ = a2$ + e$ + sp
                                        IF i = n - 1 THEN GOTO getlastparam
                                    END IF
                                NEXT i
                            END IF 'n>2
                            nosfparams:

                            IF sf = 1 THEN
                                'function
                                clearid
                                id.n = n$
                                id.subfunc = 1

                                id.callname = "FUNC_" + UCASE$(n$)
                                IF declaringlibrary THEN
                                    id.ccall = 1
                                    IF indirectlibrary = 0 THEN id.callname = aliasname$
                                END IF
                                id.args = params
                                id.arg = params$
                                id.argsize = paramsize$
                                id.nele = nele$
                                id.nelereq = nelereq$
                                IF symbol$ <> "" THEN
                                    id.ret = typname2typ(symbol$)
                                    IF Error_Happened THEN GOTO errmes
                                ELSE
                                    IF LEFT$(n$, 1) = "_" THEN v = 27 ELSE v = ASC(UCASE$(n$)) - 64
                                    symbol$ = defineaz(v)
                                    id.ret = typname2typ(symbol$)
                                    IF Error_Happened THEN GOTO errmes
                                END IF
                                IF id.ret = 0 THEN a$ = "Invalid FUNCTION return type": GOTO errmes

                                IF declaringlibrary THEN

                                    ctype$ = typ2ctyp$(id.ret, "")
                                    IF Error_Happened THEN GOTO errmes
                                    IF ctype$ = "qbs" THEN ctype$ = "char*"
                                    id.callname = "(  " + ctype$ + "  )" + RTRIM$(id.callname)

                                END IF

                                s$ = LEFT$(symbol$, 1)
                                IF s$ <> "~" AND s$ <> "`" AND s$ <> "%" AND s$ <> "&" AND s$ <> "!" AND s$ <> "#" AND s$ <> "$" THEN
                                    symbol$ = type2symbol$(symbol$)
                                    IF Error_Happened THEN GOTO errmes
                                END IF
                                id.mayhave = symbol$
                                IF id.ret AND ISPOINTER THEN
                                    IF (id.ret AND ISSTRING) = 0 THEN id.ret = id.ret - ISPOINTER
                                END IF
                                regid
                                IF Error_Happened THEN GOTO errmes
                            ELSE
                                'sub
                                clearid
                                id.n = n$
                                id.subfunc = 2
                                id.callname = "SUB_" + UCASE$(n$)
                                IF declaringlibrary THEN
                                    id.ccall = 1
                                    IF indirectlibrary = 0 THEN id.callname = aliasname$
                                END IF
                                id.args = params
                                id.arg = params$
                                id.argsize = paramsize$
                                id.nele = nele$
                                id.nelereq = nelereq$

                                IF UCASE$(n$) = "_GL" AND params = 0 AND UseGL = 0 THEN reginternalsubfunc = 1: UseGL = 1: id.n = "_GL": DEPENDENCY(DEPENDENCY_GL) = 1
                                regid
                                reginternalsubfunc = 0

                                IF Error_Happened THEN GOTO errmes
                            END IF


                        END IF

                        '========================================
                        finishedlinepp:
                        firstLine = 0
                    END IF
                    a$ = ""
                    ca$ = ""
                ELSE
                    IF a$ = "" THEN a$ = e$: ca$ = ce$ ELSE a$ = a$ + sp + e$: ca$ = ca$ + sp + ce$
                END IF
                IF wholelinei <= wholelinen THEN wholelinei = wholelinei + 1: GOTO ppblda
                '----------------------------------------
            END IF 'wholelinei<=wholelinen
        END IF 'wholelinen
    END IF 'len(wholeline$)

    'Include Manager #1



    IF LEN(addmetainclude$) THEN
        IF Debug THEN PRINT #9, "Pre-pass:INCLUDE$-ing file:'" + addmetainclude$ + "':On line"; linenumber
        a$ = addmetainclude$: addmetainclude$ = "" 'read/clear message

        IF inclevel = 0 THEN
            includingFromRoot = 0
            forceIncludingFile = 0
            forceInclude_prepass:
            IF forceIncludeFromRoot$ <> "" THEN
                a$ = forceIncludeFromRoot$
                forceIncludeFromRoot$ = ""
                forceIncludingFile = 1
                includingFromRoot = 1
            END IF
        END IF

        IF inclevel = 100 THEN a$ = "Too many indwelling INCLUDE files": GOTO errmes
        '1. Verify file exists (location is either (a)relative to source file or (b)absolute)
        fh = 99 + inclevel + 1

        firstTryMethod = 1
        IF includingFromRoot <> 0 AND inclevel = 0 THEN firstTryMethod = 2
        FOR try = firstTryMethod TO 2 'if including file from root, do not attempt including from relative location
            IF try = 1 THEN
                IF inclevel = 0 THEN
                    IF idemode THEN p$ = idepath$ + pathsep$ ELSE p$ = getfilepath$(sourcefile$)
                ELSE
                    p$ = getfilepath$(incname(inclevel))
                END IF
                f$ = p$ + a$
            END IF
            IF try = 2 THEN f$ = a$
            IF _FILEEXISTS(f$) THEN
                qberrorhappened = -3
                'We're using the faster LINE INPUT, which requires a BINARY open.
                OPEN f$ FOR BINARY AS #fh
                'And another line below edited
                qberrorhappened3:
                IF qberrorhappened = -3 THEN EXIT FOR
            END IF
            qberrorhappened = 0
        NEXT
        IF qberrorhappened <> -3 THEN qberrorhappened = 0: a$ = "File " + a$ + " not found": GOTO errmes
        inclevel = inclevel + 1: incname$(inclevel) = f$: inclinenumber(inclevel) = 0
    END IF 'fall through to next section...
    '--------------------
    DO WHILE inclevel

        fh = 99 + inclevel
        '2. Feed next line
        IF EOF(fh) = 0 THEN
            LINE INPUT #fh, x$

            wholeline$ = x$
            inclinenumber(inclevel) = inclinenumber(inclevel) + 1
            'create extended error string 'incerror$'
            errorLineInInclude = inclinenumber(inclevel)
            e$ = " in line " + str2(inclinenumber(inclevel)) + " of " + incname$(inclevel) + " included"
            IF inclevel > 1 THEN
                e$ = e$ + " (through "
                FOR x = 1 TO inclevel - 1 STEP 1
                    e$ = e$ + incname$(x)
                    IF x < inclevel - 1 THEN 'a sep is req
                        IF x = inclevel - 2 THEN
                            e$ = e$ + " then "
                        ELSE
                            e$ = e$ + ", "
                        END IF
                    END IF
                NEXT
                e$ = e$ + ")"
            END IF
            incerror$ = e$
            linenumber = linenumber - 1 'lower official linenumber to counter later increment

            IF Debug THEN PRINT #9, "Pre-pass:Feeding INCLUDE$ line:[" + wholeline$ + "]"

            IF idemode THEN sendc$ = CHR$(10) + wholeline$: GOTO sendcommand 'passback
            GOTO ideprepass
        END IF
        '3. Close & return control
        CLOSE #fh
        inclevel = inclevel - 1
        IF forceIncludingFile = 1 AND inclevel = 0 THEN
            forceIncludingFile = 0
            GOTO forceIncludeCompleted_prepass
        END IF
    LOOP
    '(end manager)

    IF idemode THEN GOTO ideret2
LOOP

'add final line
IF lastLineReturn = 0 THEN
    lastLineReturn = 1
    lastLine = 1
    wholeline$ = ""
    GOTO prepassLastLine
END IF

IF definingtype THEN definingtype = 0 'ignore this error so that auto-formatting can be performed and catch it again later
IF declaringlibrary THEN declaringlibrary = 0 'ignore this error so that auto-formatting can be performed and catch it again later

totallinenumber = reallinenumber

'IF idemode = 0 AND NOT QuietMode THEN PRINT "first pass finished.": PRINT "Translating code... "

'prepass finished

lineinput3index = 1 'reset input line

'ide specific
ide3:

addmetainclude$ = "" 'reset stray meta-includes

'reset altered variables
DataOffset = 0
inclevel = 0
subfuncn = 0
lastLineReturn = 0
lastLine = 0
firstLine = 1
UserDefineCount = 7

FOR i = 0 TO constlast: constdefined(i) = 0: NEXT 'undefine constants

FOR i = 1 TO 27: defineaz(i) = "SINGLE": defineextaz(i) = "!": NEXT

DIM SHARED DataBinBuf: DataBinBuf = OpenBuffer%("O", tmpdir$ + "data.bin")

DIM SHARED MainTxtBuf: MainTxtBuf = OpenBuffer%("O", tmpdir$ + "main.txt")
DIM SHARED DataTxtBuf: DataTxtBuf = OpenBuffer%("O", tmpdir$ + "maindata.txt")

DIM SHARED RegTxtBuf: RegTxtBuf = OpenBuffer%("O", tmpdir$ + "regsf.txt")

DIM SHARED FreeTxtBuf: FreeTxtBuf = OpenBuffer%("O", tmpdir$ + "mainfree.txt")
DIM SHARED RunTxtBuf: RunTxtBuf = OpenBuffer%("O", tmpdir$ + "runline.txt")

DIM SHARED ErrTxtBuf: ErrTxtBuf = OpenBuffer%("O", tmpdir$ + "mainerr.txt")
'i. check the value of error_line
'ii. jump to the appropriate label
errorlabels = 0
WriteBufLine ErrTxtBuf, "if (error_occurred){ error_occurred=0;"

DIM SHARED ChainTxtBuf: ChainTxtBuf = OpenBuffer%("O", tmpdir$ + "chain.txt")
DIM SHARED InpChainTxtBuf: InpChainTxtBuf = OpenBuffer%("O", tmpdir$ + "inpchain.txt")

DIM SHARED TimeTxtBuf: TimeTxtBuf = OpenBuffer%("O", tmpdir$ + "ontimer.txt")
DIM SHARED TimejTxtBuf: TimejTxtBuf = OpenBuffer%("O", tmpdir$ + "ontimerj.txt")

'*****#26 used for locking qb64pe

DIM SHARED KeyTxtBuf: KeyTxtBuf = OpenBuffer%("O", tmpdir$ + "onkey.txt")
DIM SHARED KeyjTxtBuf: KeyjTxtBuf = OpenBuffer%("O", tmpdir$ + "onkeyj.txt")

DIM SHARED StrigTxtBuf: StrigTxtBuf = OpenBuffer%("O", tmpdir$ + "onstrig.txt")
DIM SHARED StrigjTxtBuf: StrigjTxtBuf = OpenBuffer%("O", tmpdir$ + "onstrigj.txt")

gosubid = 1
'to be included whenever return without a label is called

'return [label] in QBASIC was not possible in a sub/function, but QB64 will support this
'special codes will represent special return conditions:
'0=return from main to calling sub/function/proc by return [NULL];
'1... a global number representing a return point after a gosub
'note: RETURN [label] should fail if a "return [NULL];" type return is required
DIM SHARED RetTxtBuf: RetTxtBuf = OpenBuffer%("O", tmpdir$ + "ret0.txt")
WriteBufLine RetTxtBuf, "if (next_return_point){"
WriteBufLine RetTxtBuf, "next_return_point--;"
WriteBufLine RetTxtBuf, "switch(return_point[next_return_point]){"
WriteBufLine RetTxtBuf, "case 0:"

WriteBufLine RetTxtBuf, "return;"

WriteBufLine RetTxtBuf, "break;"

continueline = 0
endifs = 0
lineelseused = 0
continuelinefrom = 0
linenumber = 0
reallinenumber = 0
declaringlibrary = 0

WriteBufLine MainTxtBuf, "S_0:;" 'note: REQUIRED by run statement

IF UseGL THEN gl_include_content


'ide specific
IF idemode THEN GOTO ideret3

DO
    ide4:
    includeline:
    mainpassLastLine:

    IF lastLine <> 0 OR firstLine <> 0 THEN
        lineBackup$ = a3$ 'backup the real first line (will be blank when lastline is set)
        forceIncludeFromRoot$ = ""
        IF vWatchOn THEN
            addingvWatch = 1
            IF firstLine <> 0 THEN forceIncludeFromRoot$ = "internal\support\vwatch\vwatch.bi"
            IF lastLine <> 0 THEN forceIncludeFromRoot$ = "internal\support\vwatch\vwatch.bm"
        ELSE
            'IF firstLine <> 0 THEN forceIncludeFromRoot$ = "internal\support\vwatch\vwatch_stub.bi"
            IF lastLine <> 0 THEN forceIncludeFromRoot$ = "internal\support\vwatch\vwatch_stub.bm"
        END IF
        firstLine = 0: lastLine = 0
        IF LEN(forceIncludeFromRoot$) THEN GOTO forceInclude
        forceIncludeCompleted:
        addingvWatch = 0
        a3$ = lineBackup$
    END IF

    prepass = 0

    stringprocessinghappened = 0

    IF continuelinefrom THEN
        start = continuelinefrom
        continuelinefrom = 0
        GOTO contline
    END IF

    'begin a new line

    impliedendif = 0
    THENGOTO = 0
    continueline = 0
    endifs = 0
    lineelseused = 0
    newif = 0

    'apply metacommands from previous line
    IF addmetadynamic = 1 THEN addmetadynamic = 0: DynamicMode = 1
    IF addmetastatic = 1 THEN addmetastatic = 0: DynamicMode = 0

    'a3$ is passed in idemode and when using $include
    IF idemode = 0 AND inclevel = 0 THEN a3$ = lineinput3$
    IF a3$ = CHR$(13) THEN EXIT DO
    linenumber = linenumber + 1
    reallinenumber = reallinenumber + 1

    IF InValidLine(linenumber) THEN
        layoutok = 1
        layout$ = SPACE$(controllevel + 1) + LTRIM$(RTRIM$(a3$))
        IF idemode GOTO ideret4 ELSE GOTO skipide4
    END IF

    layout = ""
    layoutok = 1

    IF idemode = 0 AND NOT QuietMode THEN
        'IF LEN(a3$) THEN
        '    dotlinecount = dotlinecount + 1: IF dotlinecount >= 100 THEN dotlinecount = 0: PRINT ".";
        'END IF
        maxprogresswidth = 50 'arbitrary
        percentage = INT(reallinenumber / totallinenumber * 100)
        percentagechars = INT(maxprogresswidth * reallinenumber / totallinenumber)
        IF percentage <> prevpercentage AND percentagechars <> prevpercentagechars THEN
            prevpercentage = percentage
            prevpercentagechars = percentagechars
            IF ConsoleMode THEN
                PRINT "[" + STRING$(percentagechars, ".") + SPACE$(maxprogresswidth - percentagechars) + "]" + STR$(percentage) + "%";
                IF os$ = "LNX" THEN
                    PRINT CHR$(27) + "[A"
                ELSE
                    PRINT CHR$(13);
                END IF
            ELSE
                LOCATE , 1
                PRINT STRING$(percentagechars, 219) + STRING$(maxprogresswidth - percentagechars, 176) + STR$(percentage) + "%";
            END IF
        END IF
    END IF

    a3$ = LTRIM$(RTRIM$(a3$))
    wholeline = a3$

    layoutoriginal$ = a3$
    layoutcomment$ = "" 'clear any previous layout comment
    lhscontrollevel = controllevel

    linefragment = "[INFORMATION UNAVAILABLE]"
    IF LEN(a3$) = 0 THEN GOTO finishednonexec
    IF Debug THEN PRINT #9, "########" + a3$ + "########"

    layoutdone = 1 'validates layout of any following goto finishednonexec/finishedline

    'We've already figured out in the prepass which lines are invalidated by the precompiler
    'No need to go over those lines again.
    'IF InValidLine(linenumber) THEN goto skipide4 'layoutdone = 0: GOTO finishednonexec

    a3u$ = UCASE$(a3$)

    'QB64 Metacommands
    IF ASC(a3$) = 36 THEN '$

        'precompiler commands should always be executed FIRST.
        IF a3u$ = "$END IF" OR a3u$ = "$ENDIF" THEN
            IF DefineElse(ExecCounter) = 0 THEN a$ = "$END IF without $IF": GOTO errmes
            DefineElse(ExecCounter) = 0 'We no longer have an $IF block at this level
            ExecCounter = ExecCounter - 1
            layout$ = SCase$("$End If")
            controltype(controllevel) = 0
            controllevel = controllevel - 1
            GOTO finishednonexec
        END IF

        IF LEFT$(a3u$, 4) = "$IF " THEN
            'prevents code from being placed before 'CASE condition' in a SELECT CASE block
            IF SelectCaseCounter > 0 AND SelectCaseHasCaseBlock(SelectCaseCounter) = 0 THEN
                a$ = "Expected CASE expression": GOTO errmes
            END IF

            temp$ = LTRIM$(MID$(a3u$, 4)) 'strip off the $IF and extra spaces
            temp$ = RTRIM$(LEFT$(temp$, LEN(temp$) - 4)) 'and strip off the THEN and extra spaces
            temp = 0
            IF temp = 0 THEN tempOp$ = "<=": temp = INSTR(temp$, tempOp$)
            IF temp = 0 THEN tempOp$ = "=<": temp = INSTR(temp$, tempOp$): tempOp$ = "<="
            IF temp = 0 THEN tempOp$ = ">=": temp = INSTR(temp$, tempOp$)
            IF temp = 0 THEN tempOp$ = "=>": temp = INSTR(temp$, tempOp$): tempOp$ = ">="
            IF temp = 0 THEN tempOp$ = "<>": temp = INSTR(temp$, tempOp$)
            IF temp = 0 THEN tempOp$ = "><": temp = INSTR(temp$, tempOp$): tempOp$ = "<>"
            IF temp = 0 THEN tempOp$ = "=": temp = INSTR(temp$, tempOp$)
            IF temp = 0 THEN tempOp$ = ">": temp = INSTR(temp$, tempOp$)
            IF temp = 0 THEN tempOp$ = "<": temp = INSTR(temp$, tempOp$)

            ExecCounter = ExecCounter + 1
            ExecLevel(ExecCounter) = -1 'default to a skip value
            DefineElse(ExecCounter) = 1 '1 says we have an $IF statement at this level
            result = EvalPreIF(temp$, a$)
            IF a$ <> "" THEN GOTO errmes
            IF result <> 0 THEN
                ExecLevel(ExecCounter) = ExecLevel(ExecCounter - 1) 'So we inherit the execlevel from above
                IF ExecLevel(ExecCounter) = 0 THEN DefineElse(ExecCounter) = DefineElse(ExecCounter) OR 4 'Else if used and conditon found
            END IF

            controllevel = controllevel + 1
            controltype(controllevel) = 6
            IF temp = 0 THEN layout$ = SCase$("$If ") + temp$ + SCase$(" Then"): GOTO finishednonexec 'no = sign in the $IF statement, so we're going to assume the user is doing something like $IF flag
            l$ = RTRIM$(LEFT$(temp$, temp - 1)): r$ = LTRIM$(MID$(temp$, temp + LEN(tempOp$)))
            layout$ = SCase$("$If ") + l$ + " " + tempOp$ + " " + r$ + SCase$(" Then")
            GOTO finishednonexec
        END IF

        IF a3u$ = "$ELSE" THEN
            IF DefineElse(ExecCounter) = 0 THEN a$ = "$ELSE without $IF": GOTO errmes
            IF DefineElse(ExecCounter) AND 2 THEN a$ = "$IF block already has $ELSE statement in it": GOTO errmes
            DefineElse(ExecCounter) = DefineElse(ExecCounter) OR 2 'set the flag to declare an $ELSE already in this block
            IF DefineElse(ExecCounter) AND 4 THEN 'If we executed code in a previous IF or ELSE IF statement, we can't do it here
                ExecLevel(ExecCounter) = -1 'So we inherit the execlevel from above
            ELSE
                ExecLevel(ExecCounter) = ExecLevel(ExecCounter - 1) 'If we were processing code before, code after this segment is going to be SKIPPED
            END IF
            layout$ = SCase$("$Else")
            lhscontrollevel = lhscontrollevel - 1
            GOTO finishednonexec
        END IF

        IF LEFT$(a3u$, 5) = "$ELSE" THEN
            temp$ = LTRIM$(MID$(a3u$, 6))
            IF LEFT$(temp$, 3) = "IF " THEN
                IF DefineElse(ExecCounter) = 0 THEN a$ = "$ELSE IF without $IF": GOTO errmes
                IF DefineElse(ExecCounter) AND 2 THEN a$ = "$ELSE IF cannot follow $ELSE": GOTO errmes
                IF RIGHT$(temp$, 5) <> " THEN" THEN a$ = "$ELSE IF without THEN": GOTO errmes
                temp$ = LTRIM$(MID$(temp$, 3)) 'strip off the IF and extra spaces
                temp$ = RTRIM$(LEFT$(temp$, LEN(temp$) - 4)) 'and strip off the THEN and extra spaces
                IF DefineElse(ExecCounter) AND 4 THEN 'If we executed code in a previous IF or ELSE IF statement, we can't do it here
                    ExecLevel(ExecCounter) = -1
                ELSE
                    result = EvalPreIF(temp$, a$)
                    IF a$ <> "" THEN GOTO errmes
                    IF result <> 0 THEN
                        ExecLevel(ExecCounter) = ExecLevel(ExecCounter - 1) 'So we inherit the execlevel from above
                        IF ExecLevel(ExecCounter) = 0 THEN DefineElse(ExecCounter) = DefineElse(ExecCounter) OR 4 'Else if used and conditon found
                    END IF
                END IF


                lhscontrollevel = lhscontrollevel - 1
                temp = INSTR(temp$, "=")
                IF temp = 0 THEN layout$ = SCase$("$ElseIf ") + temp$ + SCase$(" Then"): GOTO finishednonexec 'no = sign in the $IF statement, so we're going to assume the user is doing something like $IF flag
                l$ = RTRIM$(LEFT$(temp$, temp - 1)): r$ = LTRIM$(MID$(temp$, temp + 1))
                layout$ = SCase$("$ElseIf ") + l$ + " = " + r$ + SCase$(" Then")
                GOTO finishednonexec
            END IF
        END IF

        IF ExecLevel(ExecCounter) THEN 'don't check for any more metacommands except the one's which worth with the precompiler
            layoutdone = 0
            GOTO finishednonexec 'we don't check for anything inside lines that we've marked for skipping
        END IF

        IF LEFT$(a3u$, 5) = "$LET " THEN
            temp$ = a3u$
            temp$ = LTRIM$(MID$(temp$, 5)) 'simply shorten our string to parse
            'For starters, let's make certain that we have 3 elements to deal with
            temp = INSTR(temp$, "=") 'without an = in there, we can't get a value from the left and right side
            l$ = RTRIM$(LEFT$(temp$, temp - 1)): r$ = LTRIM$(MID$(temp$, temp + 1))
            layout$ = SCase$("$Let ") + l$ + " = " + r$
            'First look to see if we have an existing setting like this and if so, update it
            FOR i = 7 TO UserDefineCount 'UserDefineCount 1-7 are reserved for automatic OS/BIT detection & version
                IF UserDefine(0, i) = l$ THEN UserDefine(1, i) = r$: GOTO finishednonexec
            NEXT
            'Otherwise create a new setting and set the initial value for it
            UserDefineCount = UserDefineCount + 1
            IF UserDefineCount > UBOUND(UserDefine, 2) THEN
                REDIM _PRESERVE UserDefine(1, UBOUND(UserDefine, 2) + 10) 'Add another 10 elements to the array so it'll expand as the user adds to it
            END IF
            UserDefine(0, UserDefineCount) = l$
            UserDefine(1, UserDefineCount) = r$
            GOTO finishednonexec
        END IF

        IF a3u$ = "$COLOR:0" THEN
            layout$ = SCase$("$Color:0")
            IF qb64prefix_set THEN
                addmetainclude$ = getfilepath$(COMMAND$(0)) + "internal" + pathsep$ + "support" + pathsep$ + "color" + pathsep$ + "color0_noprefix.bi"
            ELSE
                addmetainclude$ = getfilepath$(COMMAND$(0)) + "internal" + pathsep$ + "support" + pathsep$ + "color" + pathsep$ + "color0.bi"
            END IF
            layoutdone = 1
            GOTO finishednonexec
        END IF

        IF a3u$ = "$COLOR:32" THEN
            layout$ = SCase$("$Color:32")
            IF qb64prefix_set THEN
                addmetainclude$ = getfilepath$(COMMAND$(0)) + "internal" + pathsep$ + "support" + pathsep$ + "color" + pathsep$ + "color32_noprefix.bi"
            ELSE
                addmetainclude$ = getfilepath$(COMMAND$(0)) + "internal" + pathsep$ + "support" + pathsep$ + "color" + pathsep$ + "color32.bi"
            END IF
            layoutdone = 1
            GOTO finishednonexec
        END IF

        IF a3u$ = "$NOPREFIX" THEN
            'already set in prepass
            layout$ = SCase$("$NoPrefix")
            GOTO finishednonexec
        END IF

        IF a3u$ = "$VIRTUALKEYBOARD:ON" THEN
            'Deprecated; does nothing.
            layout$ = SCase$("$VirtualKeyboard:On")
            addWarning linenumber, inclevel, inclinenumber(inclevel), incname$(inclevel), "Deprecated feature", "$VirtualKeyboard"
            GOTO finishednonexec
        END IF

        IF a3u$ = "$VIRTUALKEYBOARD:OFF" THEN
            'Deprecated; does nothing.
            layout$ = SCase$("$VirtualKeyboard:Off")
            addWarning linenumber, inclevel, inclinenumber(inclevel), incname$(inclevel), "Deprecated feature", "$VirtualKeyboard"
            GOTO finishednonexec
        END IF

        IF a3u$ = "$DEBUG" THEN
            layout$ = SCase$("$Debug")
            IF NoIDEMode THEN
                addWarning linenumber, inclevel, inclinenumber(inclevel), incname$(inclevel), "$Debug", "$Debug features only work from the IDE"
            END IF
            GOTO finishednonexec
        END IF

        IF a3u$ = "$CHECKING:OFF" THEN
            layout$ = SCase$("$Checking:Off")
            NoChecks = 1
            IF vWatchOn <> 0 AND NoIDEMode = 0 AND inclevel = 0 THEN
                addWarning linenumber, inclevel, inclinenumber(inclevel), incname$(inclevel), "$Debug", "$Debug features won't work in $Checking:Off blocks"
            END IF
            GOTO finishednonexec
        END IF

        IF a3u$ = "$CHECKING:ON" THEN
            layout$ = SCase$("$Checking:On")
            NoChecks = 0
            GOTO finishednonexec
        END IF

        IF a3u$ = "$CONSOLE" THEN
            layout$ = SCase$("$Console")
            Console = 1
            GOTO finishednonexec
        END IF

        IF a3u$ = "$CONSOLE:ONLY" THEN
            layout$ = SCase$("$Console:Only")
            DEPENDENCY(DEPENDENCY_CONSOLE_ONLY) = DEPENDENCY(DEPENDENCY_CONSOLE_ONLY) OR 1
            Console = 1
            IF prepass = 0 THEN
                IF NoChecks = 0 THEN WriteBufLine MainTxtBuf, "do{"
                WriteBufLine MainTxtBuf, "sub__dest(func__console());"
                WriteBufLine MainTxtBuf, "sub__source(func__console());"
                GOTO finishedline2
            ELSE
                GOTO finishednonexec
            END IF
        END IF

        IF a3u$ = "$ASSERTS" THEN
            layout$ = SCase$("$Asserts")
            Asserts = 1
            GOTO finishednonexec
        END IF

        IF a3u$ = "$ASSERTS:CONSOLE" THEN
            layout$ = SCase$("$Asserts:Console")
            Asserts = 1
            Console = 1
            GOTO finishednonexec
        END IF

        IF a3u$ = "$SCREENHIDE" THEN
            layout$ = SCase$("$ScreenHide")
            ScreenHide = 1
            GOTO finishednonexec
        END IF
        IF a3u$ = "$SCREENSHOW" THEN
            layout$ = SCase$("$ScreenShow")
            ScreenHide = 0
            GOTO finishednonexec
        END IF

        IF a3u$ = "$RESIZE:OFF" THEN
            layout$ = SCase$("$Resize:Off")
            Resize = 0: Resize_Scale = 0
            GOTO finishednonexec
        END IF
        IF a3u$ = "$RESIZE:ON" THEN
            layout$ = SCase$("$Resize:On")
            Resize = 1: Resize_Scale = 0
            GOTO finishednonexec
        END IF

        IF a3u$ = "$RESIZE:STRETCH" THEN
            layout$ = SCase$("$Resize:Stretch")
            Resize = 1: Resize_Scale = 1
            GOTO finishednonexec
        END IF
        IF a3u$ = "$RESIZE:SMOOTH" THEN
            layout$ = SCase$("$Resize:Smooth")
            Resize = 1: Resize_Scale = 2
            GOTO finishednonexec
        END IF

        IF LEFT$(a3u$, 12) = "$VERSIONINFO" THEN
            'Embed version info into the final binary (Windows only)
            FirstDelimiter = INSTR(a3u$, ":")
            SecondDelimiter = INSTR(FirstDelimiter + 1, a3u$, "=")
            IF FirstDelimiter = 0 OR SecondDelimiter = 0 OR SecondDelimiter = FirstDelimiter + 1 THEN
                a$ = "Expected $VERSIONINFO:key=value": GOTO errmes
            END IF

            VersionInfoKey$ = LTRIM$(RTRIM$(MID$(a3u$, FirstDelimiter + 1, SecondDelimiter - FirstDelimiter - 1)))
            VersionInfoValue$ = StrReplace$(LTRIM$(RTRIM$(MID$(a3$, SecondDelimiter + 1))), CHR$(34), "'")

            SELECT CASE VersionInfoKey$
                CASE "FILEVERSION#"
                    GOSUB ValidateVersion
                    viFileVersionNum$ = VersionInfoValue$
                    IF viFileVersion$ = "" THEN viFileVersion$ = viFileVersionNum$
                    layout$ = SCase$("$VersionInfo:FILEVERSION#=") + VersionInfoValue$
                CASE "PRODUCTVERSION#"
                    GOSUB ValidateVersion
                    viProductVersionNum$ = VersionInfoValue$
                    IF viProductVersion$ = "" THEN viProductVersion$ = viProductVersionNum$
                    layout$ = SCase$("$VersionInfo:PRODUCTVERSION#=") + VersionInfoValue$
                CASE "COMPANYNAME"
                    viCompanyName$ = VersionInfoValue$
                    layout$ = SCase$("$VersionInfo:") + "CompanyName=" + VersionInfoValue$
                CASE "FILEDESCRIPTION"
                    viFileDescription$ = VersionInfoValue$
                    layout$ = SCase$("$VersionInfo:") + "FileDescription=" + VersionInfoValue$
                CASE "FILEVERSION"
                    viFileVersion$ = VersionInfoValue$
                    layout$ = SCase$("$VersionInfo:") + "FileVersion=" + VersionInfoValue$
                CASE "INTERNALNAME"
                    viInternalName$ = VersionInfoValue$
                    layout$ = SCase$("$VersionInfo:") + "InternalName=" + VersionInfoValue$
                CASE "LEGALCOPYRIGHT"
                    viLegalCopyright$ = VersionInfoValue$
                    layout$ = SCase$("$VersionInfo:") + "LegalCopyright=" + VersionInfoValue$
                CASE "LEGALTRADEMARKS"
                    viLegalTrademarks$ = VersionInfoValue$
                    layout$ = SCase$("$VersionInfo:") + "LegalTrademarks=" + VersionInfoValue$
                CASE "ORIGINALFILENAME"
                    viOriginalFilename$ = VersionInfoValue$
                    layout$ = SCase$("$VersionInfo:") + "OriginalFilename=" + VersionInfoValue$
                CASE "PRODUCTNAME"
                    viProductName$ = VersionInfoValue$
                    layout$ = SCase$("$VersionInfo:") + "ProductName=" + VersionInfoValue$
                CASE "PRODUCTVERSION"
                    viProductVersion$ = VersionInfoValue$
                    layout$ = SCase$("$VersionInfo:") + "ProductVersion=" + VersionInfoValue$
                CASE "COMMENTS"
                    viComments$ = VersionInfoValue$
                    layout$ = SCase$("$VersionInfo:") + "Comments=" + VersionInfoValue$
                CASE "WEB"
                    viWeb$ = VersionInfoValue$
                    layout$ = SCase$("$VersionInfo:") + "Web=" + VersionInfoValue$
                CASE ELSE
                    a$ = "Invalid key. (Use FILEVERSION#, PRODUCTVERSION#, CompanyName, FileDescription, FileVersion, InternalName, LegalCopyright, LegalTrademarks, OriginalFilename, ProductName, ProductVersion, Comments or Web)"
                    GOTO errmes
            END SELECT

            VersionInfoSet = -1

            GOTO finishednonexec

            ValidateVersion:
            'Check if only numbers and commas (4 comma-separated values)
            IF LEN(VersionInfoValue$) = 0 THEN a$ = "Expected $VERSIONINFO:" + VersionInfoKey$ + "=#,#,#,# (4 comma-separated numeric values: major, minor, revision and build)": GOTO errmes
            viCommas = 0
            FOR i = 1 TO LEN(VersionInfoValue$)
                IF ASC(VersionInfoValue$, i) = 44 THEN viCommas = viCommas + 1
                IF INSTR("0123456789,", MID$(VersionInfoValue$, i, 1)) = 0 OR (i = LEN(VersionInfoValue$) AND viCommas <> 3) OR RIGHT$(VersionInfoValue$, 1) = "," THEN
                    a$ = "Expected $VERSIONINFO:" + VersionInfoKey$ + "=#,#,#,# (4 comma-separated numeric values: major, minor, revision and build)": GOTO errmes
                END IF
            NEXT
            RETURN
        END IF

        IF LEFT$(a3u$, 8) = "$EXEICON" THEN
            'Basic syntax check. Multi-platform.
            IF ExeIconSet THEN a$ = "$EXEICON already defined": GOTO errmes
            FirstDelimiter = INSTR(a3u$, "'")
            IF FirstDelimiter = 0 THEN
                a$ = "Expected $EXEICON:'filename'": GOTO errmes
            ELSE
                SecondDelimiter = INSTR(FirstDelimiter + 1, a3u$, "'")
                IF SecondDelimiter = 0 THEN a$ = "Expected $EXEICON:'filename'": GOTO errmes
            END IF
            ExeIconFile$ = RTRIM$(LTRIM$(MID$(a3$, FirstDelimiter + 1, SecondDelimiter - FirstDelimiter - 1)))
            IF LEN(ExeIconFile$) = 0 THEN a$ = "Expected $EXEICON:'filename'": GOTO errmes
            layout$ = SCase$("$ExeIcon:'") + ExeIconFile$ + "'" + MID$(a3$, SecondDelimiter + 1)

            IconPath$ = ""
            IF LEFT$(ExeIconFile$, 2) = "./" OR LEFT$(ExeIconFile$, 2) = ".\" THEN
                'Relative to source file's folder
                IF NoIDEMode THEN
                    IconPath$ = path.source$
                    IF LEN(IconPath$) > 0 AND RIGHT$(IconPath$, 1) <> pathsep$ THEN IconPath$ = IconPath$ + pathsep$
                ELSE
                    IF LEN(ideprogname) THEN IconPath$ = idepath$ + pathsep$
                END IF

                ExeIconFile$ = IconPath$ + MID$(ExeIconFile$, 3)
            ELSEIF INSTR(ExeIconFile$, "/") OR INSTR(ExeIconFile$, "\") THEN
                FOR i = LEN(ExeIconFile$) TO 1 STEP -1
                    IF MID$(ExeIconFile$, i, 1) = "/" OR MID$(ExeIconFile$, i, 1) = "\" THEN
                        IconPath$ = LEFT$(ExeIconFile$, i)
                        ExeIconFileOnly$ = MID$(ExeIconFile$, i + 1)

                        IF _DIREXISTS(IconPath$) = 0 THEN a$ = "File '" + ExeIconFileOnly$ + "' not found": GOTO errmes

                        currentdir$ = _CWD$
                        CHDIR IconPath$
                        IconPath$ = _CWD$
                        CHDIR currentdir$

                        ExeIconFile$ = IconPath$ + pathsep$ + ExeIconFileOnly$
                        EXIT FOR
                    END IF
                NEXT
            END IF

            IF _FILEEXISTS(ExeIconFile$) = 0 THEN a$ = "File '" + ExeIconFile$ + "' not found": GOTO errmes

            ExeIconSet = linenumber
            SetDependency DEPENDENCY_ICON
            IF NoChecks = 0 THEN WriteBufLine MainTxtBuf, "do{"
            WriteBufLine MainTxtBuf, "sub__icon(NULL,NULL,0);"
            GOTO finishedline2
        END IF

        IF LEFT$(a3u$, 10) = "$UNSTABLE:" THEN
            layout$ = SCase("$Unstable:")

            token$ = LTRIM$(RTRIM$(MID$(a3u$, 11)))

            SELECT CASE token$
                CASE "MIDI"
                    layout$ = layout$ + SCase$("Midi")
            END SELECT

            GOTO finishednonexec
        END IF

        IF unstableFlags(UNSTABLE_MIDI) THEN
            IF LEFT$(a3u$, 15) = "$MIDISOUNDFONT:" THEN
                IF MidiSoundFontSet THEN
                    a$ = "$MIDISOUNDFONT already defined"
                    GOTO errmes
                END IF

                layout$ = SCase$("$MidiSoundFont:")

                MidiSoundFont$ = LTRIM$(RTRIM$(MID$(a3$, 16)))

                IF MID$(MidiSoundFont$, 1, 1) = CHR$(34) THEN
                    ' We have a quoted filename, verify it is valid

                    ' We don't touch the filename in the formatting
                    layout$ = layout$ + MidiSoundFont$

                    ' Strip the leading quote
                    MidiSoundFont$ = MID$(MidiSoundFont$, 2)

                    ' Verify that there is a quote character at the end
                    IF INSTR(MidiSoundFont$, CHR$(34)) = 0 THEN a$ = "Expected " + CHR$(34) + " character at the end of the file name": GOTO errmes

                    ' Verify there are no extra characters after end quote
                    IF INSTR(MidiSoundFont$, CHR$(34)) <> LEN(MidiSoundFont$) THEN a$ = "Unexpected characters after the quoted file name": GOTO errmes

                    MidiSoundFont$ = MID$(MidiSoundFont$, 1, LEN(MidiSoundFont$) - 1)

                    IF NOT _FILEEXISTS(MidiSoundFont$) THEN
                        a$ = "Soundfont file " + AddQuotes$(MidiSoundFont$) + " could not be found!"
                        GOTO errmes
                    END IF
                ELSE
                    ' Constant values, only one for now
                    SELECT CASE UCASE$(MidiSoundFont$)
                        CASE "DEFAULT"
                            layout$ = layout$ + SCase$("Default")

                            ' Clear MidiSoundFont$ to indicate the default should be used
                            MidiSoundFont$ = ""

                        CASE ELSE
                            a$ = "Unrecognized Soundfont option " + AddQuotes$(MidiSoundFont$)
                            GOTO errmes
                    END SELECT
                END IF

                MidiSoundFontSet = linenumber
                MidiSoundFontLine$ = layout$
                GOTO finishednonexec
            END IF
        END IF

    END IF 'QB64 Metacommands

    IF ExecLevel(ExecCounter) THEN
        layoutdone = 0
        GOTO finishednonexec 'we don't check for anything inside lines that we've marked for skipping
    END IF


    linedataoffset = DataOffset

    entireline$ = lineformat(a3$): IF LEN(entireline$) = 0 THEN GOTO finishednonexec
    IF Error_Happened THEN GOTO errmes
    u$ = UCASE$(entireline$)

    newif = 0

    'Convert "CASE ELSE" to "CASE C-EL" to avoid confusing compiler
    'note: CASE does not have to begin on a new line
    s = 1
    i = INSTR(s, u$, "CASE" + sp + "ELSE")
    DO WHILE i
        skip = 0
        IF i <> 1 THEN
            IF MID$(u$, i - 1, 1) <> sp THEN skip = 1
        END IF
        IF i <> LEN(u$) - 8 THEN
            IF MID$(u$, i + 9, 1) <> sp THEN skip = 1
        END IF
        IF skip = 0 THEN
            MID$(entireline$, i) = "CASE" + sp + "C-EL"
            u$ = UCASE$(entireline$)
        END IF
        s = i + 9
        i = INSTR(s, u$, "CASE" + sp + "ELSE")
    LOOP

    n = numelements(entireline$)

    'line number?
    a = ASC(entireline$)
    IF (a >= 48 AND a <= 57) OR a = 46 THEN 'numeric
        label$ = getelement(entireline$, 1)
        IF validlabel(label$) THEN

            IF closedmain <> 0 AND subfunc = "" THEN a$ = "Labels cannot be placed between SUB/FUNCTIONs": GOTO errmes

            v = HashFind(label$, HASHFLAG_LABEL, ignore, r)
            addlabchk100:
            IF v THEN
                s = Labels(r).Scope
                IF s = subfuncn OR s = -1 THEN 'same scope?
                    IF s = -1 THEN Labels(r).Scope = subfuncn 'acquire scope
                    IF Labels(r).State = 1 THEN a$ = "Duplicate label (" + RTRIM$(Labels(r).cn) + ")": GOTO errmes
                    'aquire state 0 types
                    tlayout$ = RTRIM$(Labels(r).cn)
                    GOTO addlabaq100
                END IF 'same scope
                IF v = 2 THEN v = HashFindCont(ignore, r): GOTO addlabchk100
            END IF

            'does not exist
            nLabels = nLabels + 1: IF nLabels > Labels_Ubound THEN Labels_Ubound = Labels_Ubound * 2: REDIM _PRESERVE Labels(1 TO Labels_Ubound) AS Label_Type
            Labels(nLabels) = Empty_Label
            HashAdd label$, HASHFLAG_LABEL, nLabels
            r = nLabels
            Labels(r).cn = tlayout$
            Labels(r).Scope = subfuncn
            addlabaq100:
            Labels(r).State = 1
            Labels(r).Data_Offset = linedataoffset

            layout$ = tlayout$
            WriteBufLine MainTxtBuf, "LABEL_" + label$ + ":;"


            IF INSTR(label$, "p") THEN MID$(label$, INSTR(label$, "p"), 1) = "."
            IF RIGHT$(label$, 1) = "d" OR RIGHT$(label$, 1) = "s" THEN label$ = LEFT$(label$, LEN(label$) - 1)
            WriteBufLine MainTxtBuf, "last_line=" + label$ + ";"
            inclinenump$ = ""
            IF inclinenumber(inclevel) THEN
                inclinenump$ = "," + str2$(inclinenumber(inclevel))
                thisincname$ = getfilepath$(incname$(inclevel))
                thisincname$ = MID$(incname$(inclevel), LEN(thisincname$) + 1)
                inclinenump$ = inclinenump$ + "," + CHR$(34) + thisincname$ + CHR$(34)
            END IF
            IF NoChecks = 0 THEN
                IF vWatchOn AND inclinenumber(inclevel) = 0 THEN temp$ = vWatchErrorCall$ ELSE temp$ = ""
                WriteBufLine MainTxtBuf, "if(qbevent){" + temp$ + "evnt(" + str2$(linenumber) + inclinenump$ + ");r=0;}"
            END IF
            IF n = 1 THEN GOTO finishednonexec
            entireline$ = getelements(entireline$, 2, n): u$ = UCASE$(entireline$): n = n - 1
            'note: fall through, numeric labels can be followed by alphanumeric label
        END IF 'validlabel
    END IF 'numeric
    'it wasn't a line number

    'label?
    'note: ignores possibility that this could be a single command SUB/FUNCTION (as in QBASIC?)
    IF n >= 2 THEN
        x2 = INSTR(entireline$, sp + ":")
        IF x2 THEN
            IF x2 = LEN(entireline$) - 1 THEN x3 = x2 + 1 ELSE x3 = x2 + 2
            a$ = LEFT$(entireline$, x2 - 1)

            CreatingLabel = 1
            IF validlabel(a$) THEN

                IF validname(a$) = 0 THEN a$ = "Invalid name": GOTO errmes

                IF closedmain <> 0 AND subfunc = "" THEN a$ = "Labels cannot be placed between SUB/FUNCTIONs": GOTO errmes

                v = HashFind(a$, HASHFLAG_LABEL, ignore, r)
                addlabchk:
                IF v THEN
                    s = Labels(r).Scope
                    IF s = subfuncn OR s = -1 THEN 'same scope?
                        IF s = -1 THEN Labels(r).Scope = subfuncn 'acquire scope
                        IF Labels(r).State = 1 THEN a$ = "Duplicate label (" + RTRIM$(Labels(r).cn) + ")": GOTO errmes
                        'aquire state 0 types
                        tlayout$ = RTRIM$(Labels(r).cn)
                        GOTO addlabaq
                    END IF 'same scope
                    IF v = 2 THEN v = HashFindCont(ignore, r): GOTO addlabchk
                END IF
                'does not exist
                nLabels = nLabels + 1: IF nLabels > Labels_Ubound THEN Labels_Ubound = Labels_Ubound * 2: REDIM _PRESERVE Labels(1 TO Labels_Ubound) AS Label_Type
                Labels(nLabels) = Empty_Label
                HashAdd a$, HASHFLAG_LABEL, nLabels
                r = nLabels
                Labels(r).cn = tlayout$
                Labels(r).Scope = subfuncn
                addlabaq:
                Labels(r).State = 1
                Labels(r).Data_Offset = linedataoffset
                Labels(r).SourceLineNumber = linenumber

                IF LEN(layout$) THEN layout$ = layout$ + sp + tlayout$ + ":" ELSE layout$ = tlayout$ + ":"

                WriteBufLine MainTxtBuf, "LABEL_" + a$ + ":;"
                inclinenump$ = ""
                IF inclinenumber(inclevel) THEN
                    inclinenump$ = "," + str2$(inclinenumber(inclevel))
                    thisincname$ = getfilepath$(incname$(inclevel))
                    thisincname$ = MID$(incname$(inclevel), LEN(thisincname$) + 1)
                    inclinenump$ = inclinenump$ + "," + CHR$(34) + thisincname$ + CHR$(34)
                END IF
                IF NoChecks = 0 THEN
                    IF vWatchOn AND inclinenumber(inclevel) = 0 THEN temp$ = vWatchErrorCall$ ELSE temp$ = ""
                    WriteBufLine MainTxtBuf, "if(qbevent){" + temp$ + "evnt(" + str2$(linenumber) + inclinenump$ + ");r=0;}"
                END IF
                entireline$ = RIGHT$(entireline$, LEN(entireline$) - x3): u$ = UCASE$(entireline$)
                n = numelements(entireline$): IF n = 0 THEN GOTO finishednonexec
            END IF 'valid
        END IF 'includes sp+":"
    END IF 'n>=2

    'remove leading ":"
    DO WHILE ASC(u$) = 58 '":"
        IF LEN(layout$) THEN layout$ = layout$ + sp2 + ":" ELSE layout$ = ":"
        IF LEN(u$) = 1 THEN GOTO finishednonexec
        entireline$ = getelements(entireline$, 2, n): u$ = UCASE$(entireline$): n = n - 1
    LOOP

    'ELSE at the beginning of a line
    IF ASC(u$) = 69 THEN '"E"

        e1$ = getelement(u$, 1)

        IF e1$ = "ELSE" THEN
            a$ = "ELSE"
            IF n > 1 THEN continuelinefrom = 2
            GOTO gotcommand
        END IF

        IF e1$ = "ELSEIF" THEN
            IF n < 3 THEN a$ = "Expected ... THEN": GOTO errmes
            IF getelement(u$, n) = "THEN" THEN a$ = entireline$: GOTO gotcommand
            FOR i = 3 TO n - 1
                IF getelement(u$, i) = "THEN" THEN
                    a$ = getelements(entireline$, 1, i)
                    continuelinefrom = i + 1
                    GOTO gotcommand
                END IF
            NEXT
            a$ = "Expected THEN": GOTO errmes
        END IF

    END IF '"E"

    start = 1

    GOTO skipcontinit

    contline:

    n = numelements(entireline$)
    u$ = UCASE$(entireline$)

    skipcontinit:

    'jargon:
    'lineelseused - counts how many line ELSEs can POSSIBLY follow
    'endifs - how many C++ endifs "}" need to be added at the end of the line
    'lineelseused - counts the number of indwelling ELSE statements on a line
    'impliedendif - stops autoformat from adding "END IF"

    a$ = ""

    FOR i = start TO n
        e$ = getelement(u$, i)


        IF e$ = ":" THEN
            IF i = start THEN
                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp2 + ":" ELSE layout$ = ":"
                IF i <> n THEN continuelinefrom = i + 1
                GOTO finishednonexec
            END IF
            IF i <> n THEN continuelinefrom = i
            GOTO gotcommand
        END IF


        'begin scanning an 'IF' statement
        IF e$ = "IF" AND a$ = "" THEN newif = 1


        IF e$ = "THEN" OR (e$ = "GOTO" AND newif = 1) THEN
            IF newif = 0 THEN a$ = "THEN without IF": GOTO errmes
            newif = 0
            IF lineelseused > 0 THEN lineelseused = lineelseused - 1
            IF e$ = "GOTO" THEN
                IF i = n THEN a$ = "Expected IF expression GOTO label": GOTO errmes
                i = i - 1
            END IF
            a$ = a$ + sp + e$ '+"THEN"/"GOTO"
            IF i <> n THEN continuelinefrom = i + 1: endifs = endifs + 1
            GOTO gotcommand
        END IF


        IF e$ = "ELSE" THEN

            IF start = i THEN
                IF lineelseused >= 1 THEN
                    'note: more than one else used (in a row) on this line, so close first if with an 'END IF' first
                    'note: parses 'END IF' then (after continuelinefrom) parses 'ELSE'
                    'consider the following: (square brackets make reading easier)
                    'eg. if a=1 then [if b=2 then c=2 else d=2] else e=3
                    impliedendif = 1: a$ = "END" + sp + "IF"
                    endifs = endifs - 1
                    continuelinefrom = i
                    lineelseused = lineelseused - 1
                    GOTO gotcommand
                END IF
                'follow up previously encountered 'ELSE' by applying 'ELSE'
                a$ = "ELSE": continuelinefrom = i + 1
                lineelseused = lineelseused + 1
                GOTO gotcommand
            END IF 'start=i

            'apply everything up to (but not including) 'ELSE'
            continuelinefrom = i
            GOTO gotcommand
        END IF '"ELSE"


        e$ = getelement(entireline$, i): IF a$ = "" THEN a$ = e$ ELSE a$ = a$ + sp + e$
    NEXT


    'we're reached the end of the line
    IF endifs > 0 THEN
        endifs = endifs - 1
        impliedendif = 1: entireline$ = entireline$ + sp + ":" + sp + "END" + sp + "IF": n = n + 3
        i = i + 1 'skip the ":" (i is now equal to n+2)
        continuelinefrom = i
        GOTO gotcommand
    END IF


    gotcommand:

    dynscope = 0

    ca$ = a$
    a$ = eleucase$(ca$) '***REVISE THIS SECTION LATER***


    layoutdone = 0

    linefragment = a$
    IF Debug THEN PRINT #9, a$
    n = numelements(a$)
    IF n = 0 THEN GOTO finishednonexec

    'convert non-UDT dimensioned periods to _046_
    IF INSTR(ca$, sp + "." + sp) THEN
        a3$ = getelement(ca$, 1)
        except = 0
        aa$ = a3$ + sp 'rebuilt a$ (always has a trailing spacer)
        lastfuse = -1
        FOR x = 2 TO n
            a2$ = getelement(ca$, x)
            IF except = 1 THEN except = 2: GOTO udtperiod 'skip element name
            IF a2$ = "." AND x <> n THEN
                IF except = 2 THEN except = 1: GOTO udtperiod 'sub-element of UDT

                IF a3$ = ")" THEN
                    'assume it was something like typevar(???).x and treat as a UDT
                    except = 1
                    GOTO udtperiod
                END IF

                'find an ID of that type
                try = findid(UCASE$(a3$))
                IF Error_Happened THEN GOTO errmes
                DO WHILE try
                    IF ((id.t AND ISUDT) <> 0) OR ((id.arraytype AND ISUDT) <> 0) THEN
                        except = 1
                        GOTO udtperiod
                    END IF
                    IF try = 2 THEN findanotherid = 1: try = findid(UCASE$(a3$)) ELSE try = 0
                    IF Error_Happened THEN GOTO errmes
                LOOP
                'not a udt; fuse lhs & rhs with _046_
                IF isalpha(ASC(a3$)) = 0 AND lastfuse <> x - 2 THEN a$ = "Invalid '.'": GOTO errmes
                aa$ = LEFT$(aa$, LEN(aa$) - 1) + fix046$
                lastfuse = x
                GOTO periodfused
            END IF '"."
            except = 0
            udtperiod:
            aa$ = aa$ + a2$ + sp
            periodfused:
            a3$ = a2$
        NEXT
        a$ = LEFT$(aa$, LEN(aa$) - 1)
        ca$ = a$
        a$ = eleucase$(ca$)
        n = numelements(a$)
    END IF

    arrayprocessinghappened = 0

    firstelement$ = getelement(a$, 1)
    secondelement$ = getelement(a$, 2)
    thirdelement$ = getelement(a$, 3)

    'non-executable section

    IF n = 1 THEN
        IF firstelement$ = "'" THEN layoutdone = 1: GOTO finishednonexec 'nop
    END IF

    IF n <= 2 THEN
        IF firstelement$ = "DATA" THEN
            l$ = SCase$("Data")
            IF n = 2 THEN

                e$ = SPACE$((LEN(secondelement$) - 1) \ 2)
                FOR x = 1 TO LEN(e$)
                    v1 = ASC(secondelement$, x * 2)
                    v2 = ASC(secondelement$, x * 2 + 1)
                    IF v1 < 65 THEN v1 = v1 - 48 ELSE v1 = v1 - 55
                    IF v2 < 65 THEN v2 = v2 - 48 ELSE v2 = v2 - 55
                    ASC(e$, x) = v1 + v2 * 16
                NEXT
                l$ = l$ + sp + e$
            END IF 'n=2

            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$

            GOTO finishednonexec
        END IF
    END IF



    'declare library
    IF declaringlibrary THEN

        IF firstelement$ = "END" THEN
            IF n <> 2 OR secondelement$ <> "DECLARE" THEN a$ = "Expected END DECLARE": GOTO errmes
            declaringlibrary = 0
            l$ = SCase$("End" + sp + "Declare")
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            GOTO finishednonexec
        END IF 'end declare

        declaringlibrary = 2

        IF firstelement$ = "SUB" OR firstelement$ = "FUNCTION" THEN
            GOTO declaresubfunc2
        END IF

        a$ = "Expected SUB/FUNCTION definition or END DECLARE": GOTO errmes
    END IF 'declaringlibrary

    'check TYPE declarations (created on prepass)
    IF definingtype THEN

        IF firstelement$ = "END" THEN
            IF n <> 2 OR secondelement$ <> "TYPE" THEN a$ = "Expected END TYPE": GOTO errmes
            definingtype = 0
            l$ = SCase$("End" + sp + "Type")
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            GOTO finishednonexec
        END IF

        'IF n < 3 THEN definingtypeerror = linenumber: a$ = "Expected element-name AS type or AS type element-list": GOTO errmes
        IF n < 3 THEN a$ = "Expected element-name AS type or AS type element-list": GOTO errmes
        definingtype = 2
        IF firstelement$ = "AS" THEN
            l$ = SCase$("As")
            t$ = ""
            wordsInTypeName = 0
            DO
                nextElement$ = getelement$(a$, 2 + wordsInTypeName)
                IF nextElement$ = "," THEN
                    'element-list
                    wordsInTypeName = wordsInTypeName - 2
                    EXIT DO
                END IF

                wordsInTypeName = wordsInTypeName + 1
                IF wordsInTypeName = n - 2 THEN
                    'single element in line
                    wordsInTypeName = wordsInTypeName - 1
                    EXIT DO
                END IF
            LOOP

            t$ = getelements$(a$, 2, 2 + wordsInTypeName)
            typ = typname2typ(t$)
            IF Error_Happened THEN GOTO errmes
            IF typ = 0 THEN a$ = "Undefined type": GOTO errmes
            IF typ AND ISUDT THEN
                IF UCASE$(RTRIM$(t$)) = "MEM" AND RTRIM$(udtxcname(typ AND 511)) = "_MEM" AND qb64prefix_set = 1 THEN
                    t$ = MID$(RTRIM$(udtxcname(typ AND 511)), 2)
                ELSE
                    t$ = RTRIM$(udtxcname(typ AND 511))
                END IF
                l$ = l$ + sp + t$
            ELSE
                l$ = l$ + sp + SCase2$(t$)
            END IF

            'Now add each variable:
            FOR i = 3 + wordsInTypeName TO n
                thisElement$ = getelement$(ca$, i)
                IF thisElement$ = "," THEN
                    l$ = l$ + thisElement$
                ELSE
                    l$ = l$ + sp + thisElement$
                END IF
            NEXT
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
        ELSE
            l$ = getelement(ca$, 1) + sp + SCase$("As")
            t$ = getelements$(a$, 3, n)
            typ = typname2typ(t$)
            IF Error_Happened THEN GOTO errmes
            IF typ = 0 THEN a$ = "Undefined type": GOTO errmes
            IF typ AND ISUDT THEN
                IF UCASE$(RTRIM$(t$)) = "MEM" AND RTRIM$(udtxcname(typ AND 511)) = "_MEM" AND qb64prefix_set = 1 THEN
                    t$ = MID$(RTRIM$(udtxcname(typ AND 511)), 2)
                ELSE
                    t$ = RTRIM$(udtxcname(typ AND 511))
                END IF
                l$ = l$ + sp + t$
            ELSE
                l$ = l$ + sp + SCase2$(t$)
            END IF
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
        END IF
        GOTO finishednonexec

    END IF 'defining type

    IF firstelement$ = "TYPE" THEN
        IF n <> 2 THEN a$ = "Expected TYPE type-name": GOTO errmes
        l$ = SCase$("Type") + sp + getelement(ca$, 2)
        layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
        definingtype = 1
        definingtypeerror = linenumber
        GOTO finishednonexec
    END IF

    'skip DECLARE SUB/FUNCTION
    IF n >= 1 THEN
        IF firstelement$ = "DECLARE" THEN

            IF secondelement$ = "LIBRARY" OR secondelement$ = "DYNAMIC" OR secondelement$ = "CUSTOMTYPE" OR secondelement$ = "STATIC" THEN

                declaringlibrary = 1
                dynamiclibrary = 0
                customtypelibrary = 0
                indirectlibrary = 0
                staticlinkedlibrary = 0

                x = 3
                l$ = SCase$("Declare" + sp + "Library")

                IF secondelement$ = "DYNAMIC" THEN
                    e$ = getelement$(a$, 3): IF e$ <> "LIBRARY" THEN a$ = "Expected DYNAMIC LIBRARY " + CHR$(34) + "..." + CHR$(34): GOTO errmes
                    dynamiclibrary = 1
                    x = 4
                    l$ = SCase$("Declare" + sp + "Dynamic" + sp + "Library")
                    IF n = 3 THEN a$ = "Expected DECLARE DYNAMIC LIBRARY " + CHR$(34) + "..." + CHR$(34): GOTO errmes
                    indirectlibrary = 1
                END IF

                IF secondelement$ = "CUSTOMTYPE" THEN
                    e$ = getelement$(a$, 3): IF e$ <> "LIBRARY" THEN a$ = "Expected CUSTOMTYPE LIBRARY": GOTO errmes
                    customtypelibrary = 1
                    x = 4
                    l$ = SCase$("Declare" + sp + "CustomType" + sp + "Library")
                    indirectlibrary = 1
                END IF

                IF secondelement$ = "STATIC" THEN
                    e$ = getelement$(a$, 3): IF e$ <> "LIBRARY" THEN a$ = "Expected STATIC LIBRARY": GOTO errmes
                    x = 4
                    l$ = SCase$("Declare" + sp + "Static" + sp + "Library")
                    staticlinkedlibrary = 1
                END IF

                sfdeclare = 0: sfheader = 0

                IF n >= x THEN

                    sfdeclare = 1

                    addlibrary:

                    libname$ = ""
                    headername$ = ""


                    'assume library name in double quotes follows
                    'assume library is in main qb64pe folder
                    x$ = getelement$(ca$, x)
                    IF ASC(x$) <> 34 THEN a$ = "Expected LIBRARY " + CHR$(34) + "..." + CHR$(34): GOTO errmes
                    x$ = RIGHT$(x$, LEN(x$) - 1)
                    z = INSTR(x$, CHR$(34))
                    IF z = 0 THEN a$ = "Expected LIBRARY " + CHR$(34) + "..." + CHR$(34): GOTO errmes
                    x$ = LEFT$(x$, z - 1)

                    IF dynamiclibrary <> 0 AND LEN(x$) = 0 THEN a$ = "Expected DECLARE DYNAMIC LIBRARY " + CHR$(34) + "..." + CHR$(34): GOTO errmes
                    IF customtypelibrary <> 0 AND LEN(x$) = 0 THEN a$ = "Expected DECLARE CUSTOMTYPE LIBRARY " + CHR$(34) + "..." + CHR$(34): GOTO errmes













                    'convert '\\' to '\'
                    WHILE INSTR(x$, "\\")
                        z = INSTR(x$, "\\")
                        x$ = LEFT$(x$, z - 1) + RIGHT$(x$, LEN(x$) - z)
                    WEND

                    autoformat_x$ = x$ 'used for autolayout purposes

                    'Remove version number from library name
                    'Eg. libname:1.0 becomes libname <-> 1.0 which later becomes libname.so.1.0
                    v$ = ""
                    striplibver:
                    FOR z = LEN(x$) TO 1 STEP -1
                        a = ASC(x$, z)
                        IF a = ASC_BACKSLASH OR a = ASC_FORWARDSLASH THEN EXIT FOR
                        IF a = ASC_FULLSTOP OR a = ASC_COLON THEN
                            IF isuinteger(RIGHT$(x$, LEN(x$) - z)) THEN
                                IF LEN(v$) THEN v$ = RIGHT$(x$, LEN(x$) - z) + "." + v$ ELSE v$ = RIGHT$(x$, LEN(x$) - z)
                                x$ = LEFT$(x$, z - 1)
                                IF a = ASC_COLON THEN EXIT FOR
                                GOTO striplibver
                            ELSE
                                EXIT FOR
                            END IF
                        END IF
                    NEXT
                    libver$ = v$


                    IF os$ = "WIN" THEN
                        'convert forward-slashes to back-slashes
                        DO WHILE INSTR(x$, "/")
                            z = INSTR(x$, "/")
                            x$ = LEFT$(x$, z - 1) + "\" + RIGHT$(x$, LEN(x$) - z)
                        LOOP
                    END IF

                    IF os$ = "LNX" THEN
                        'convert any back-slashes to forward-slashes
                        DO WHILE INSTR(x$, "\")
                            z = INSTR(x$, "\")
                            x$ = LEFT$(x$, z - 1) + "/" + RIGHT$(x$, LEN(x$) - z)
                        LOOP
                    END IF

                    'Separate path from name
                    libpath$ = ""
                    FOR z = LEN(x$) TO 1 STEP -1
                        a = ASC(x$, z)
                        IF a = 47 OR a = 92 THEN '\ or /
                            libpath$ = LEFT$(x$, z)
                            x$ = RIGHT$(x$, LEN(x$) - z)
                            EXIT FOR
                        END IF
                    NEXT

                    'Accept ./ and .\ as a reference to the source file
                    'folder, replacing it with the actual full path, if available
                    IF libpath$ = "./" OR libpath$ = ".\" THEN
                        libpath$ = ""
                        IF NoIDEMode THEN
                            libpath$ = path.source$
                            IF LEN(libpath$) > 0 AND RIGHT$(libpath$, 1) <> pathsep$ THEN libpath$ = libpath$ + pathsep$
                        ELSE
                            IF LEN(ideprogname) THEN libpath$ = idepath$ + pathsep$
                        END IF
                    END IF

                    'Create a path which can be used for inline code (uses \\ instead of \)
                    libpath_inline$ = ""
                    FOR z = 1 TO LEN(libpath$)
                        a = ASC(libpath$, z)
                        libpath_inline$ = libpath_inline$ + CHR$(a)
                        IF a = 92 THEN libpath_inline$ = libpath_inline$ + "\"
                    NEXT

                    IF LEN(x$) THEN
                        IF dynamiclibrary = 0 THEN
                            'Static library

                            IF os$ = "WIN" THEN
                                'check for .lib
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(libpath$ + x$ + ".lib") THEN
                                        libname$ = libpath$ + x$ + ".lib"
                                        inlinelibname$ = libpath_inline$ + x$ + ".lib"
                                    END IF
                                END IF
                                'check for .a
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(libpath$ + x$ + ".a") THEN
                                        libname$ = libpath$ + x$ + ".a"
                                        inlinelibname$ = libpath_inline$ + x$ + ".a"
                                    END IF
                                END IF
                                'check for .o
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(libpath$ + x$ + ".o") THEN
                                        libname$ = libpath$ + x$ + ".o"
                                        inlinelibname$ = libpath_inline$ + x$ + ".o"
                                    END IF
                                END IF
                                'check for .lib
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(x$ + ".lib") THEN
                                        libname$ = x$ + ".lib"
                                        inlinelibname$ = x$ + ".lib"
                                    END IF
                                END IF
                                'check for .a
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(x$ + ".a") THEN
                                        libname$ = x$ + ".a"
                                        inlinelibname$ = x$ + ".a"
                                    END IF
                                END IF
                                'check for .o
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(x$ + ".o") THEN
                                        libname$ = x$ + ".o"
                                        inlinelibname$ = x$ + ".o"
                                    END IF
                                END IF
                            END IF 'Windows

                            IF os$ = "LNX" THEN
                                IF staticlinkedlibrary = 0 THEN

                                    IF MacOSX THEN 'dylib support
                                        'check for .dylib (direct)
                                        IF LEN(libname$) = 0 THEN
                                            IF _FILEEXISTS(libpath$ + "lib" + x$ + "." + libver$ + ".dylib") THEN
                                                libname$ = libpath$ + "lib" + x$ + "." + libver$ + ".dylib"
                                                inlinelibname$ = libpath_inline$ + "lib" + x$ + "." + libver$ + ".dylib"
                                                IF LEN(libpath$) THEN mylibopt$ = mylibopt$ + " -Wl,-rpath " + libpath$ + " " ELSE mylibopt$ = mylibopt$ + " -Wl,-rpath ./ "
                                            END IF
                                        END IF
                                        IF LEN(libname$) = 0 THEN
                                            IF _FILEEXISTS(libpath$ + "lib" + x$ + ".dylib") THEN
                                                libname$ = libpath$ + "lib" + x$ + ".dylib"
                                                inlinelibname$ = libpath_inline$ + "lib" + x$ + ".dylib"
                                                IF LEN(libpath$) THEN mylibopt$ = mylibopt$ + " -Wl,-rpath " + libpath$ + " " ELSE mylibopt$ = mylibopt$ + " -Wl,-rpath ./ "
                                            END IF
                                        END IF
                                    END IF

                                    'check for .so (direct)
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS(libpath$ + "lib" + x$ + ".so." + libver$) THEN
                                            libname$ = libpath$ + "lib" + x$ + ".so." + libver$
                                            inlinelibname$ = libpath_inline$ + "lib" + x$ + ".so." + libver$
                                            IF LEN(libpath$) THEN mylibopt$ = mylibopt$ + " -Wl,-rpath " + libpath$ + " " ELSE mylibopt$ = mylibopt$ + " -Wl,-rpath ./ "
                                        END IF
                                    END IF
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS(libpath$ + "lib" + x$ + ".so") THEN
                                            libname$ = libpath$ + "lib" + x$ + ".so"
                                            inlinelibname$ = libpath_inline$ + "lib" + x$ + ".so"
                                            IF LEN(libpath$) THEN mylibopt$ = mylibopt$ + " -Wl,-rpath " + libpath$ + " " ELSE mylibopt$ = mylibopt$ + " -Wl,-rpath ./ "
                                        END IF
                                    END IF
                                END IF
                                'check for .a (direct)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(libpath$ + "lib" + x$ + ".a") THEN
                                        libname$ = libpath$ + "lib" + x$ + ".a"
                                        inlinelibname$ = libpath_inline$ + "lib" + x$ + ".a"
                                    END IF
                                END IF
                                'check for .o (direct)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(libpath$ + "lib" + x$ + ".o") THEN
                                        libname$ = libpath$ + "lib" + x$ + ".o"
                                        inlinelibname$ = libpath_inline$ + "lib" + x$ + ".o"
                                    END IF
                                END IF
                                IF staticlinkedlibrary = 0 THEN
                                    'check for .so (usr/lib64)
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("/usr/lib64/" + libpath$ + "lib" + x$ + ".so." + libver$) THEN
                                            libname$ = "/usr/lib64/" + libpath$ + "lib" + x$ + ".so." + libver$
                                            inlinelibname$ = "/usr/lib64/" + libpath_inline$ + "lib" + x$ + ".so." + libver$
                                            IF LEN(libpath$) THEN mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib64/" + libpath$ + " " ELSE mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib64/ "
                                        END IF
                                    END IF
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("/usr/lib64/" + libpath$ + "lib" + x$ + ".so") THEN
                                            libname$ = "/usr/lib64/" + libpath$ + "lib" + x$ + ".so"
                                            inlinelibname$ = "/usr/lib64/" + libpath_inline$ + "lib" + x$ + ".so"
                                            IF LEN(libpath$) THEN mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib64/" + libpath$ + " " ELSE mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib64/ "
                                        END IF
                                    END IF
                                END IF
                                'check for .a (usr/lib64)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("/usr/lib64/" + libpath$ + "lib" + x$ + ".a") THEN
                                        libname$ = "/usr/lib64/" + libpath$ + "lib" + x$ + ".a"
                                        inlinelibname$ = "/usr/lib64/" + libpath_inline$ + "lib" + x$ + ".a"
                                    END IF
                                END IF
                                IF staticlinkedlibrary = 0 THEN

                                    IF MacOSX THEN 'dylib support
                                        'check for .dylib (usr/lib)
                                        IF LEN(libname$) = 0 THEN
                                            IF _FILEEXISTS("/usr/lib/" + libpath$ + "lib" + x$ + "." + libver$ + ".dylib") THEN
                                                libname$ = "/usr/lib/" + libpath$ + "lib" + x$ + "." + libver$ + ".dylib"
                                                inlinelibname$ = "/usr/lib/" + libpath_inline$ + "lib" + x$ + "." + libver$ + ".dylib"
                                                IF LEN(libpath$) THEN mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib/" + libpath$ + " " ELSE mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib/ "
                                            END IF
                                        END IF
                                        IF LEN(libname$) = 0 THEN
                                            IF _FILEEXISTS("/usr/lib/" + libpath$ + "lib" + x$ + ".dylib") THEN
                                                libname$ = "/usr/lib/" + libpath$ + "lib" + x$ + ".dylib"
                                                inlinelibname$ = "/usr/lib/" + libpath_inline$ + "lib" + x$ + ".dylib"
                                                IF LEN(libpath$) THEN mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib/" + libpath$ + " " ELSE mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib/ "
                                            END IF
                                        END IF
                                    END IF

                                    'check for .so (usr/lib)
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("/usr/lib/" + libpath$ + "lib" + x$ + ".so." + libver$) THEN
                                            libname$ = "/usr/lib/" + libpath$ + "lib" + x$ + ".so." + libver$
                                            inlinelibname$ = "/usr/lib/" + libpath_inline$ + "lib" + x$ + ".so." + libver$
                                            IF LEN(libpath$) THEN mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib/" + libpath$ + " " ELSE mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib/ "
                                        END IF
                                    END IF
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("/usr/lib/" + libpath$ + "lib" + x$ + ".so") THEN
                                            libname$ = "/usr/lib/" + libpath$ + "lib" + x$ + ".so"
                                            inlinelibname$ = "/usr/lib/" + libpath_inline$ + "lib" + x$ + ".so"
                                            IF LEN(libpath$) THEN mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib/" + libpath$ + " " ELSE mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib/ "
                                        END IF
                                    END IF
                                END IF
                                'check for .a (usr/lib)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("/usr/lib/" + libpath$ + "lib" + x$ + ".a") THEN
                                        libname$ = "/usr/lib/" + libpath$ + "lib" + x$ + ".a"
                                        inlinelibname$ = "/usr/lib/" + libpath_inline$ + "lib" + x$ + ".a"
                                    END IF
                                END IF
                                '--------------------------(without path)------------------------------
                                IF staticlinkedlibrary = 0 THEN

                                    IF MacOSX THEN 'dylib support
                                        'check for .dylib (direct)
                                        IF LEN(libname$) = 0 THEN
                                            IF _FILEEXISTS("lib" + x$ + "." + libver$ + ".dylib") THEN
                                                libname$ = "lib" + x$ + "." + libver$ + ".dylib"
                                                inlinelibname$ = "lib" + x$ + "." + libver$ + ".dylib"
                                                mylibopt$ = mylibopt$ + " -Wl,-rpath ./ "
                                            END IF
                                        END IF
                                        IF LEN(libname$) = 0 THEN
                                            IF _FILEEXISTS("lib" + x$ + ".dylib") THEN
                                                libname$ = "lib" + x$ + ".dylib"
                                                inlinelibname$ = "lib" + x$ + ".dylib"
                                                mylibopt$ = mylibopt$ + " -Wl,-rpath ./ "
                                            END IF
                                        END IF
                                    END IF

                                    'check for .so (direct)
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("lib" + x$ + ".so." + libver$) THEN
                                            libname$ = "lib" + x$ + ".so." + libver$
                                            inlinelibname$ = "lib" + x$ + ".so." + libver$
                                            mylibopt$ = mylibopt$ + " -Wl,-rpath ./ "
                                        END IF
                                    END IF
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("lib" + x$ + ".so") THEN
                                            libname$ = "lib" + x$ + ".so"
                                            inlinelibname$ = "lib" + x$ + ".so"
                                            mylibopt$ = mylibopt$ + " -Wl,-rpath ./ "
                                        END IF
                                    END IF
                                END IF
                                'check for .a (direct)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("lib" + x$ + ".a") THEN
                                        libname$ = "lib" + x$ + ".a"
                                        inlinelibname$ = "lib" + x$ + ".a"
                                    END IF
                                END IF
                                'check for .o (direct)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("lib" + x$ + ".o") THEN
                                        libname$ = "lib" + x$ + ".o"
                                        inlinelibname$ = "lib" + x$ + ".o"
                                    END IF
                                END IF
                                IF staticlinkedlibrary = 0 THEN
                                    'check for .so (usr/lib64)
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("/usr/lib64/" + "lib" + x$ + ".so." + libver$) THEN
                                            libname$ = "/usr/lib64/" + "lib" + x$ + ".so." + libver$
                                            inlinelibname$ = "/usr/lib64/" + "lib" + x$ + ".so." + libver$
                                            mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib64/ "
                                        END IF
                                    END IF
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("/usr/lib64/" + "lib" + x$ + ".so") THEN
                                            libname$ = "/usr/lib64/" + "lib" + x$ + ".so"
                                            inlinelibname$ = "/usr/lib64/" + "lib" + x$ + ".so"
                                            mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib64/ "
                                        END IF
                                    END IF
                                END IF
                                'check for .a (usr/lib64)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("/usr/lib64/" + "lib" + x$ + ".a") THEN
                                        libname$ = "/usr/lib64/" + "lib" + x$ + ".a"
                                        inlinelibname$ = "/usr/lib64/" + "lib" + x$ + ".a"
                                    END IF
                                END IF
                                IF staticlinkedlibrary = 0 THEN

                                    IF MacOSX THEN 'dylib support
                                        'check for .dylib (usr/lib)
                                        IF LEN(libname$) = 0 THEN
                                            IF _FILEEXISTS("/usr/lib/" + "lib" + x$ + "." + libver$ + ".dylib") THEN
                                                libname$ = "/usr/lib/" + "lib" + x$ + "." + libver$ + ".dylib"
                                                inlinelibname$ = "/usr/lib/" + "lib" + x$ + "." + libver$ + ".dylib"
                                            END IF
                                        END IF
                                        IF LEN(libname$) = 0 THEN
                                            IF _FILEEXISTS("/usr/lib/" + "lib" + x$ + ".dylib") THEN
                                                libname$ = "/usr/lib/" + "lib" + x$ + ".dylib"
                                                inlinelibname$ = "/usr/lib/" + "lib" + x$ + ".dylib"
                                                mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib/ "
                                            END IF
                                        END IF
                                    END IF

                                    'check for .so (usr/lib)
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("/usr/lib/" + "lib" + x$ + ".so." + libver$) THEN
                                            libname$ = "/usr/lib/" + "lib" + x$ + ".so." + libver$
                                            inlinelibname$ = "/usr/lib/" + "lib" + x$ + ".so." + libver$
                                        END IF
                                    END IF
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("/usr/lib/" + "lib" + x$ + ".so") THEN
                                            libname$ = "/usr/lib/" + "lib" + x$ + ".so"
                                            inlinelibname$ = "/usr/lib/" + "lib" + x$ + ".so"
                                            mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib/ "
                                        END IF
                                    END IF
                                END IF
                                'check for .a (usr/lib)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("/usr/lib/" + "lib" + x$ + ".a") THEN
                                        libname$ = "/usr/lib/" + "lib" + x$ + ".a"
                                        inlinelibname$ = "/usr/lib/" + "lib" + x$ + ".a"
                                        mylibopt$ = mylibopt$ + " -Wl,-rpath /usr/lib/ "
                                    END IF
                                END IF
                            END IF 'Linux


                            'check for header
                            IF LEN(headername$) = 0 THEN
                                IF os$ = "WIN" THEN
                                    IF _FILEEXISTS(libpath$ + x$ + ".h") THEN
                                        headername$ = libpath_inline$ + x$ + ".h"
                                        IF customtypelibrary = 0 THEN sfdeclare = 0
                                        sfheader = 1
                                        GOTO GotHeader
                                    END IF
                                    IF _FILEEXISTS(libpath$ + x$ + ".hpp") THEN
                                        headername$ = libpath_inline$ + x$ + ".hpp"
                                        IF customtypelibrary = 0 THEN sfdeclare = 0
                                        sfheader = 1
                                        GOTO GotHeader
                                    END IF
                                    '--------------------------(without path)------------------------------
                                    IF _FILEEXISTS(x$ + ".h") THEN
                                        headername$ = x$ + ".h"
                                        IF customtypelibrary = 0 THEN sfdeclare = 0
                                        sfheader = 1
                                        GOTO GotHeader
                                    END IF
                                    IF _FILEEXISTS(x$ + ".hpp") THEN
                                        headername$ = x$ + ".hpp"
                                        IF customtypelibrary = 0 THEN sfdeclare = 0
                                        sfheader = 1
                                        GOTO GotHeader
                                    END IF
                                END IF 'Windows

                                IF os$ = "LNX" THEN
                                    IF _FILEEXISTS(libpath$ + x$ + ".h") THEN
                                        headername$ = libpath_inline$ + x$ + ".h"
                                        IF customtypelibrary = 0 THEN sfdeclare = 0
                                        sfheader = 1
                                        GOTO GotHeader
                                    END IF
                                    IF _FILEEXISTS(libpath$ + x$ + ".hpp") THEN
                                        headername$ = libpath_inline$ + x$ + ".hpp"
                                        IF customtypelibrary = 0 THEN sfdeclare = 0
                                        sfheader = 1
                                        GOTO GotHeader
                                    END IF
                                    IF _FILEEXISTS("/usr/include/" + libpath$ + x$ + ".h") THEN
                                        headername$ = "/usr/include/" + libpath_inline$ + x$ + ".h"
                                        IF customtypelibrary = 0 THEN sfdeclare = 0
                                        sfheader = 1
                                        GOTO GotHeader
                                    END IF
                                    IF _FILEEXISTS("/usr/include/" + libpath$ + x$ + ".hpp") THEN
                                        headername$ = "/usr/include/" + libpath_inline$ + x$ + ".hpp"
                                        IF customtypelibrary = 0 THEN sfdeclare = 0
                                        sfheader = 1
                                        GOTO GotHeader
                                    END IF
                                    '--------------------------(without path)------------------------------
                                    IF _FILEEXISTS(x$ + ".h") THEN
                                        headername$ = x$ + ".h"
                                        IF customtypelibrary = 0 THEN sfdeclare = 0
                                        sfheader = 1
                                        GOTO GotHeader
                                    END IF
                                    IF _FILEEXISTS(x$ + ".hpp") THEN
                                        headername$ = x$ + ".hpp"
                                        IF customtypelibrary = 0 THEN sfdeclare = 0
                                        sfheader = 1
                                        GOTO GotHeader
                                    END IF
                                    IF _FILEEXISTS("/usr/include/" + x$ + ".h") THEN
                                        headername$ = "/usr/include/" + x$ + ".h"
                                        IF customtypelibrary = 0 THEN sfdeclare = 0
                                        sfheader = 1
                                        GOTO GotHeader
                                    END IF
                                    IF _FILEEXISTS("/usr/include/" + x$ + ".hpp") THEN
                                        headername$ = "/usr/include/" + x$ + ".hpp"
                                        IF customtypelibrary = 0 THEN sfdeclare = 0
                                        sfheader = 1
                                        GOTO GotHeader
                                    END IF
                                END IF 'Linux

                                GotHeader:
                            END IF

                        ELSE
                            'dynamic library

                            IF os$ = "WIN" THEN
                                'check for .dll (direct)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(libpath$ + x$ + ".dll") THEN
                                        libname$ = libpath$ + x$ + ".dll"
                                        inlinelibname$ = libpath_inline$ + x$ + ".dll"
                                    END IF
                                END IF
                                'check for .dll (system32)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(ENVIRON$("SYSTEMROOT") + "\System32\" + libpath$ + x$ + ".dll") THEN
                                        libname$ = libpath$ + x$ + ".dll"
                                        inlinelibname$ = libpath_inline$ + x$ + ".dll"
                                    END IF
                                END IF
                                '--------------------------(without path)------------------------------
                                'check for .dll (direct)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(x$ + ".dll") THEN
                                        libname$ = x$ + ".dll"
                                        inlinelibname$ = x$ + ".dll"
                                    END IF
                                END IF
                                'check for .dll (system32)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(ENVIRON$("SYSTEMROOT") + "\System32\" + x$ + ".dll") THEN
                                        libname$ = x$ + ".dll"
                                        inlinelibname$ = x$ + ".dll"
                                    END IF
                                END IF
                            END IF 'Windows

                            IF os$ = "LNX" THEN
                                'Note: STATIC libraries (.a/.o) cannot be loaded as dynamic objects


                                IF MacOSX THEN 'dylib support
                                    'check for .dylib (direct)
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS(libpath$ + "lib" + x$ + "." + libver$ + ".dylib") THEN
                                            libname$ = libpath$ + "lib" + x$ + "." + libver$ + ".dylib"
                                            inlinelibname$ = libpath_inline$ + "lib" + x$ + "." + libver$ + ".dylib"
                                            IF LEFT$(libpath$, 1) <> "/" THEN libname$ = "./" + libname$: inlinelibname$ = "./" + inlinelibname$
                                        END IF
                                    END IF
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS(libpath$ + "lib" + x$ + ".dylib") THEN
                                            libname$ = libpath$ + "lib" + x$ + ".dylib"
                                            inlinelibname$ = libpath_inline$ + "lib" + x$ + ".dylib"
                                            IF LEFT$(libpath$, 1) <> "/" THEN libname$ = "./" + libname$: inlinelibname$ = "./" + inlinelibname$
                                        END IF
                                    END IF
                                END IF

                                'check for .so (direct)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(libpath$ + "lib" + x$ + ".so." + libver$) THEN
                                        libname$ = libpath$ + "lib" + x$ + ".so." + libver$
                                        inlinelibname$ = libpath_inline$ + "lib" + x$ + ".so." + libver$
                                        IF LEFT$(libpath$, 1) <> "/" THEN libname$ = "./" + libname$: inlinelibname$ = "./" + inlinelibname$
                                    END IF
                                END IF
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS(libpath$ + "lib" + x$ + ".so") THEN
                                        libname$ = libpath$ + "lib" + x$ + ".so"
                                        inlinelibname$ = libpath_inline$ + "lib" + x$ + ".so"
                                        IF LEFT$(libpath$, 1) <> "/" THEN libname$ = "./" + libname$: inlinelibname$ = "./" + inlinelibname$
                                    END IF
                                END IF
                                'check for .so (usr/lib64)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("/usr/lib64/" + libpath$ + "lib" + x$ + ".so." + libver$) THEN
                                        libname$ = "/usr/lib64/" + libpath$ + "lib" + x$ + ".so." + libver$
                                        inlinelibname$ = "/usr/lib64/" + libpath_inline$ + "lib" + x$ + ".so." + libver$
                                    END IF
                                END IF
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("/usr/lib64/" + libpath$ + "lib" + x$ + ".so") THEN
                                        libname$ = "/usr/lib64/" + libpath$ + "lib" + x$ + ".so"
                                        inlinelibname$ = "/usr/lib64/" + libpath_inline$ + "lib" + x$ + ".so"
                                    END IF
                                END IF

                                IF MacOSX THEN 'dylib support
                                    'check for .dylib (usr/lib)
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("/usr/lib/" + libpath$ + "lib" + x$ + "." + libver$ + ".dylib") THEN
                                            libname$ = "/usr/lib/" + libpath$ + "lib" + x$ + "." + libver$ + ".dylib"
                                            inlinelibname$ = "/usr/lib/" + libpath_inline$ + "lib" + x$ + "." + libver$ + ".dylib"
                                        END IF
                                    END IF
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("/usr/lib/" + libpath$ + "lib" + x$ + ".dylib") THEN
                                            libname$ = "/usr/lib/" + libpath$ + "lib" + x$ + ".dylib"
                                            inlinelibname$ = "/usr/lib/" + libpath_inline$ + "lib" + x$ + ".dylib"
                                        END IF
                                    END IF
                                END IF

                                'check for .so (usr/lib)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("/usr/lib/" + libpath$ + "lib" + x$ + ".so." + libver$) THEN
                                        libname$ = "/usr/lib/" + libpath$ + "lib" + x$ + ".so." + libver$
                                        inlinelibname$ = "/usr/lib/" + libpath_inline$ + "lib" + x$ + ".so." + libver$
                                    END IF
                                END IF
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("/usr/lib/" + libpath$ + "lib" + x$ + ".so") THEN
                                        libname$ = "/usr/lib/" + libpath$ + "lib" + x$ + ".so"
                                        inlinelibname$ = "/usr/lib/" + libpath_inline$ + "lib" + x$ + ".so"
                                    END IF
                                END IF
                                '--------------------------(without path)------------------------------
                                IF MacOSX THEN 'dylib support
                                    'check for .dylib (direct)
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("lib" + x$ + "." + libver$ + ".dylib") THEN
                                            libname$ = "lib" + x$ + "." + libver$ + ".dylib"
                                            inlinelibname$ = "lib" + x$ + "." + libver$ + ".dylib"
                                            libname$ = "./" + libname$: inlinelibname$ = "./" + inlinelibname$
                                        END IF
                                    END IF
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("lib" + x$ + ".dylib") THEN
                                            libname$ = "lib" + x$ + ".dylib"
                                            inlinelibname$ = "lib" + x$ + ".dylib"
                                            libname$ = "./" + libname$: inlinelibname$ = "./" + inlinelibname$
                                        END IF
                                    END IF
                                END IF

                                'check for .so (direct)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("lib" + x$ + ".so." + libver$) THEN
                                        libname$ = "lib" + x$ + ".so." + libver$
                                        inlinelibname$ = "lib" + x$ + ".so." + libver$
                                        libname$ = "./" + libname$: inlinelibname$ = "./" + inlinelibname$
                                    END IF
                                END IF
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("lib" + x$ + ".so") THEN
                                        libname$ = "lib" + x$ + ".so"
                                        inlinelibname$ = "lib" + x$ + ".so"
                                        libname$ = "./" + libname$: inlinelibname$ = "./" + inlinelibname$
                                    END IF
                                END IF
                                'check for .so (usr/lib64)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("/usr/lib64/" + "lib" + x$ + ".so." + libver$) THEN
                                        libname$ = "/usr/lib64/" + "lib" + x$ + ".so." + libver$
                                        inlinelibname$ = "/usr/lib64/" + "lib" + x$ + ".so." + libver$
                                    END IF
                                END IF
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("/usr/lib64/" + "lib" + x$ + ".so") THEN
                                        libname$ = "/usr/lib64/" + "lib" + x$ + ".so"
                                        inlinelibname$ = "/usr/lib64/" + "lib" + x$ + ".so"
                                    END IF
                                END IF

                                IF MacOSX THEN 'dylib support
                                    'check for .dylib (usr/lib)
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("/usr/lib/" + "lib" + x$ + "." + libver$ + ".dylib") THEN
                                            libname$ = "/usr/lib/" + "lib" + x$ + "." + libver$ + ".dylib"
                                            inlinelibname$ = "/usr/lib/" + "lib" + x$ + "." + libver$ + ".dylib"
                                        END IF
                                    END IF
                                    IF LEN(libname$) = 0 THEN
                                        IF _FILEEXISTS("/usr/lib/" + "lib" + x$ + ".dylib") THEN
                                            libname$ = "/usr/lib/" + "lib" + x$ + ".dylib"
                                            inlinelibname$ = "/usr/lib/" + "lib" + x$ + ".dylib"
                                        END IF
                                    END IF
                                END IF

                                'check for .so (usr/lib)
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("/usr/lib/" + "lib" + x$ + ".so." + libver$) THEN
                                        libname$ = "/usr/lib/" + "lib" + x$ + ".so." + libver$
                                        inlinelibname$ = "/usr/lib/" + "lib" + x$ + ".so." + libver$
                                    END IF
                                END IF
                                IF LEN(libname$) = 0 THEN
                                    IF _FILEEXISTS("/usr/lib/" + "lib" + x$ + ".so") THEN
                                        libname$ = "/usr/lib/" + "lib" + x$ + ".so"
                                        inlinelibname$ = "/usr/lib/" + "lib" + x$ + ".so"
                                    END IF
                                END IF
                            END IF 'Linux

                        END IF 'Dynamic

                        'library found?
                        IF dynamiclibrary <> 0 AND LEN(libname$) = 0 THEN a$ = "DYNAMIC LIBRARY not found": GOTO errmes
                        IF LEN(libname$) = 0 AND LEN(headername$) = 0 THEN a$ = "LIBRARY not found": GOTO errmes

                        '***actual method should cull redundant header and library entries***

                        IF dynamiclibrary = 0 THEN

                            'static
                            IF LEN(libname$) THEN
                                IF os$ = "WIN" THEN
                                    IF MID$(libname$, 2, 1) = ":" OR LEFT$(libname$, 1) = "\" THEN
                                        mylib$ = mylib$ + " " + libname$ + " "
                                    ELSE
                                        mylib$ = mylib$ + " ..\..\" + libname$ + " "
                                    END IF
                                END IF
                                IF os$ = "LNX" THEN
                                    IF LEFT$(libname$, 1) = "/" THEN
                                        mylib$ = mylib$ + " " + libname$ + " "
                                    ELSE
                                        mylib$ = mylib$ + " ../../" + libname$ + " "
                                    END IF
                                END IF

                            END IF

                        ELSE

                            'dynamic
                            IF LEN(headername$) = 0 THEN 'no header

                                IF subfuncn THEN
                                    f = OpenBuffer%("A", tmpdir$ + "maindata.txt")
                                ELSE
                                    f = DataTxtBuf
                                END IF

                                'make name a C-appropriate variable name
                                'by converting everything except numbers and
                                'letters to underscores
                                x2$ = x$
                                FOR x2 = 1 TO LEN(x2$)
                                    IF ASC(x2$, x2) < 48 THEN ASC(x2$, x2) = 95
                                    IF ASC(x2$, x2) > 57 AND ASC(x2$, x2) < 65 THEN ASC(x2$, x2) = 95
                                    IF ASC(x2$, x2) > 90 AND ASC(x2$, x2) < 97 THEN ASC(x2$, x2) = 95
                                    IF ASC(x2$, x2) > 122 THEN ASC(x2$, x2) = 95
                                NEXT
                                DLLname$ = x2$

                                IF sfdeclare THEN

                                    IF os$ = "WIN" THEN
                                        WriteBufLine RegTxtBuf, "HINSTANCE DLL_" + x2$ + "=NULL;"
                                        WriteBufLine f, "if (!DLL_" + x2$ + "){"
                                        WriteBufLine f, "DLL_" + x2$ + "=LoadLibrary(" + CHR$(34) + inlinelibname$ + CHR$(34) + ");"
                                        WriteBufLine f, "if (!DLL_" + x2$ + ") error(259);"
                                        WriteBufLine f, "}"
                                    END IF

                                    IF os$ = "LNX" THEN
                                        WriteBufLine RegTxtBuf, "void *DLL_" + x2$ + "=NULL;"
                                        WriteBufLine f, "if (!DLL_" + x2$ + "){"
                                        WriteBufLine f, "DLL_" + x2$ + "=dlopen(" + CHR$(34) + inlinelibname$ + CHR$(34) + ",RTLD_LAZY);"
                                        WriteBufLine f, "if (!DLL_" + x2$ + ") error(259);"
                                        WriteBufLine f, "}"
                                    END IF


                                END IF

                            END IF 'no header

                        END IF 'dynamiclibrary

                        IF LEN(headername$) THEN
                            IF os$ = "WIN" THEN
                                IF MID$(headername$, 2, 1) = ":" OR LEFT$(headername$, 1) = "\" THEN
                                    WriteBufLine RegTxtBuf, "#include " + CHR$(34) + headername$ + CHR$(34)
                                ELSE
                                    WriteBufLine RegTxtBuf, "#include " + CHR$(34) + "..\\..\\" + headername$ + CHR$(34)
                                END IF
                            END IF
                            IF os$ = "LNX" THEN

                                IF LEFT$(headername$, 1) = "/" THEN
                                    WriteBufLine RegTxtBuf, "#include " + CHR$(34) + headername$ + CHR$(34)
                                ELSE
                                    WriteBufLine RegTxtBuf, "#include " + CHR$(34) + "../../" + headername$ + CHR$(34)
                                END IF

                            END IF
                        END IF

                    END IF

                    l$ = l$ + sp + CHR$(34) + autoformat_x$ + CHR$(34)

                    IF n > x THEN
                        IF dynamiclibrary THEN a$ = "Cannot specify multiple DYNAMIC LIBRARY names in a single DECLARE statement": GOTO errmes
                        x = x + 1: x2$ = getelement$(a$, x): IF x2$ <> "," THEN a$ = "Expected ,": GOTO errmes
                        l$ = l$ + sp2 + ","
                        x = x + 1: IF x > n THEN a$ = "Expected , ...": GOTO errmes
                        GOTO addlibrary
                    END IF

                END IF 'n>=x

                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                GOTO finishednonexec
            END IF

            GOTO finishednonexec 'note: no layout required
        END IF
    END IF

    'begin SUB/FUNCTION
    IF n >= 1 THEN
        dynamiclibrary = 0
        declaresubfunc2:
        sf = 0
        IF firstelement$ = "FUNCTION" THEN sf = 1
        IF firstelement$ = "SUB" THEN sf = 2
        IF sf THEN

            IF declaringlibrary = 0 THEN
                IF LEN(subfunc) THEN a$ = "Expected END SUB/FUNCTION before " + firstelement$: GOTO errmes
            END IF

            IF n = 1 THEN a$ = "Expected name after SUB/FUNCTION": GOTO errmes
            e$ = getelement$(ca$, 2)
            symbol$ = removesymbol$(e$) '$,%,etc.
            IF Error_Happened THEN GOTO errmes
            IF sf = 2 AND symbol$ <> "" THEN a$ = "Type symbols after a SUB name are invalid": GOTO errmes
            try = findid(e$)
            IF Error_Happened THEN GOTO errmes
            DO WHILE try
                IF id.subfunc = sf THEN GOTO createsf
                IF try = 2 THEN findanotherid = 1: try = findid(e$) ELSE try = 0
                IF Error_Happened THEN GOTO errmes
            LOOP
            a$ = "Unregistered SUB/FUNCTION encountered": GOTO errmes
            createsf:
            IF UCASE$(e$) = "_GL" THEN e$ = "_GL"
            IF firstelement$ = "SUB" THEN
                l$ = SCase$("Sub") + sp + e$ + symbol$
            ELSE
                l$ = SCase$("Function") + sp + e$ + symbol$
            END IF
            id2 = id
            targetid = currentid

            'check for ALIAS
            aliasname$ = RTRIM$(id.cn)
            IF n > 2 THEN
                ee$ = getelement$(a$, 3)
                IF ee$ = "ALIAS" THEN
                    IF declaringlibrary = 0 THEN a$ = "ALIAS can only be used with DECLARE LIBRARY": GOTO errmes
                    IF n = 3 THEN a$ = "Expected ALIAS name-in-library": GOTO errmes
                    ee$ = getelement$(ca$, 4)

                    'strip string content (optional)
                    IF LEFT$(ee$, 1) = CHR$(34) THEN
                        ee$ = RIGHT$(ee$, LEN(ee$) - 1)
                        x = INSTR(ee$, CHR$(34)): IF x = 0 THEN a$ = "Expected " + CHR$(34): GOTO errmes
                        ee$ = LEFT$(ee$, x - 1)
                        l$ = l$ + sp + SCase$("Alias") + sp + CHR_QUOTE + ee$ + CHR_QUOTE
                    ELSE
                        l$ = l$ + sp + SCase$("Alias") + sp + ee$
                    END IF

                    'strip fix046$ (created by unquoted periods)
                    DO WHILE INSTR(ee$, fix046$)
                        x = INSTR(ee$, fix046$): ee$ = LEFT$(ee$, x - 1) + "." + RIGHT$(ee$, LEN(ee$) - x + 1 - LEN(fix046$))
                    LOOP
                    aliasname$ = ee$
                    'remove ALIAS section from line
                    IF n <= 4 THEN a$ = getelements(a$, 1, 2)
                    IF n >= 5 THEN a$ = getelements(a$, 1, 2) + sp + getelements(a$, 5, n)
                    IF n <= 4 THEN ca$ = getelements(ca$, 1, 2)
                    IF n >= 5 THEN ca$ = getelements(ca$, 1, 2) + sp + getelements(ca$, 5, n)
                    n = n - 2
                END IF
            END IF

            IF declaringlibrary THEN GOTO declibjmp1


            IF closedmain = 0 THEN closemain

            'check for open controls (copy #2)
            IF controllevel <> 0 AND controltype(controllevel) <> 6 THEN 'It's OK for subs to be inside $IF blocks
                a$ = "Unidentified open control block"
                SELECT CASE controltype(controllevel)
                    CASE 1: a$ = "IF without END IF"
                    CASE 2: a$ = "FOR without NEXT"
                    CASE 3, 4: a$ = "DO without LOOP"
                    CASE 5: a$ = "WHILE without WEND"
                    CASE 10 TO 19: a$ = "SELECT CASE without END SELECT"
                END SELECT
                linenumber = controlref(controllevel)
                GOTO errmes
            END IF

            IF ideindentsubs THEN
                controllevel = controllevel + 1
                controltype(controllevel) = 32
                controlref(controllevel) = linenumber
            END IF

            subfunc = RTRIM$(id.callname) 'SUB_..."
            IF id.subfunc = 1 THEN subfuncoriginalname$ = "FUNCTION " ELSE subfuncoriginalname$ = "SUB "
            subfuncoriginalname$ = subfuncoriginalname$ + RTRIM$(id.cn)
            subfuncn = subfuncn + 1
            closedsubfunc = 0
            subfuncid = targetid

            subfuncret$ = ""

            DataTxtBuf = OpenBuffer%("O", tmpdir$ + "data" + str2$(subfuncn) + ".txt")
            FreeTxtBuf = OpenBuffer%("O", tmpdir$ + "free" + str2$(subfuncn) + ".txt")
            RetTxtBuf = OpenBuffer%("O", tmpdir$ + "ret" + str2$(subfuncn) + ".txt")
            defdatahandle = DataTxtBuf
            WriteBufLine RetTxtBuf, "if (next_return_point){"
            WriteBufLine RetTxtBuf, "next_return_point--;"
            WriteBufLine RetTxtBuf, "switch(return_point[next_return_point]){"
            WriteBufLine RetTxtBuf, "case 0:"
            WriteBufLine RetTxtBuf, "error(3);" 'return without gosub!
            WriteBufLine RetTxtBuf, "break;"

            declibjmp1:

            IF declaringlibrary THEN
                IF sfdeclare = 0 AND indirectlibrary = 0 THEN
                    RegTxtBuf = OpenBuffer%("O", tmpdir$ + "regsf_ignore.txt")
                END IF
                IF sfdeclare = 1 AND customtypelibrary = 0 AND dynamiclibrary = 0 AND indirectlibrary = 0 THEN
                    WriteBufLine RegTxtBuf, "#include " + CHR$(34) + "externtype" + str2(ResolveStaticFunctions + 1) + ".txt" + CHR$(34)
                    fh = FREEFILE: OPEN tmpdir$ + "externtype" + str2(ResolveStaticFunctions + 1) + ".txt" FOR OUTPUT AS #fh: CLOSE #fh
                END IF
            END IF




            IF sf = 1 THEN
                rettyp = id.ret
                t$ = typ2ctyp$(id.ret, "")
                IF Error_Happened THEN GOTO errmes
                IF t$ = "qbs" THEN t$ = "qbs*"

                IF declaringlibrary THEN
                    IF rettyp AND ISSTRING THEN
                        t$ = "char*"
                    END IF
                END IF

                IF declaringlibrary <> 0 AND dynamiclibrary <> 0 THEN
                    IF os$ = "WIN" THEN
                        WriteBufRawData RegTxtBuf, "typedef " + t$ + " (CALLBACK* DLLCALL_" + removecast$(RTRIM$(id.callname)) + ")("
                    END IF
                    IF os$ = "LNX" THEN
                        WriteBufRawData RegTxtBuf, "typedef " + t$ + " (*DLLCALL_" + removecast$(RTRIM$(id.callname)) + ")("
                    END IF
                ELSEIF declaringlibrary <> 0 AND customtypelibrary <> 0 THEN
                    WriteBufRawData RegTxtBuf, "typedef " + t$ + " CUSTOMCALL_" + removecast$(RTRIM$(id.callname)) + "("
                ELSE
                    WriteBufRawData RegTxtBuf, t$ + " " + removecast$(RTRIM$(id.callname)) + "("
                END IF
                IF declaringlibrary THEN GOTO declibjmp2
                WriteBufRawData MainTxtBuf, t$ + " " + removecast$(RTRIM$(id.callname)) + "("

                'create variable to return result
                'if type wasn't specified, define it
                IF symbol$ = "" THEN
                    a = ASC(UCASE$(e$)): IF a = 95 THEN a = 91
                    a = a - 64 'so A=1, Z=27 and _=28
                    symbol$ = defineextaz(a)
                END IF
                reginternalvariable = 1
                ignore = dim2(e$, symbol$, 0, "")
                IF Error_Happened THEN GOTO errmes
                reginternalvariable = 0
                'the following line stops the return variable from being free'd before being returned
                FreeTxtBuf = OpenBuffer%("O", tmpdir$ + "free" + str2$(subfuncn) + ".txt")
                'create return
                IF (rettyp AND ISSTRING) THEN
                    r$ = refer$(str2$(currentid), id.t, 1)
                    IF Error_Happened THEN GOTO errmes
                    subfuncret$ = subfuncret$ + "qbs_maketmp(" + r$ + ");"
                    subfuncret$ = subfuncret$ + "return " + r$ + ";"
                ELSE
                    r$ = refer$(str2$(currentid), id.t, 0)
                    IF Error_Happened THEN GOTO errmes
                    subfuncret$ = "return " + r$ + ";"
                END IF
            ELSE

                IF declaringlibrary <> 0 AND dynamiclibrary <> 0 THEN
                    IF os$ = "WIN" THEN
                        WriteBufRawData RegTxtBuf, "typedef void (CALLBACK* DLLCALL_" + removecast$(RTRIM$(id.callname)) + ")("
                    END IF
                    IF os$ = "LNX" THEN
                        WriteBufRawData RegTxtBuf, "typedef void (*DLLCALL_" + removecast$(RTRIM$(id.callname)) + ")("
                    END IF
                ELSEIF declaringlibrary <> 0 AND customtypelibrary <> 0 THEN
                    WriteBufRawData RegTxtBuf, "typedef void CUSTOMCALL_" + removecast$(RTRIM$(id.callname)) + "("
                ELSE
                    WriteBufRawData RegTxtBuf, "void " + removecast$(RTRIM$(id.callname)) + "("
                END IF
                IF declaringlibrary THEN GOTO declibjmp2
                WriteBufRawData MainTxtBuf, "void " + removecast$(RTRIM$(id.callname)) + "("
            END IF
            declibjmp2:

            addstatic2layout = 0
            staticsf = 0
            e$ = getelement$(a$, n)
            IF e$ = "STATIC" THEN
                IF declaringlibrary THEN a$ = "STATIC cannot be used in a library declaration": GOTO errmes
                addstatic2layout = 1
                staticsf = 2
                a$ = LEFT$(a$, LEN(a$) - 7): n = n - 1 'remove STATIC
            END IF

            'check items to pass
            params = 0
            AllowLocalName = 1
            IF n > 2 THEN
                e$ = getelement$(a$, 3)
                IF e$ <> "(" THEN a$ = "Expected (": GOTO errmes
                e$ = getelement$(a$, n)
                IF e$ <> ")" THEN a$ = "Expected )": GOTO errmes
                l$ = l$ + sp + "("
                IF n = 4 THEN GOTO nosfparams2
                IF n < 4 THEN a$ = "Expected ( ... )": GOTO errmes
                B = 0
                a2$ = ""
                FOR i = 4 TO n - 1
                    e$ = getelement$(ca$, i)
                    IF e$ = "(" THEN B = B + 1
                    IF e$ = ")" THEN B = B - 1
                    IF e$ = "," AND B = 0 THEN
                        IF i = n - 1 THEN a$ = "Expected , ... )": GOTO errmes
                        getlastparam2:
                        IF a2$ = "" THEN a$ = "Expected ... ,": GOTO errmes
                        a2$ = LEFT$(a2$, LEN(a2$) - 1)
                        'possible format: [BYVAL]a[%][(1)][AS][type]
                        params = params + 1
                        glinkid = targetid
                        glinkarg = params



                        IF params > 1 THEN
                            WriteBufRawData RegTxtBuf, ","

                            IF declaringlibrary = 0 THEN
                                WriteBufRawData MainTxtBuf, ","
                            END IF

                        END IF
                        n2 = numelements(a2$)
                        array = 0
                        t2$ = ""
                        e$ = getelement$(a2$, 1)

                        byvalue = 0
                        IF UCASE$(e$) = "BYVAL" THEN
                            IF declaringlibrary = 0 THEN a$ = "BYVAL can only be used with DECLARE LIBRARY": GOTO errmes
                            byvalue = 1: a2$ = RIGHT$(a2$, LEN(a2$) - 6)
                            IF RIGHT$(l$, 1) = "(" THEN l$ = l$ + sp2 + SCase$("ByVal") ELSE l$ = l$ + sp + SCase$("Byval")
                            n2 = numelements(a2$): e$ = getelement$(a2$, 1)
                        END IF

                        IF RIGHT$(l$, 1) = "(" THEN l$ = l$ + sp2 + e$ ELSE l$ = l$ + sp + e$

                        n2$ = e$
                        dimmethod = 0


                        symbol2$ = removesymbol$(n2$)
                        IF validname(n2$) = 0 THEN a$ = "Invalid name": GOTO errmes

                        IF Error_Happened THEN GOTO errmes
                        IF symbol2$ <> "" THEN dimmethod = 1
                        m = 0
                        FOR i2 = 2 TO n2
                            e$ = getelement$(a2$, i2)
                            IF e$ = "(" THEN
                                IF m <> 0 THEN a$ = "Syntax error - too many opening brackets": GOTO errmes
                                m = 1
                                array = 1
                                l$ = l$ + sp2 + "("
                                GOTO gotaa2
                            END IF
                            IF e$ = ")" THEN
                                IF m <> 1 THEN a$ = "Syntax error - closing bracket without opening bracket": GOTO errmes
                                m = 2
                                l$ = l$ + sp2 + ")"
                                GOTO gotaa2
                            END IF
                            IF UCASE$(e$) = "AS" THEN
                                IF m <> 0 AND m <> 2 THEN a$ = "Syntax error - check your brackets": GOTO errmes
                                m = 3
                                l$ = l$ + sp + SCase$("As")
                                GOTO gotaa2
                            END IF
                            IF m = 1 THEN l$ = l$ + sp + e$: GOTO gotaa2 'ignore contents of option bracket telling how many dimensions (add to layout as is)
                            IF m <> 3 THEN a$ = "Syntax error - check your brackets": GOTO errmes
                            IF t2$ = "" THEN t2$ = e$ ELSE t2$ = t2$ + " " + e$
                            gotaa2:
                        NEXT i2
                        IF m = 1 THEN a$ = "Syntax error - check your brackets": GOTO errmes
                        IF symbol2$ <> "" AND t2$ <> "" THEN a$ = "Syntax error - check parameter types": GOTO errmes


                        IF LEN(t2$) THEN 'add type-name after AS
                            t2$ = UCASE$(t2$)
                            t3$ = t2$
                            typ = typname2typ(t3$)
                            IF Error_Happened THEN GOTO errmes
                            IF typ = 0 THEN a$ = "Undefined type": GOTO errmes
                            IF typ AND ISUDT THEN
                                IF RTRIM$(udtxcname(typ AND 511)) = "_MEM" AND UCASE$(t3$) = "MEM" AND qb64prefix_set = 1 THEN
                                    t3$ = MID$(RTRIM$(udtxcname(typ AND 511)), 2)
                                ELSE
                                    t3$ = RTRIM$(udtxcname(typ AND 511))
                                END IF
                                l$ = l$ + sp + t3$
                            ELSE
                                FOR t3i = 1 TO LEN(t3$)
                                    IF ASC(t3$, t3i) = 32 THEN ASC(t3$, t3i) = ASC(sp)
                                NEXT
                                t3$ = SCase2$(t3$)
                                l$ = l$ + sp + t3$
                            END IF
                        END IF

                        IF t2$ = "" THEN t2$ = symbol2$
                        IF t2$ = "" THEN
                            IF LEFT$(n2$, 1) = "_" THEN v = 27 ELSE v = ASC(UCASE$(n2$)) - 64
                            t2$ = defineaz(v)
                            dimmethod = 1
                        END IF




                        IF array = 1 THEN
                            IF declaringlibrary THEN a$ = "Arrays cannot be passed to a library": GOTO errmes
                            dimsfarray = 1
                            'note: id2.nele is currently 0
                            nelereq = ASC(MID$(id2.nelereq, params, 1))
                            IF nelereq THEN
                                nele = nelereq
                                MID$(id2.nele, params, 1) = CHR$(nele)

                                ids(targetid) = id2

                                ignore = dim2(n2$, t2$, dimmethod, str2$(nele))
                                IF Error_Happened THEN GOTO errmes
                            ELSE
                                nele = 1
                                MID$(id2.nele, params, 1) = CHR$(nele)

                                ids(targetid) = id2

                                ignore = dim2(n2$, t2$, dimmethod, "?")
                                IF Error_Happened THEN GOTO errmes
                            END IF

                            dimsfarray = 0
                            r$ = refer$(str2$(currentid), id.t, 1)
                            IF Error_Happened THEN GOTO errmes
                            WriteBufRawData RegTxtBuf, "ptrszint*" + r$
                            WriteBufRawData MainTxtBuf, "ptrszint*" + r$
                        ELSE

                            IF declaringlibrary THEN
                                'is it a udt?
                                FOR xx = 1 TO lasttype
                                    IF t2$ = RTRIM$(udtxname(xx)) THEN
                                        WriteBufLine RegTxtBuf, "void*"
                                        GOTO decudt
                                    ELSEIF RTRIM$(udtxname(xx)) = "_MEM" AND t2$ = "MEM" AND qb64prefix_set = 1 THEN
                                        WriteBufLine RegTxtBuf, "void*"
                                        GOTO decudt
                                    END IF
                                NEXT
                                t$ = typ2ctyp$(0, t2$)

                                IF Error_Happened THEN GOTO errmes
                                IF t$ = "qbs" THEN
                                    t$ = "char*"
                                    IF byvalue = 1 THEN a$ = "STRINGs cannot be passed using BYVAL": GOTO errmes
                                    byvalue = 1 'use t$ as is
                                END IF
                                IF byvalue THEN WriteBufRawData RegTxtBuf, t$ ELSE WriteBufRawData RegTxtBuf, t$ + "*"
                                decudt:
                                GOTO declibjmp3
                            END IF

                            dimsfarray = 1
                            ignore = dim2(n2$, t2$, dimmethod, "")
                            IF Error_Happened THEN GOTO errmes


                            dimsfarray = 0
                            t$ = ""
                            typ = id.t 'the typ of the ID created by dim2

                            t$ = typ2ctyp$(typ, "")
                            IF Error_Happened THEN GOTO errmes



                            IF t$ = "" THEN a$ = "Cannot find C type to return array data": GOTO errmes
                            'searchpoint
                            'get the name of the variable
                            r$ = refer$(str2$(currentid), id.t, 1)
                            IF Error_Happened THEN GOTO errmes
                            WriteBufRawData RegTxtBuf, t$ + "*" + r$
                            WriteBufRawData MainTxtBuf, t$ + "*" + r$
                            IF t$ = "qbs" THEN
                                u$ = str2$(uniquenumber)
                                WriteBufLine DataTxtBuf, "qbs*oldstr" + u$ + "=NULL;"
                                WriteBufLine DataTxtBuf, "if(" + r$ + "->tmp||" + r$ + "->fixed||" + r$ + "->readonly){"
                                WriteBufLine DataTxtBuf, "oldstr" + u$ + "=" + r$ + ";"

                                WriteBufLine DataTxtBuf, "if (oldstr" + u$ + "->cmem_descriptor){"
                                WriteBufLine DataTxtBuf, r$ + "=qbs_new_cmem(oldstr" + u$ + "->len,0);"
                                WriteBufLine DataTxtBuf, "}else{"
                                WriteBufLine DataTxtBuf, r$ + "=qbs_new(oldstr" + u$ + "->len,0);"
                                WriteBufLine DataTxtBuf, "}"

                                WriteBufLine DataTxtBuf, "memcpy(" + r$ + "->chr,oldstr" + u$ + "->chr,oldstr" + u$ + "->len);"
                                WriteBufLine DataTxtBuf, "}"

                                WriteBufLine FreeTxtBuf, "if(oldstr" + u$ + "){"
                                WriteBufLine FreeTxtBuf, "if(oldstr" + u$ + "->fixed)qbs_set(oldstr" + u$ + "," + r$ + ");"
                                WriteBufLine FreeTxtBuf, "qbs_free(" + r$ + ");"
                                WriteBufLine FreeTxtBuf, "}"
                            END IF
                        END IF
                        declibjmp3:
                        IF i <> n - 1 THEN l$ = l$ + sp2 + ","

                        a2$ = ""
                    ELSE
                        a2$ = a2$ + e$ + sp
                        IF i = n - 1 THEN GOTO getlastparam2
                    END IF
                NEXT i
                nosfparams2:
                l$ = l$ + sp2 + ")"
            END IF 'n>2
            AllowLocalName = 0

            IF addstatic2layout THEN l$ = l$ + sp + SCase$("Static")
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$

            WriteBufLine RegTxtBuf, ");"

            IF declaringlibrary THEN GOTO declibjmp4

            WriteBufLine MainTxtBuf, "){"
            WriteBufLine MainTxtBuf, "qbs *tqbs;"
            WriteBufLine MainTxtBuf, "ptrszint tmp_long;"
            WriteBufLine MainTxtBuf, "int32 tmp_fileno;"
            WriteBufLine MainTxtBuf, "uint32 qbs_tmp_base=qbs_tmp_list_nexti;"
            WriteBufLine MainTxtBuf, "uint8 *tmp_mem_static_pointer=mem_static_pointer;"
            WriteBufLine MainTxtBuf, "uint32 tmp_cmem_sp=cmem_sp;"
            WriteBufLine MainTxtBuf, "#include " + CHR$(34) + "data" + str2$(subfuncn) + ".txt" + CHR$(34)

            'create new _MEM lock for this scope
            WriteBufLine MainTxtBuf, "mem_lock *sf_mem_lock;" 'MUST not be static for recursion reasons
            WriteBufLine MainTxtBuf, "new_mem_lock();"
            WriteBufLine MainTxtBuf, "sf_mem_lock=mem_lock_tmp;"
            WriteBufLine MainTxtBuf, "sf_mem_lock->type=3;"

            IF vWatchOn = 1 THEN
                WriteBufLine MainTxtBuf, "*__LONG_VWATCH_SUBLEVEL=*__LONG_VWATCH_SUBLEVEL+ 1 ;"
                IF subfunc <> "SUB_VWATCH" THEN
                    inclinenump$ = ""
                    IF inclinenumber(inclevel) THEN
                        thisincname$ = getfilepath$(incname$(inclevel))
                        thisincname$ = MID$(incname$(inclevel), LEN(thisincname$) + 1)
                        inclinenump$ = "(" + thisincname$ + "," + STR$(inclinenumber(inclevel)) + ") "
                    END IF

                    WriteBufLine MainTxtBuf, "qbs_set(__STRING_VWATCH_SUBNAME,qbs_new_txt_len(" + CHR$(34) + inclinenump$ + subfuncoriginalname$ + CHR$(34) + "," + str2$(LEN(inclinenump$ + subfuncoriginalname$)) + "));"
                    WriteBufLine MainTxtBuf, "qbs_cleanup(qbs_tmp_base,0);"
                    WriteBufLine MainTxtBuf, "qbs_set(__STRING_VWATCH_INTERNALSUBNAME,qbs_new_txt_len(" + CHR$(34) + subfunc + CHR$(34) + "," + str2$(LEN(subfunc)) + "));"
                    WriteBufLine MainTxtBuf, "qbs_cleanup(qbs_tmp_base,0);"
                    WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER=-2; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars);"
                END IF
            END IF

            WriteBufLine MainTxtBuf, "if (new_error) goto exit_subfunc;"

            'statementn = statementn + 1
            'if nochecks=0 then WriteBufLine MainTxtBuf, "S_" + str2$(statementn) + ":;"

            dimstatic = staticsf

            declibjmp4:

            IF declaringlibrary THEN

                IF customtypelibrary THEN

                    callname$ = removecast$(RTRIM$(id2.callname))

                    WriteBufLine RegTxtBuf, "CUSTOMCALL_" + callname$ + " *" + callname$ + "=NULL;"

                    IF subfuncn THEN
                        f = OpenBuffer%("A", tmpdir$ + "maindata.txt")
                    ELSE
                        f = DataTxtBuf
                    END IF

                    WriteBufLine f, callname$ + "=(CUSTOMCALL_" + callname$ + "*)&" + aliasname$ + ";"

                    'if no header exists to make the external function available, the function definition must be found
                    IF sfheader = 0 AND sfdeclare <> 0 THEN
                        ResolveStaticFunctions = ResolveStaticFunctions + 1
                        'expand array if necessary
                        IF ResolveStaticFunctions > UBOUND(ResolveStaticFunction_Name) THEN
                            REDIM _PRESERVE ResolveStaticFunction_Name(1 TO ResolveStaticFunctions + 100) AS STRING
                            REDIM _PRESERVE ResolveStaticFunction_File(1 TO ResolveStaticFunctions + 100) AS STRING
                            REDIM _PRESERVE ResolveStaticFunction_Method(1 TO ResolveStaticFunctions + 100) AS LONG
                        END IF
                        ResolveStaticFunction_File(ResolveStaticFunctions) = libname$
                        ResolveStaticFunction_Name(ResolveStaticFunctions) = aliasname$
                        ResolveStaticFunction_Method(ResolveStaticFunctions) = 1
                    END IF 'sfheader=0

                END IF

                IF dynamiclibrary THEN
                    IF sfdeclare THEN

                        WriteBufLine RegTxtBuf, "DLLCALL_" + removecast$(RTRIM$(id2.callname)) + " " + removecast$(RTRIM$(id2.callname)) + "=NULL;"

                        IF subfuncn THEN
                            f = OpenBuffer%("A", tmpdir$ + "maindata.txt")
                        ELSE
                            f = DataTxtBuf
                        END IF

                        WriteBufLine f, "if (!" + removecast$(RTRIM$(id2.callname)) + "){"
                        IF os$ = "WIN" THEN
                            WriteBufLine f, removecast$(RTRIM$(id2.callname)) + "=(DLLCALL_" + removecast$(RTRIM$(id2.callname)) + ")GetProcAddress(DLL_" + DLLname$ + "," + CHR$(34) + aliasname$ + CHR$(34) + ");"
                            WriteBufLine f, "if (!" + removecast$(RTRIM$(id2.callname)) + ") error(260);"
                        END IF
                        IF os$ = "LNX" THEN
                            WriteBufLine f, removecast$(RTRIM$(id2.callname)) + "=(DLLCALL_" + removecast$(RTRIM$(id2.callname)) + ")dlsym(DLL_" + DLLname$ + "," + CHR$(34) + aliasname$ + CHR$(34) + ");"
                            WriteBufLine f, "if (dlerror()) error(260);"
                        END IF
                        WriteBufLine f, "}"

                    END IF 'sfdeclare
                END IF 'dynamic

                IF sfdeclare = 1 AND customtypelibrary = 0 AND dynamiclibrary = 0 AND indirectlibrary = 0 THEN
                    ResolveStaticFunctions = ResolveStaticFunctions + 1
                    'expand array if necessary
                    IF ResolveStaticFunctions > UBOUND(ResolveStaticFunction_Name) THEN
                        REDIM _PRESERVE ResolveStaticFunction_Name(1 TO ResolveStaticFunctions + 100) AS STRING
                        REDIM _PRESERVE ResolveStaticFunction_File(1 TO ResolveStaticFunctions + 100) AS STRING
                        REDIM _PRESERVE ResolveStaticFunction_Method(1 TO ResolveStaticFunctions + 100) AS LONG
                    END IF
                    ResolveStaticFunction_File(ResolveStaticFunctions) = libname$
                    ResolveStaticFunction_Name(ResolveStaticFunctions) = aliasname$
                    ResolveStaticFunction_Method(ResolveStaticFunctions) = 2
                END IF

                IF sfdeclare = 0 AND indirectlibrary = 0 THEN
                    RegTxtBuf = OpenBuffer%("A", tmpdir$ + "regsf.txt")
                END IF

            END IF 'declaring library

            GOTO finishednonexec
        END IF
    END IF

    'END SUB/FUNCTION
    IF n = 2 THEN
        IF firstelement$ = "END" THEN
            sf = 0
            IF secondelement$ = "FUNCTION" THEN sf = 1
            IF secondelement$ = "SUB" THEN sf = 2
            IF sf THEN

                IF LEN(subfunc) = 0 THEN a$ = "END " + secondelement$ + " without " + secondelement$: GOTO errmes

                'check for open controls (copy #3)
                IF controllevel <> 0 AND controltype(controllevel) <> 6 AND controltype(controllevel) <> 32 THEN 'It's OK for subs to be inside $IF blocks
                    a$ = "Unidentified open control block"
                    SELECT CASE controltype(controllevel)
                        CASE 1: a$ = "IF without END IF"
                        CASE 2: a$ = "FOR without NEXT"
                        CASE 3, 4: a$ = "DO without LOOP"
                        CASE 5: a$ = "WHILE without WEND"
                        CASE 10 TO 19: a$ = "SELECT CASE without END SELECT"
                    END SELECT
                    linenumber = controlref(controllevel)
                    GOTO errmes
                END IF

                IF controltype(controllevel) = 32 AND ideindentsubs THEN
                    controltype(controllevel) = 0
                    controllevel = controllevel - 1
                END IF

                IF LEFT$(subfunc, 4) = "SUB_" THEN secondelement$ = SCase$("Sub") ELSE secondelement$ = SCase$("Function")
                l$ = SCase$("End") + sp + secondelement$
                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$

                IF vWatchOn = 1 THEN
                    vWatchVariable "", 1
                END IF

                staticarraylist = "": staticarraylistn = 0 'remove previously listed arrays
                dimstatic = 0
                WriteBufLine MainTxtBuf, "exit_subfunc:;"
                IF vWatchOn = 1 THEN
                    IF NoChecks = 0 AND inclinenumber(inclevel) = 0 THEN
                        vWatchAddLabel linenumber, 0
                        WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
                        vWatchAddLabel 0, -1
                    END IF
                    WriteBufLine MainTxtBuf, "*__LONG_VWATCH_SUBLEVEL=*__LONG_VWATCH_SUBLEVEL- 1 ;"

                    IF inclinenumber(inclevel) = 0 AND firstLineNumberLabelvWatch > 0 THEN
                        WriteBufLine MainTxtBuf, "goto VWATCH_SKIPSETNEXTLINE;"
                        WriteBufLine MainTxtBuf, "VWATCH_SETNEXTLINE:;"
                        WriteBufLine MainTxtBuf, "switch (*__LONG_VWATCH_GOTO) {"
                        FOR i = firstLineNumberLabelvWatch TO lastLineNumberLabelvWatch
                            WHILE i > LEN(vWatchUsedLabels)
                                vWatchUsedLabels = vWatchUsedLabels + SPACE$(1000)
                                vWatchUsedSkipLabels = vWatchUsedSkipLabels + SPACE$(1000)
                            WEND
                            IF ASC(vWatchUsedLabels, i) = 1 THEN
                                WriteBufLine MainTxtBuf, "    case " + str2$(i) + ":"
                                WriteBufLine MainTxtBuf, "        goto VWATCH_LABEL_" + str2$(i) + ";"
                                WriteBufLine MainTxtBuf, "        break;"
                            END IF
                        NEXT
                        WriteBufLine MainTxtBuf, "    default:"
                        WriteBufLine MainTxtBuf, "        *__LONG_VWATCH_GOTO=*__LONG_VWATCH_LINENUMBER;"
                        WriteBufLine MainTxtBuf, "        goto VWATCH_SETNEXTLINE;"
                        WriteBufLine MainTxtBuf, "}"

                        WriteBufLine MainTxtBuf, "VWATCH_SKIPLINE:;"
                        WriteBufLine MainTxtBuf, "switch (*__LONG_VWATCH_GOTO) {"
                        FOR i = firstLineNumberLabelvWatch TO lastLineNumberLabelvWatch
                            IF ASC(vWatchUsedSkipLabels, i) = 1 THEN
                                WriteBufLine MainTxtBuf, "    case -" + str2$(i) + ":"
                                WriteBufLine MainTxtBuf, "        goto VWATCH_SKIPLABEL_" + str2$(i) + ";"
                                WriteBufLine MainTxtBuf, "        break;"
                            END IF
                        NEXT
                        WriteBufLine MainTxtBuf, "}"

                        WriteBufLine MainTxtBuf, "VWATCH_SKIPSETNEXTLINE:;"
                    END IF
                    firstLineNumberLabelvWatch = 0
                END IF

                'release _MEM lock for this scope
                WriteBufLine MainTxtBuf, "free_mem_lock(sf_mem_lock);"

                WriteBufLine MainTxtBuf, "#include " + CHR$(34) + "free" + str2$(subfuncn) + ".txt" + CHR$(34)
                WriteBufLine MainTxtBuf, "if ((tmp_mem_static_pointer>=mem_static)&&(tmp_mem_static_pointer<=mem_static_limit)) mem_static_pointer=tmp_mem_static_pointer; else mem_static_pointer=mem_static;"
                WriteBufLine MainTxtBuf, "cmem_sp=tmp_cmem_sp;"
                IF subfuncret$ <> "" THEN WriteBufLine MainTxtBuf, subfuncret$

                WriteBufLine MainTxtBuf, "}" 'skeleton sub
                'ret???.txt
                WriteBufLine RetTxtBuf, "}" 'end case
                WriteBufLine RetTxtBuf, "}"
                WriteBufLine RetTxtBuf, "error(3);" 'no valid return possible
                subfunc = ""
                closedsubfunc = -1

                'unshare temp. shared variables
                FOR i = 1 TO idn
                    IF ids(i).share AND 2 THEN ids(i).share = ids(i).share - 2
                NEXT

                FOR i = 1 TO revertmaymusthaven
                    x = revertmaymusthave(i)
                    SWAP ids(x).musthave, ids(x).mayhave
                NEXT
                revertmaymusthaven = 0

                'undeclare constants in sub/function's scope
                'constlast = constlastshared
                GOTO finishednonexec

            END IF
        END IF
    END IF



    IF n >= 1 AND firstelement$ = "CONST" THEN
        l$ = SCase$("Const")
        'DEF... do not change type, the expression is stored in a suitable type
        'based on its value if type isn't forced/specified
        IF n < 3 THEN a$ = "Expected CONST name = value/expression": GOTO errmes
        i = 2

        constdefpending:
        pending = 0

        n$ = getelement$(ca$, i): i = i + 1
        l$ = l$ + sp + n$ + sp + "="
        typeoverride = 0
        s$ = removesymbol$(n$)
        IF Error_Happened THEN GOTO errmes
        IF s$ <> "" THEN
            typeoverride = typname2typ(s$)
            IF Error_Happened THEN GOTO errmes
            IF typeoverride AND ISFIXEDLENGTH THEN a$ = "Invalid constant type": GOTO errmes
            IF typeoverride = 0 THEN a$ = "Invalid constant type": GOTO errmes
        END IF

        IF getelement$(a$, i) <> "=" THEN a$ = "Expected =": GOTO errmes
        i = i + 1

        'get expression
        e$ = ""
        B = 0
        FOR i2 = i TO n
            e2$ = getelement$(ca$, i2)
            IF e2$ = "(" THEN B = B + 1
            IF e2$ = ")" THEN B = B - 1
            IF e2$ = "," AND B = 0 THEN
                pending = 1
                i = i2 + 1
                IF i > n - 2 THEN a$ = "Expected CONST ... , name = value/expression": GOTO errmes
                EXIT FOR
            END IF
            IF LEN(e$) = 0 THEN e$ = e2$ ELSE e$ = e$ + sp + e2$
        NEXT

        e$ = fixoperationorder(e$)
        IF Error_Happened THEN GOTO errmes
        l$ = l$ + sp + tlayout$

        'Note: Actual CONST definition handled in prepass

        'Set CONST as defined
        hashname$ = n$
        hashchkflags = HASHFLAG_CONSTANT
        hashres = HashFind(hashname$, hashchkflags, hashresflags, hashresref)
        DO WHILE hashres
            IF constsubfunc(hashresref) = subfuncn THEN constdefined(hashresref) = 1: EXIT DO
            IF hashres <> 1 THEN hashres = HashFindCont(hashresflags, hashresref) ELSE hashres = 0
        LOOP

        IF pending THEN l$ = l$ + sp2 + ",": GOTO constdefpending

        layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$

        GOTO finishednonexec
    END IF

    predefine:
    IF n >= 2 THEN
        asreq = 0
        IF firstelement$ = "DEFINT" THEN l$ = SCase$("DefInt"): a$ = a$ + sp + "AS" + sp + "INTEGER": n = n + 2: GOTO definetype
        IF firstelement$ = "DEFLNG" THEN l$ = SCase$("DefLng"): a$ = a$ + sp + "AS" + sp + "LONG": n = n + 2: GOTO definetype
        IF firstelement$ = "DEFSNG" THEN l$ = SCase$("DefSng"): a$ = a$ + sp + "AS" + sp + "SINGLE": n = n + 2: GOTO definetype
        IF firstelement$ = "DEFDBL" THEN l$ = SCase$("DefDbl"): a$ = a$ + sp + "AS" + sp + "DOUBLE": n = n + 2: GOTO definetype
        IF firstelement$ = "DEFSTR" THEN l$ = SCase$("DefStr"): a$ = a$ + sp + "AS" + sp + "STRING": n = n + 2: GOTO definetype
        IF firstelement$ = "_DEFINE" OR (firstelement$ = "DEFINE" AND qb64prefix_set = 1) THEN
            asreq = 1
            IF firstelement$ = "_DEFINE" THEN l$ = SCase$("_Define") ELSE l$ = SCase$("Define")
            definetype:
            'get type from rhs
            typ$ = ""
            typ2$ = ""
            t$ = ""
            FOR i = n TO 2 STEP -1
                t$ = getelement$(a$, i)
                IF t$ = "AS" THEN EXIT FOR
                typ$ = t$ + " " + typ$
                typ2$ = t$ + sp + typ2$
            NEXT
            typ$ = RTRIM$(typ$)
            IF t$ <> "AS" THEN a$ = qb64prefix$ + "DEFINE: Expected ... AS ...": GOTO errmes
            IF i = n OR i = 2 THEN a$ = qb64prefix$ + "DEFINE: Expected ... AS ...": GOTO errmes


            n = i - 1
            'the data is from element 2 to element n
            i = 2 - 1
            definenext:
            'expects an alphabet letter or underscore
            i = i + 1: e$ = getelement$(a$, i): E = ASC(UCASE$(e$))
            IF LEN(e$) > 1 THEN a$ = qb64prefix$ + "DEFINE: Expected an alphabet letter or the underscore character (_)": GOTO errmes
            IF E <> 95 AND (E > 90 OR E < 65) THEN a$ = qb64prefix$ + "DEFINE: Expected an alphabet letter or the underscore character (_)": GOTO errmes
            IF E = 95 THEN E = 27 ELSE E = E - 64
            defineaz(E) = typ$
            defineextaz(E) = type2symbol(typ$)
            IF Error_Happened THEN GOTO errmes
            firste = E
            l$ = l$ + sp + e$

            IF i = n THEN
                IF predefining = 1 THEN GOTO predefined
                IF asreq THEN l$ = l$ + sp + SCase$("As") + sp + typ2$
                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                GOTO finishednonexec
            END IF

            'expects "-" or ","
            i = i + 1: e$ = getelement$(a$, i)
            IF e$ <> "-" AND e$ <> "," THEN a$ = qb64prefix$ + "DEFINE: Expected - or ,": GOTO errmes
            IF e$ = "-" THEN
                l$ = l$ + sp2 + "-"
                IF i = n THEN a$ = qb64prefix$ + "DEFINE: Syntax incomplete": GOTO errmes
                'expects an alphabet letter or underscore
                i = i + 1: e$ = getelement$(a$, i): E = ASC(UCASE$(e$))
                IF LEN(e$) > 1 THEN a$ = qb64prefix$ + "DEFINE: Expected an alphabet letter or the underscore character (_)": GOTO errmes
                IF E <> 95 AND (E > 90 OR E < 65) THEN a$ = qb64prefix$ + "DEFINE: Expected an alphabet letter or the underscore character (_)": GOTO errmes
                IF E = 95 THEN E = 27 ELSE E = E - 64
                IF firste > E THEN SWAP E, firste
                FOR e2 = firste TO E
                    defineaz(e2) = typ$
                    defineextaz(e2) = type2symbol(typ$)
                    IF Error_Happened THEN GOTO errmes
                NEXT
                l$ = l$ + sp2 + e$
                IF i = n THEN
                    IF predefining = 1 THEN GOTO predefined
                    IF asreq THEN l$ = l$ + sp + SCase$("As") + sp + typ2$
                    layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                    GOTO finishednonexec
                END IF
                'expects ","
                i = i + 1: e$ = getelement$(a$, i)
                IF e$ <> "," THEN a$ = qb64prefix$ + "DEFINE: Expected ,": GOTO errmes
            END IF
            l$ = l$ + sp2 + ","
            GOTO definenext
        END IF '_DEFINE
    END IF '2
    IF predefining = 1 THEN GOTO predefined

    IF closedmain <> 0 AND subfunc = "" THEN a$ = "Statement cannot be placed between SUB/FUNCTIONs": GOTO errmes

    'executable section:

    statementn = statementn + 1


    IF n >= 1 THEN
        IF firstelement$ = "NEXT" THEN

            l$ = SCase$("Next")
            IF n = 1 THEN GOTO simplenext
            v$ = ""
            FOR i = 2 TO n
                a2$ = getelement(ca$, i)

                IF a2$ = "," THEN

                    lastnextele:
                    e$ = fixoperationorder(v$)
                    IF Error_Happened THEN GOTO errmes
                    IF LEN(l$) = 4 THEN l$ = l$ + sp + tlayout$ ELSE l$ = l$ + sp2 + "," + sp + tlayout$
                    e$ = evaluate(e$, typ)
                    IF Error_Happened THEN GOTO errmes
                    IF (typ AND ISREFERENCE) THEN
                        getid VAL(e$)
                        IF Error_Happened THEN GOTO errmes
                        IF (id.t AND ISPOINTER) THEN
                            IF (id.t AND ISSTRING) = 0 THEN
                                IF (id.t AND ISOFFSETINBITS) = 0 THEN
                                    IF (id.t AND ISARRAY) = 0 THEN
                                        GOTO fornextfoundvar2
                                    END IF
                                END IF
                            END IF
                        END IF
                    END IF
                    a$ = "Unsupported variable after NEXT": GOTO errmes
                    fornextfoundvar2:
                    simplenext:
                    IF controltype(controllevel) <> 2 THEN a$ = "NEXT without FOR": GOTO errmes
                    IF n <> 1 AND controlvalue(controllevel) <> currentid THEN a$ = "Incorrect variable after NEXT": GOTO errmes
                    WriteBufLine MainTxtBuf, "fornext_continue_" + str2$(controlid(controllevel)) + ":;"
                    IF vWatchOn = 1 AND inclinenumber(inclevel) = 0 AND NoChecks = 0 THEN
                        vWatchAddLabel linenumber, 0
                        WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
                    END IF
                    WriteBufLine MainTxtBuf, "}"
                    WriteBufLine MainTxtBuf, "fornext_exit_" + str2$(controlid(controllevel)) + ":;"
                    controllevel = controllevel - 1
                    IF n = 1 THEN EXIT FOR
                    v$ = ""

                ELSE

                    IF LEN(v$) THEN v$ = v$ + sp + a2$ ELSE v$ = a2$
                    IF i = n THEN GOTO lastnextele

                END IF

            NEXT

            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            GOTO finishednonexec '***no error causing code, event checking done by FOR***
        END IF
    END IF



    IF n >= 1 THEN
        IF firstelement$ = "WHILE" THEN
            IF NoChecks = 0 THEN WriteBufLine MainTxtBuf, "S_" + str2$(statementn) + ":;": dynscope = 1

            'prevents code from being placed before 'CASE condition' in a SELECT CASE block
            IF SelectCaseCounter > 0 AND SelectCaseHasCaseBlock(SelectCaseCounter) = 0 THEN
                a$ = "Expected CASE expression": GOTO errmes
            END IF

            controllevel = controllevel + 1
            controlref(controllevel) = linenumber
            controltype(controllevel) = 5
            controlid(controllevel) = uniquenumber
            IF n >= 2 THEN
                e$ = fixoperationorder(getelements$(ca$, 2, n))
                IF Error_Happened THEN GOTO errmes
                l$ = SCase$("While") + sp + tlayout$
                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                e$ = evaluate(e$, typ)
                IF Error_Happened THEN GOTO errmes
                IF (typ AND ISREFERENCE) THEN e$ = refer$(e$, typ, 0)
                IF Error_Happened THEN GOTO errmes
                IF stringprocessinghappened THEN e$ = cleanupstringprocessingcall$ + e$ + ")"
                IF (typ AND ISSTRING) THEN a$ = "WHILE ERROR! Cannot accept a STRING type.": GOTO errmes
                IF NoChecks = 0 AND vWatchOn = 1 AND inclinenumber(inclevel) = 0 THEN
                    vWatchAddLabel linenumber, 0
                    WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
                END IF
                WriteBufLine MainTxtBuf, "while((" + e$ + ")||new_error){"
            ELSE
                a$ = "WHILE ERROR! Expected expression after WHILE.": GOTO errmes
            END IF

            GOTO finishedline
        END IF
    END IF

    IF n = 1 THEN
        IF firstelement$ = "WEND" THEN


            IF controltype(controllevel) <> 5 THEN a$ = "WEND without WHILE": GOTO errmes
            WriteBufLine MainTxtBuf, "ww_continue_" + str2$(controlid(controllevel)) + ":;"
            WriteBufLine MainTxtBuf, "}"
            WriteBufLine MainTxtBuf, "ww_exit_" + str2$(controlid(controllevel)) + ":;"
            controllevel = controllevel - 1
            l$ = SCase$("Wend")
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            GOTO finishednonexec '***no error causing code, event checking done by WHILE***
        END IF
    END IF





    IF n >= 1 THEN
        IF firstelement$ = "DO" THEN
            IF NoChecks = 0 THEN WriteBufLine MainTxtBuf, "S_" + str2$(statementn) + ":;": dynscope = 1

            'prevents code from being placed before 'CASE condition' in a SELECT CASE block
            IF SelectCaseCounter > 0 AND SelectCaseHasCaseBlock(SelectCaseCounter) = 0 THEN
                a$ = "Expected CASE expression": GOTO errmes
            END IF

            controllevel = controllevel + 1
            controlref(controllevel) = linenumber
            l$ = SCase$("Do")
            IF n >= 2 THEN
                whileuntil = 0
                IF secondelement$ = "WHILE" THEN whileuntil = 1: l$ = l$ + sp + SCase$("While")
                IF secondelement$ = "UNTIL" THEN whileuntil = 2: l$ = l$ + sp + SCase$("Until")
                IF whileuntil = 0 THEN a$ = "DO ERROR! Expected WHILE or UNTIL after DO.": GOTO errmes
                IF whileuntil > 0 AND n = 2 THEN a$ = "Condition expected after WHILE/UNTIL": GOTO errmes
                e$ = fixoperationorder(getelements$(ca$, 3, n))
                IF Error_Happened THEN GOTO errmes
                l$ = l$ + sp + tlayout$
                e$ = evaluate(e$, typ)
                IF Error_Happened THEN GOTO errmes
                IF (typ AND ISREFERENCE) THEN e$ = refer$(e$, typ, 0)
                IF Error_Happened THEN GOTO errmes
                IF stringprocessinghappened THEN e$ = cleanupstringprocessingcall$ + e$ + ")"
                IF (typ AND ISSTRING) THEN a$ = "DO ERROR! Cannot accept a STRING type.": GOTO errmes
                IF whileuntil = 1 THEN WriteBufLine MainTxtBuf, "while((" + e$ + ")||new_error){" ELSE WriteBufLine MainTxtBuf, "while((!(" + e$ + "))||new_error){"
                IF NoChecks = 0 AND vWatchOn = 1 AND inclinenumber(inclevel) = 0 THEN
                    vWatchAddLabel linenumber, 0
                    WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
                END IF
                controltype(controllevel) = 4
            ELSE
                controltype(controllevel) = 3
                IF vWatchOn = 1 AND inclinenumber(inclevel) = 0 AND NoChecks = 0 THEN
                    vWatchAddLabel linenumber, 0
                    WriteBufLine MainTxtBuf, "do{*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
                ELSE
                    WriteBufLine MainTxtBuf, "do{"
                END IF
            END IF
            controlid(controllevel) = uniquenumber
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            GOTO finishedline
        END IF
    END IF

    IF n >= 1 THEN
        IF firstelement$ = "LOOP" THEN
            l$ = SCase$("Loop")
            IF controltype(controllevel) <> 3 AND controltype(controllevel) <> 4 THEN a$ = "PROGRAM FLOW ERROR!": GOTO errmes
            IF n >= 2 THEN
                IF NoChecks = 0 THEN WriteBufLine MainTxtBuf, "S_" + str2$(statementn) + ":;": dynscope = 1
                IF controltype(controllevel) = 4 THEN a$ = "PROGRAM FLOW ERROR!": GOTO errmes
                whileuntil = 0
                IF secondelement$ = "WHILE" THEN whileuntil = 1: l$ = l$ + sp + SCase$("While")
                IF secondelement$ = "UNTIL" THEN whileuntil = 2: l$ = l$ + sp + SCase$("Until")
                IF whileuntil = 0 THEN a$ = "LOOP ERROR! Expected WHILE or UNTIL after LOOP.": GOTO errmes
                IF whileuntil > 0 AND n = 2 THEN a$ = "Condition expected after WHILE/UNTIL": GOTO errmes
                e$ = fixoperationorder(getelements$(ca$, 3, n))
                IF Error_Happened THEN GOTO errmes
                l$ = l$ + sp + tlayout$
                e$ = evaluate(e$, typ)
                IF Error_Happened THEN GOTO errmes
                IF (typ AND ISREFERENCE) THEN e$ = refer$(e$, typ, 0)
                IF Error_Happened THEN GOTO errmes
                IF stringprocessinghappened THEN e$ = cleanupstringprocessingcall$ + e$ + ")"
                IF (typ AND ISSTRING) THEN a$ = "LOOP ERROR! Cannot accept a STRING type.": GOTO errmes
                WriteBufLine MainTxtBuf, "dl_continue_" + str2$(controlid(controllevel)) + ":;"
                IF NoChecks = 0 AND vWatchOn = 1 AND inclinenumber(inclevel) = 0 THEN
                    vWatchAddLabel linenumber, 0
                    WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
                END IF
                IF whileuntil = 1 THEN WriteBufLine MainTxtBuf, "}while((" + e$ + ")&&(!new_error));" ELSE WriteBufLine MainTxtBuf, "}while((!(" + e$ + "))&&(!new_error));"
            ELSE
                WriteBufLine MainTxtBuf, "dl_continue_" + str2$(controlid(controllevel)) + ":;"

                IF NoChecks = 0 AND vWatchOn = 1 AND inclinenumber(inclevel) = 0 THEN
                    vWatchAddLabel linenumber, 0
                    WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
                END IF

                IF controltype(controllevel) = 4 THEN
                    WriteBufLine MainTxtBuf, "}"
                ELSE
                    WriteBufLine MainTxtBuf, "}while(1);" 'infinite loop!
                END IF
            END IF
            WriteBufLine MainTxtBuf, "dl_exit_" + str2$(controlid(controllevel)) + ":;"
            controllevel = controllevel - 1
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            IF n = 1 THEN GOTO finishednonexec '***no error causing code, event checking done by DO***
            GOTO finishedline
        END IF
    END IF









    IF n >= 1 THEN
        IF firstelement$ = "FOR" THEN
            IF NoChecks = 0 THEN WriteBufLine MainTxtBuf, "S_" + str2$(statementn) + ":;": dynscope = 1

            l$ = SCase$("For")

            'prevents code from being placed before 'CASE condition' in a SELECT CASE block
            IF SelectCaseCounter > 0 AND SelectCaseHasCaseBlock(SelectCaseCounter) = 0 THEN
                a$ = "Expected CASE expression": GOTO errmes
            END IF

            controllevel = controllevel + 1
            controlref(controllevel) = linenumber
            controltype(controllevel) = 2
            controlid(controllevel) = uniquenumber

            v$ = ""
            startvalue$ = ""
            p3$ = "1": stepused = 0
            p2$ = ""
            mode = 0
            E = 0
            FOR i = 2 TO n
                e$ = getelement$(a$, i)
                IF e$ = "=" THEN
                    IF mode <> 0 THEN E = 1: EXIT FOR
                    mode = 1
                    v$ = getelements$(ca$, 2, i - 1)
                    equpos = i
                END IF
                IF e$ = "TO" THEN
                    IF mode <> 1 THEN E = 1: EXIT FOR
                    mode = 2
                    startvalue$ = getelements$(ca$, equpos + 1, i - 1)
                    topos = i
                END IF
                IF e$ = "STEP" THEN
                    IF mode <> 2 THEN E = 1: EXIT FOR
                    mode = 3
                    stepused = 1
                    p2$ = getelements$(ca$, topos + 1, i - 1)
                    p3$ = getelements$(ca$, i + 1, n)
                    EXIT FOR
                END IF
            NEXT
            IF mode < 2 THEN E = 1
            IF p2$ = "" THEN p2$ = getelements$(ca$, topos + 1, n)
            IF LEN(v$) = 0 OR LEN(startvalue$) = 0 OR LEN(p2$) = 0 THEN E = 1
            IF E <> 0 AND mode < 3 THEN a$ = "Expected FOR name = start TO end": GOTO errmes
            IF E THEN a$ = "Expected FOR name = start TO end STEP increment": GOTO errmes

            e$ = fixoperationorder(v$)
            IF Error_Happened THEN GOTO errmes
            l$ = l$ + sp + tlayout$
            e$ = evaluate(e$, typ)
            IF Error_Happened THEN GOTO errmes
            IF (typ AND ISREFERENCE) THEN
                getid VAL(e$)
                IF Error_Happened THEN GOTO errmes
                IF (id.t AND ISPOINTER) THEN
                    IF (id.t AND ISSTRING) = 0 THEN
                        IF (id.t AND ISOFFSETINBITS) = 0 THEN
                            IF (id.t AND ISARRAY) = 0 THEN
                                GOTO fornextfoundvar
                            END IF
                        END IF
                    END IF
                END IF
            END IF
            a$ = "Unsupported variable used in FOR statement": GOTO errmes
            fornextfoundvar:
            controlvalue(controllevel) = currentid
            v$ = e$

            'find C++ datatype to match variable
            'markup to cater for greater range/accuracy
            ctype$ = ""
            ctyp = typ - ISPOINTER
            bits = typ AND 511
            IF (typ AND ISFLOAT) THEN
                IF bits = 32 THEN ctype$ = "double": ctyp = 64& + ISFLOAT
                IF bits = 64 THEN ctype$ = "long double": ctyp = 256& + ISFLOAT
                IF bits = 256 THEN ctype$ = "long double": ctyp = 256& + ISFLOAT
            ELSE
                IF bits = 8 THEN ctype$ = "int16": ctyp = 16&
                IF bits = 16 THEN ctype$ = "int32": ctyp = 32&
                IF bits = 32 THEN ctype$ = "int64": ctyp = 64&
                IF bits = 64 THEN ctype$ = "int64": ctyp = 64&
            END IF
            IF ctype$ = "" THEN a$ = "Unsupported variable used in FOR statement": GOTO errmes
            u$ = str2(uniquenumber)

            IF subfunc = "" THEN
                WriteBufLine DataTxtBuf, "static " + ctype$ + " fornext_value" + u$ + ";"
                WriteBufLine DataTxtBuf, "static " + ctype$ + " fornext_finalvalue" + u$ + ";"
                WriteBufLine DataTxtBuf, "static " + ctype$ + " fornext_step" + u$ + ";"
                WriteBufLine DataTxtBuf, "static uint8 fornext_step_negative" + u$ + ";"
            ELSE
                WriteBufLine DataTxtBuf, ctype$ + " fornext_value" + u$ + ";"
                WriteBufLine DataTxtBuf, ctype$ + " fornext_finalvalue" + u$ + ";"
                WriteBufLine DataTxtBuf, ctype$ + " fornext_step" + u$ + ";"
                WriteBufLine DataTxtBuf, "uint8 fornext_step_negative" + u$ + ";"
            END IF

            'calculate start
            e$ = fixoperationorder$(startvalue$)
            IF Error_Happened THEN GOTO errmes
            l$ = l$ + sp + "=" + sp + tlayout$
            e$ = evaluatetotyp$(e$, ctyp)
            IF Error_Happened THEN GOTO errmes
            WriteBufLine MainTxtBuf, "fornext_value" + u$ + "=" + e$ + ";"

            'final
            e$ = fixoperationorder$(p2$)
            IF Error_Happened THEN GOTO errmes
            l$ = l$ + sp + SCase$("To") + sp + tlayout$
            e$ = evaluatetotyp(e$, ctyp)
            IF Error_Happened THEN GOTO errmes
            WriteBufLine MainTxtBuf, "fornext_finalvalue" + u$ + "=" + e$ + ";"

            'step
            e$ = fixoperationorder$(p3$)
            IF Error_Happened THEN GOTO errmes
            IF stepused = 1 THEN l$ = l$ + sp + SCase$("Step") + sp + tlayout$
            e$ = evaluatetotyp(e$, ctyp)
            IF Error_Happened THEN GOTO errmes

            IF NoChecks = 0 AND vWatchOn = 1 AND inclinenumber(inclevel) = 0 THEN
                vWatchAddLabel linenumber, 0
                WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
            END IF

            WriteBufLine MainTxtBuf, "fornext_step" + u$ + "=" + e$ + ";"
            WriteBufLine MainTxtBuf, "if (fornext_step" + u$ + "<0) fornext_step_negative" + u$ + "=1; else fornext_step_negative" + u$ + "=0;"

            WriteBufLine MainTxtBuf, "if (new_error) goto fornext_error" + u$ + ";"
            WriteBufLine MainTxtBuf, "goto fornext_entrylabel" + u$ + ";"
            WriteBufLine MainTxtBuf, "while(1){"
            typbak = typ
            WriteBufLine MainTxtBuf, "fornext_value" + u$ + "=fornext_step" + u$ + "+(" + refer$(v$, typ, 0) + ");"
            IF Error_Happened THEN GOTO errmes
            typ = typbak
            WriteBufLine MainTxtBuf, "fornext_entrylabel" + u$ + ":"
            setrefer v$, typ, "fornext_value" + u$, 1
            IF Error_Happened THEN GOTO errmes
            WriteBufLine MainTxtBuf, "if (fornext_step_negative" + u$ + "){"
            WriteBufLine MainTxtBuf, "if (fornext_value" + u$ + "<fornext_finalvalue" + u$ + ") break;"
            WriteBufLine MainTxtBuf, "}else{"
            WriteBufLine MainTxtBuf, "if (fornext_value" + u$ + ">fornext_finalvalue" + u$ + ") break;"
            WriteBufLine MainTxtBuf, "}"
            WriteBufLine MainTxtBuf, "fornext_error" + u$ + ":;"

            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$

            GOTO finishedline
        END IF
    END IF


    IF n = 1 THEN
        IF firstelement$ = "ELSE" THEN

            'Routine to add error checking for ELSE so we'll no longer be able to do things like the following:
            'IF x = 1 THEN
            '    SELECT CASE s
            '        CASE 1
            '    END SELECT ELSE y = 2
            'END IF
            'Notice the ELSE with the SELECT CASE?  Before this patch, commands like those were considered valid QB64 code.
            temp$ = UCASE$(LTRIM$(RTRIM$(wholeline)))
            'IF NoIDEMode THEN
            DO WHILE INSTR(temp$, CHR$(9))
                ASC(temp$, INSTR(temp$, CHR$(9))) = 32
            LOOP
            'END IF
            goodelse = 0 'a check to see if it's a good else
            IF LEFT$(temp$, 2) = "IF" THEN goodelse = -1: GOTO skipelsecheck 'If we have an IF, the else is probably good
            IF LEFT$(temp$, 4) = "ELSE" THEN goodelse = -1: GOTO skipelsecheck 'If it's an else by itself,then we'll call it good too at this point and let the rest of the syntax checking check for us
            DO
                spacelocation = INSTR(temp$, " ")
                IF spacelocation THEN temp$ = LEFT$(temp$, spacelocation - 1) + MID$(temp$, spacelocation + 1)
            LOOP UNTIL spacelocation = 0
            IF INSTR(temp$, ":ELSE") OR INSTR(temp$, ":IF") THEN goodelse = -1: GOTO skipelsecheck 'I personally don't like the idea of a :ELSE statement, but this checks for that and validates it as well.  YUCK!  (I suppose this might be useful if there's a label where the ELSE is, like thisline: ELSE
            count = 0
            DO
                count = count + 1
                SELECT CASE MID$(temp$, count, 1)
                    CASE IS = "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", ":"
                    CASE ELSE: EXIT DO
                END SELECT
            LOOP UNTIL count >= LEN(temp$)
            IF MID$(temp$, count, 4) = "ELSE" OR MID$(temp$, count, 2) = "IF" THEN goodelse = -1 'We only had numbers before our else
            IF NOT goodelse THEN a$ = "Invalid Syntax for ELSE": GOTO errmes
            skipelsecheck:
            'End of ELSE Error checking
            FOR i = controllevel TO 1 STEP -1
                t = controltype(i)
                IF t = 1 THEN
                    IF controlstate(controllevel) = 2 THEN a$ = "IF-THEN already contains an ELSE statement": GOTO errmes
                    WriteBufLine MainTxtBuf, "}else{"
                    controlstate(controllevel) = 2
                    IF lineelseused = 0 THEN lhscontrollevel = lhscontrollevel - 1
                    l$ = SCase$("Else")
                    layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                    GOTO finishednonexec '***no error causing code, event checking done by IF***
                END IF
            NEXT
            a$ = "ELSE without IF": GOTO errmes
        END IF
    END IF

    IF n >= 3 THEN
        IF firstelement$ = "ELSEIF" THEN
            IF NoChecks = 0 THEN
                WriteBufLine MainTxtBuf, "S_" + str2$(statementn) + ":;": dynscope = 1
                IF vWatchOn = 1 AND inclinenumber(inclevel) = 0 THEN
                    vWatchAddLabel linenumber, 0
                    WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
                END IF
            END IF
            FOR i = controllevel TO 1 STEP -1
                t = controltype(i)
                IF t = 1 THEN
                    IF controlstate(controllevel) = 2 THEN a$ = "ELSEIF invalid after ELSE": GOTO errmes
                    controlstate(controllevel) = 1
                    controlvalue(controllevel) = controlvalue(controllevel) + 1
                    e$ = getelement$(a$, n)
                    IF e$ <> "THEN" THEN a$ = "Expected ELSEIF expression THEN": GOTO errmes
                    WriteBufLine MainTxtBuf, "}else{"
                    e$ = fixoperationorder$(getelements$(ca$, 2, n - 1))
                    IF Error_Happened THEN GOTO errmes
                    l$ = SCase$("ElseIf") + sp + tlayout$ + sp + SCase$("Then")
                    layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                    e$ = evaluate(e$, typ)
                    IF Error_Happened THEN GOTO errmes
                    IF (typ AND ISREFERENCE) THEN e$ = refer$(e$, typ, 0)
                    IF Error_Happened THEN GOTO errmes
                    IF typ AND ISSTRING THEN
                        a$ = "Expected ELSEIF LEN(stringexpression) THEN": GOTO errmes
                    END IF
                    IF stringprocessinghappened THEN
                        WriteBufLine MainTxtBuf, "if (" + cleanupstringprocessingcall$ + e$ + ")){"
                    ELSE
                        WriteBufLine MainTxtBuf, "if (" + e$ + "){"
                    END IF
                    lhscontrollevel = lhscontrollevel - 1
                    GOTO finishedline
                END IF
            NEXT
            a$ = "ELSEIF without IF": GOTO errmes
        END IF
    END IF

    IF n >= 3 THEN
        IF firstelement$ = "IF" THEN
            IF NoChecks = 0 THEN
                WriteBufLine MainTxtBuf, "S_" + str2$(statementn) + ":;": dynscope = 1
                IF vWatchOn = 1 AND inclinenumber(inclevel) = 0 THEN
                    vWatchAddLabel linenumber, 0
                    WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
                END IF
            END IF

            'prevents code from being placed before 'CASE condition' in a SELECT CASE block
            IF SelectCaseCounter > 0 AND SelectCaseHasCaseBlock(SelectCaseCounter) = 0 THEN
                a$ = "Expected CASE expression": GOTO errmes
            END IF

            e$ = getelement(a$, n)
            iftype = 0
            IF e$ = "THEN" THEN iftype = 1
            IF e$ = "GOTO" THEN iftype = 2
            IF iftype = 0 THEN a$ = "Expected IF expression THEN/GOTO": GOTO errmes

            controllevel = controllevel + 1
            controlref(controllevel) = linenumber
            controltype(controllevel) = 1
            controlvalue(controllevel) = 0 'number of extra closing } required at END IF
            controlstate(controllevel) = 0

            e$ = fixoperationorder$(getelements(ca$, 2, n - 1))
            IF Error_Happened THEN GOTO errmes
            l$ = SCase$("If") + sp + tlayout$
            e$ = evaluate(e$, typ)
            IF Error_Happened THEN GOTO errmes
            IF (typ AND ISREFERENCE) THEN e$ = refer$(e$, typ, 0)
            IF Error_Happened THEN GOTO errmes

            IF typ AND ISSTRING THEN
                a$ = "Expected IF LEN(stringexpression) THEN": GOTO errmes
            END IF

            IF stringprocessinghappened THEN
                WriteBufLine MainTxtBuf, "if ((" + cleanupstringprocessingcall$ + e$ + "))||new_error){"
            ELSE
                WriteBufLine MainTxtBuf, "if ((" + e$ + ")||new_error){"
            END IF

            IF iftype = 1 THEN l$ = l$ + sp + SCase$("Then") 'note: 'GOTO' will be added when iftype=2
            layoutdone = 1: IF LEN(layout$) = 0 THEN layout$ = l$ ELSE layout$ = layout$ + sp + l$

            IF iftype = 2 THEN 'IF ... GOTO
                GOTO finishedline
            END IF

            THENGOTO = 1 'possible: IF a=1 THEN 10
            GOTO finishedline2
        END IF
    END IF

    'ENDIF
    IF n = 1 AND getelement(a$, 1) = "ENDIF" THEN
        IF controltype(controllevel) <> 1 THEN a$ = "END IF without IF": GOTO errmes
        layoutdone = 1
        IF impliedendif = 0 THEN
            l$ = SCase$("End If")
            IF LEN(layout$) = 0 THEN layout$ = l$ ELSE layout$ = layout$ + sp + l$
        END IF

        WriteBufLine MainTxtBuf, "}"
        FOR i = 1 TO controlvalue(controllevel)
            WriteBufLine MainTxtBuf, "}"
        NEXT
        controllevel = controllevel - 1
        GOTO finishednonexec '***no error causing code, event checking done by IF***
    END IF


    'END IF
    IF n = 2 THEN
        IF getelement(a$, 1) = "END" AND getelement(a$, 2) = "IF" THEN


            IF controltype(controllevel) <> 1 THEN a$ = "END IF without IF": GOTO errmes
            layoutdone = 1
            IF impliedendif = 0 THEN
                l$ = SCase$("End" + sp + "If")
                IF LEN(layout$) = 0 THEN layout$ = l$ ELSE layout$ = layout$ + sp + l$
            END IF

            IF NoChecks = 0 AND vWatchOn = 1 AND inclinenumber(inclevel) = 0 THEN
                vWatchAddLabel linenumber, 0
                WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
            END IF

            WriteBufLine MainTxtBuf, "}"
            FOR i = 1 TO controlvalue(controllevel)
                WriteBufLine MainTxtBuf, "}"
            NEXT
            controllevel = controllevel - 1
            GOTO finishednonexec '***no error causing code, event checking done by IF***
        END IF
    END IF



    'SELECT CASE
    IF n >= 1 THEN
        IF firstelement$ = "SELECT" THEN
            IF NoChecks = 0 THEN
                WriteBufLine MainTxtBuf, "S_" + str2$(statementn) + ":;": dynscope = 1
                IF vWatchOn = 1 AND inclinenumber(inclevel) = 0 THEN
                    vWatchAddLabel linenumber, 0
                    WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
                END IF
            END IF

            'prevents code from being placed before 'CASE condition' in a SELECT CASE block
            IF SelectCaseCounter > 0 AND SelectCaseHasCaseBlock(SelectCaseCounter) = 0 THEN
                a$ = "Expected CASE expression": GOTO errmes
            END IF

            SelectCaseCounter = SelectCaseCounter + 1
            IF UBOUND(EveryCaseSet) <= SelectCaseCounter THEN REDIM _PRESERVE EveryCaseSet(SelectCaseCounter)
            IF UBOUND(SelectCaseHasCaseBlock) <= SelectCaseCounter THEN REDIM _PRESERVE SelectCaseHasCaseBlock(SelectCaseCounter)
            SelectCaseHasCaseBlock(SelectCaseCounter) = 0
            IF secondelement$ = "EVERYCASE" THEN
                EveryCaseSet(SelectCaseCounter) = -1
                IF n = 2 THEN a$ = "Expected SELECT CASE expression": GOTO errmes
                e$ = fixoperationorder(getelements$(ca$, 3, n))
                IF Error_Happened THEN GOTO errmes
                l$ = SCase$("Select EveryCase ") + tlayout$
            ELSE
                EveryCaseSet(SelectCaseCounter) = 0
                IF n = 1 OR secondelement$ <> "CASE" THEN a$ = "Expected CASE or EVERYCASE": GOTO errmes
                IF n = 2 THEN a$ = "Expected SELECT CASE expression": GOTO errmes
                e$ = fixoperationorder(getelements$(ca$, 3, n))
                IF Error_Happened THEN GOTO errmes
                l$ = SCase$("Select Case ") + tlayout$
            END IF

            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            e$ = evaluate(e$, typ)
            IF Error_Happened THEN GOTO errmes
            u = uniquenumber

            controllevel = controllevel + 1
            controlvalue(controllevel) = 0 'id

            t$ = ""
            IF (typ AND ISSTRING) THEN
                t = 0
                IF (typ AND ISUDT) = 0 AND (typ AND ISARRAY) = 0 AND (typ AND ISREFERENCE) <> 0 THEN
                    controlvalue(controllevel) = VAL(e$)
                ELSE
                    IF (typ AND ISREFERENCE) THEN e$ = refer(e$, typ, 0)
                    IF Error_Happened THEN GOTO errmes
                    WriteBufLine DataTxtBuf, "static qbs *sc_" + str2$(u) + "=qbs_new(0,0);"
                    WriteBufLine MainTxtBuf, "qbs_set(sc_" + str2$(u) + "," + e$ + ");"
                    IF stringprocessinghappened THEN WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
                END IF

            ELSE

                IF (typ AND ISFLOAT) THEN

                    IF (typ AND 511) > 64 THEN t = 3: t$ = "long double"
                    IF (typ AND 511) = 32 THEN t = 4: t$ = "float"
                    IF (typ AND 511) = 64 THEN t = 5: t$ = "double"
                    IF (typ AND ISUDT) = 0 AND (typ AND ISARRAY) = 0 AND (typ AND ISREFERENCE) <> 0 THEN
                        controlvalue(controllevel) = VAL(e$)
                    ELSE
                        IF (typ AND ISREFERENCE) THEN e$ = refer(e$, typ, 0)
                        IF Error_Happened THEN GOTO errmes

                        WriteBufLine DataTxtBuf, "static " + t$ + " sc_" + str2$(u) + ";"
                        WriteBufLine MainTxtBuf, "sc_" + str2$(u) + "=" + e$ + ";"
                        IF stringprocessinghappened THEN WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
                    END IF

                ELSE

                    'non-float
                    t = 1: t$ = "int64"
                    IF (typ AND ISUNSIGNED) THEN
                        IF (typ AND 511) <= 32 THEN t = 7: t$ = "uint32"
                        IF (typ AND 511) > 32 THEN t = 2: t$ = "uint64"
                    ELSE
                        IF (typ AND 511) <= 32 THEN t = 6: t$ = "int32"
                        IF (typ AND 511) > 32 THEN t = 1: t$ = "int64"
                    END IF
                    IF (typ AND ISUDT) = 0 AND (typ AND ISARRAY) = 0 AND (typ AND ISREFERENCE) <> 0 THEN
                        controlvalue(controllevel) = VAL(e$)
                    ELSE
                        IF (typ AND ISREFERENCE) THEN e$ = refer(e$, typ, 0)
                        IF Error_Happened THEN GOTO errmes
                        WriteBufLine DataTxtBuf, "static " + t$ + " sc_" + str2$(u) + ";"
                        WriteBufLine MainTxtBuf, "sc_" + str2$(u) + "=" + e$ + ";"
                        IF stringprocessinghappened THEN WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
                    END IF

                END IF
            END IF



            controlref(controllevel) = linenumber
            controltype(controllevel) = 10 + t
            controlid(controllevel) = u
            IF EveryCaseSet(SelectCaseCounter) THEN WriteBufLine DataTxtBuf, "int32 sc_" + str2$(controlid(controllevel)) + "_var;"
            IF EveryCaseSet(SelectCaseCounter) THEN WriteBufLine MainTxtBuf, "sc_" + str2$(controlid(controllevel)) + "_var=0;"
            GOTO finishedline
        END IF
    END IF


    'END SELECT
    IF n = 2 THEN
        IF firstelement$ = "END" AND secondelement$ = "SELECT" THEN
            'complete current case if necessary
            '18=CASE (awaiting END SELECT/CASE/CASE ELSE)
            '19=CASE ELSE (awaiting END SELECT)
            IF controltype(controllevel) = 18 THEN
                everycasenewcase = everycasenewcase + 1
                WriteBufLine MainTxtBuf, "sc_ec_" + str2$(everycasenewcase) + "_end:;"
                controllevel = controllevel - 1
                IF EveryCaseSet(SelectCaseCounter) = 0 THEN WriteBufLine MainTxtBuf, "goto sc_" + str2$(controlid(controllevel)) + "_end;"
                WriteBufLine MainTxtBuf, "}"
            END IF
            IF controltype(controllevel) = 19 THEN
                controllevel = controllevel - 1
                IF EveryCaseSet(SelectCaseCounter) THEN WriteBufLine MainTxtBuf, "} /* End of SELECT EVERYCASE ELSE */"
            END IF

            WriteBufLine MainTxtBuf, "sc_" + str2$(controlid(controllevel)) + "_end:;"
            IF controltype(controllevel) < 10 OR controltype(controllevel) > 17 THEN a$ = "END SELECT without SELECT CASE": GOTO errmes

            IF NoChecks = 0 AND vWatchOn = 1 AND inclinenumber(inclevel) = 0 THEN
                vWatchAddLabel linenumber, 0
                WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
            END IF

            IF SelectCaseCounter > 0 AND SelectCaseHasCaseBlock(SelectCaseCounter) = 0 THEN
                'warn user of empty SELECT CASE block
                IF NOT IgnoreWarnings THEN
                    addWarning linenumber, inclevel, inclinenumber(inclevel), incname$(inclevel), "empty SELECT CASE block", ""
                END IF
            END IF

            controllevel = controllevel - 1
            SelectCaseCounter = SelectCaseCounter - 1
            l$ = SCase$("End" + sp + "Select")
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            GOTO finishednonexec '***no error causing code, event checking done by SELECT CASE***
        END IF
    END IF

    'prevents code from being placed before 'CASE condition' in a SELECT CASE block
    IF n >= 1 AND firstelement$ <> "CASE" AND SelectCaseCounter > 0 AND SelectCaseHasCaseBlock(SelectCaseCounter) = 0 THEN
        a$ = "Expected CASE expression": GOTO errmes
    END IF


    'CASE
    IF n >= 1 THEN
        IF firstelement$ = "CASE" THEN

            l$ = SCase$("Case")
            'complete current case if necessary
            '18=CASE (awaiting END SELECT/CASE/CASE ELSE)
            '19=CASE ELSE (awaiting END SELECT)
            IF controltype(controllevel) = 19 THEN a$ = "Expected END SELECT": GOTO errmes
            IF controltype(controllevel) = 18 THEN
                lhscontrollevel = lhscontrollevel - 1
                controllevel = controllevel - 1
                everycasenewcase = everycasenewcase + 1
                WriteBufLine MainTxtBuf, "sc_ec_" + str2$(everycasenewcase) + "_end:;"
                IF EveryCaseSet(SelectCaseCounter) = 0 THEN
                    WriteBufLine MainTxtBuf, "goto sc_" + str2$(controlid(controllevel)) + "_end;"
                ELSE
                    WriteBufLine MainTxtBuf, "sc_" + str2$(controlid(controllevel)) + "_var=-1;"
                END IF
                WriteBufLine MainTxtBuf, "}"
                'following line fixes problem related to RESUME after error
                'statementn = statementn + 1
                'if nochecks=0 then WriteBufLine MainTxtBuf, "S_" + str2$(statementn) + ":;"
            END IF

            IF controltype(controllevel) <> 6 AND (controltype(controllevel) < 10 OR controltype(controllevel) > 17) THEN a$ = "CASE without SELECT CASE": GOTO errmes
            IF n = 1 THEN a$ = "Expected CASE expression": GOTO errmes
            SelectCaseHasCaseBlock(SelectCaseCounter) = -1


            'upgrade:
            '#1: variables can be referred to directly by storing an id in 'controlref'
            '    (but not if part of an array etc.)
            'DIM controlvalue(1000) AS LONG
            '#2: more types will be available
            '    +SINGLE
            '    +DOUBLE
            '    -LONG DOUBLE
            '    +INT32
            '    +UINT32
            '14=SELECT CASE float ...
            '15=SELECT CASE double
            '16=SELECT CASE int32
            '17=SELECT CASE uint32

            '10=SELECT CASE qbs (awaiting END SELECT/CASE)
            '11=SELECT CASE int64 (awaiting END SELECT/CASE)
            '12=SELECT CASE uint64 (awaiting END SELECT/CASE)
            '13=SELECT CASE LONG double (awaiting END SELECT/CASE/CASE ELSE)
            '14=SELECT CASE float ...
            '15=SELECT CASE double
            '16=SELECT CASE int32
            '17=SELECT CASE uint32

            '    bits = targettyp AND 511
            '                                IF bits <= 16 THEN e$ = "qbr_float_to_long(" + e$ + ")"
            '                                IF bits > 16 AND bits < 32 THEN e$ = "qbr_double_to_long(" + e$ + ")"
            '                                IF bits >= 32 THEN e$ = "qbr(" + e$ + ")"


            t = controltype(controllevel) - 10
            'get required type cast, and float options
            flt = 0
            IF t = 0 THEN tc$ = ""
            IF t = 1 THEN tc$ = ""
            IF t = 2 THEN tc$ = ""
            IF t = 3 THEN tc$ = "": flt = 1
            IF t = 4 THEN tc$ = "(float)": flt = 1
            IF t = 5 THEN tc$ = "(double)": flt = 1
            IF t = 6 THEN tc$ = ""
            IF t = 7 THEN tc$ = ""

            n$ = "sc_" + str2$(controlid(controllevel))
            cv = controlvalue(controllevel)
            IF cv THEN
                n$ = refer$(str2$(cv), 0, 0)
                IF Error_Happened THEN GOTO errmes
            END IF

            'CASE ELSE
            IF n = 2 THEN
                IF getelement$(a$, 2) = "C-EL" THEN
                    IF EveryCaseSet(SelectCaseCounter) THEN WriteBufLine MainTxtBuf, "if (sc_" + str2$(controlid(controllevel)) + "_var==0) {"
                    controllevel = controllevel + 1: controltype(controllevel) = 19
                    controlref(controllevel) = controlref(controllevel - 1)
                    l$ = l$ + sp + SCase$("Else")
                    layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                    GOTO finishednonexec '***no error causing code, event checking done by SELECT CASE***
                END IF
            END IF

            IF NoChecks = 0 THEN
                WriteBufLine MainTxtBuf, "S_" + str2$(statementn) + ":;": dynscope = 1
                IF vWatchOn = 1 AND inclinenumber(inclevel) = 0 THEN
                    vWatchAddLabel linenumber, 0
                    WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
                END IF
            END IF



            f12$ = ""

            nexp = 0
            B = 0
            e$ = ""
            FOR i = 2 TO n
                e2$ = getelement$(ca$, i)
                IF e2$ = "(" THEN B = B + 1
                IF e2$ = ")" THEN B = B - 1
                IF i = n THEN e$ = e$ + sp + e2$
                IF i = n OR (e2$ = "," AND B = 0) THEN
                    IF nexp <> 0 THEN l$ = l$ + sp2 + ",": f12$ = f12$ + "||"
                    IF e$ = "" THEN a$ = "Expected expression": GOTO errmes
                    e$ = RIGHT$(e$, LEN(e$) - 1)



                    'TYPE 1? ... TO ...
                    n2 = numelements(e$)
                    b2 = 0
                    el$ = "": er$ = ""
                    usedto = 0
                    FOR i2 = 1 TO n2
                        e3$ = getelement$(e$, i2)
                        IF e3$ = "(" THEN b2 = b2 + 1
                        IF e3$ = ")" THEN b2 = b2 - 1
                        IF b2 = 0 AND UCASE$(e3$) = "TO" THEN
                            usedto = 1
                        ELSE
                            IF usedto = 0 THEN el$ = el$ + sp + e3$ ELSE er$ = er$ + sp + e3$
                        END IF
                    NEXT
                    IF usedto = 1 THEN
                        IF el$ = "" OR er$ = "" THEN a$ = "Expected expression TO expression": GOTO errmes
                        el$ = RIGHT$(el$, LEN(el$) - 1): er$ = RIGHT$(er$, LEN(er$) - 1)
                        'evaluate each side
                        FOR i2 = 1 TO 2
                            IF i2 = 1 THEN e$ = el$ ELSE e$ = er$
                            e$ = fixoperationorder(e$)
                            IF Error_Happened THEN GOTO errmes
                            IF i2 = 1 THEN l$ = l$ + sp + tlayout$ ELSE l$ = l$ + sp + SCase$("To") + sp + tlayout$
                            e$ = evaluate(e$, typ)
                            IF Error_Happened THEN GOTO errmes
                            IF (typ AND ISREFERENCE) THEN e$ = refer(e$, typ, 0)
                            IF Error_Happened THEN GOTO errmes
                            IF t = 0 THEN
                                IF (typ AND ISSTRING) = 0 THEN a$ = "Expected string expression": GOTO errmes
                                IF i2 = 1 THEN f12$ = f12$ + "(qbs_greaterorequal(" + n$ + "," + e$ + ")&&qbs_lessorequal(" + n$ + ","
                                IF i2 = 2 THEN f12$ = f12$ + e$ + "))"
                            ELSE
                                IF (typ AND ISSTRING) THEN a$ = "Expected numeric expression": GOTO errmes
                                'round to integer?
                                IF (typ AND ISFLOAT) THEN
                                    IF t = 1 THEN e$ = "qbr(" + e$ + ")"
                                    IF t = 2 THEN e$ = "qbr_longdouble_to_uint64(" + e$ + ")"
                                    IF t = 6 OR t = 7 THEN e$ = "qbr_double_to_long(" + e$ + ")"
                                END IF
                                'cast result?
                                IF LEN(tc$) THEN e$ = tc$ + "(" + e$ + ")"
                                IF i2 = 1 THEN f12$ = f12$ + "((" + n$ + ">=(" + e$ + "))&&(" + n$ + "<=("
                                IF i2 = 2 THEN f12$ = f12$ + e$ + ")))"
                            END IF
                        NEXT
                        GOTO addedexp
                    END IF

                    '10=SELECT CASE qbs (awaiting END SELECT/CASE)
                    '11=SELECT CASE int64 (awaiting END SELECT/CASE)
                    '12=SELECT CASE uint64 (awaiting END SELECT/CASE)
                    '13=SELECT CASE LONG double (awaiting END SELECT/CASE/CASE ELSE)
                    '14=SELECT CASE float ...
                    '15=SELECT CASE double
                    '16=SELECT CASE int32
                    '17=SELECT CASE uint32

                    '    bits = targettyp AND 511
                    '                                IF bits <= 16 THEN e$ = "qbr_float_to_long(" + e$ + ")"
                    '                                IF bits > 16 AND bits < 32 THEN e$ = "qbr_double_to_long(" + e$ + ")"
                    '                                IF bits >= 32 THEN e$ = "qbr(" + e$ + ")"






                    o$ = "==" 'used by type 3

                    'TYPE 2?
                    x$ = getelement$(e$, 1)
                    IF isoperator(x$) THEN 'non-standard usage correction
                        IF x$ = "=" OR x$ = "<>" OR x$ = ">" OR x$ = "<" OR x$ = ">=" OR x$ = "<=" THEN
                            e$ = "IS" + sp + e$
                            x$ = "IS"
                        END IF
                    END IF
                    IF UCASE$(x$) = "IS" THEN
                        n2 = numelements(e$)
                        IF n2 < 3 THEN a$ = "Expected IS =,<>,>,<,>=,<= expression": GOTO errmes
                        o$ = getelement$(e$, 2)
                        o2$ = o$
                        o = 0
                        IF o$ = "=" THEN o$ = "==": o = 1
                        IF o$ = "<>" THEN o$ = "!=": o = 1
                        IF o$ = ">" THEN o = 1
                        IF o$ = "<" THEN o = 1
                        IF o$ = ">=" THEN o = 1
                        IF o$ = "<=" THEN o = 1
                        IF o <> 1 THEN a$ = "Expected IS =,<>,>,<,>=,<= expression": GOTO errmes
                        l$ = l$ + sp + SCase$("Is") + sp + o2$
                        e$ = getelements$(e$, 3, n2)
                        'fall through to type 3 using modified e$ & o$
                    END IF

                    'TYPE 3? simple expression
                    e$ = fixoperationorder(e$)
                    IF Error_Happened THEN GOTO errmes
                    l$ = l$ + sp + tlayout$
                    e$ = evaluate(e$, typ)
                    IF Error_Happened THEN GOTO errmes
                    IF (typ AND ISREFERENCE) THEN e$ = refer(e$, typ, 0)
                    IF Error_Happened THEN GOTO errmes
                    IF t = 0 THEN
                        'string comparison
                        IF (typ AND ISSTRING) = 0 THEN a$ = "Expected string expression": GOTO errmes
                        IF o$ = "==" THEN o$ = "qbs_equal"
                        IF o$ = "!=" THEN o$ = "qbs_notequal"
                        IF o$ = ">" THEN o$ = "qbs_greaterthan"
                        IF o$ = "<" THEN o$ = "qbs_lessthan"
                        IF o$ = ">=" THEN o$ = "qbs_greaterorequal"
                        IF o$ = "<=" THEN o$ = "qbs_lessorequal"
                        f12$ = f12$ + o$ + "(" + n$ + "," + e$ + ")"
                    ELSE
                        'numeric
                        IF (typ AND ISSTRING) THEN a$ = "Expected numeric expression": GOTO errmes
                        'round to integer?
                        IF (typ AND ISFLOAT) THEN
                            IF t = 1 THEN e$ = "qbr(" + e$ + ")"
                            IF t = 2 THEN e$ = "qbr_longdouble_to_uint64(" + e$ + ")"
                            IF t = 6 OR t = 7 THEN e$ = "qbr_double_to_long(" + e$ + ")"
                        END IF
                        'cast result?
                        IF LEN(tc$) THEN e$ = tc$ + "(" + e$ + ")"
                        f12$ = f12$ + "(" + n$ + o$ + "(" + e$ + "))"
                    END IF

                    addedexp:
                    e$ = ""
                    nexp = nexp + 1
                ELSE
                    e$ = e$ + sp + e2$
                END IF
            NEXT

            IF stringprocessinghappened THEN
                WriteBufLine MainTxtBuf, "if ((" + cleanupstringprocessingcall$ + f12$ + "))||new_error){"
            ELSE
                WriteBufLine MainTxtBuf, "if ((" + f12$ + ")||new_error){"
            END IF

            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            controllevel = controllevel + 1
            controlref(controllevel) = controlref(controllevel - 1)
            controltype(controllevel) = 18
            GOTO finishedline
        END IF
    END IF












    'static scope commands:

    IF NoChecks = 0 THEN
        IF vWatchOn = 1 AND inclinenumber(inclevel) = 0 THEN
            vWatchAddLabel linenumber, 0
            WriteBufLine MainTxtBuf, "do{*__LONG_VWATCH_LINENUMBER= " + str2$(linenumber) + "; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
        ELSE
            WriteBufLine MainTxtBuf, "do{"
        END IF
        'WriteBufLine MainTxtBuf, "S_" + str2$(statementn) + ":;"
    END IF


    IF n > 1 THEN
        IF firstelement$ = "PALETTE" THEN
            IF secondelement$ = "USING" THEN
                l$ = SCase$("Palette" + sp + "Using" + sp)
                IF n < 3 THEN a$ = "Expected PALETTE USING array-name": GOTO errmes
                'check array
                e$ = getelement$(ca$, 3)
                IF FindArray(e$) THEN
                    IF Error_Happened THEN GOTO errmes
                    z = 1
                    t = id.arraytype
                    IF (t AND 511) <> 16 AND (t AND 511) <> 32 THEN z = 0
                    IF t AND ISFLOAT THEN z = 0
                    IF t AND ISOFFSETINBITS THEN z = 0
                    IF t AND ISSTRING THEN z = 0
                    IF t AND ISUDT THEN z = 0
                    IF t AND ISUNSIGNED THEN z = 0
                    IF z = 0 THEN a$ = "Array must be of type INTEGER or LONG": GOTO errmes
                    bits = t AND 511
                    GOTO pu_gotarray
                END IF
                IF Error_Happened THEN GOTO errmes
                a$ = "Expected PALETTE USING array-name": GOTO errmes
                pu_gotarray:
                'add () if index not specified
                IF n = 3 THEN
                    e$ = e$ + sp + "(" + sp + ")"
                ELSE
                    IF n = 4 OR getelement$(a$, 4) <> "(" OR getelement$(a$, n) <> ")" THEN a$ = "Expected PALETTE USING array-name(...)": GOTO errmes
                    e$ = e$ + sp + getelements$(ca$, 4, n)
                END IF
                e$ = fixoperationorder$(e$)
                IF Error_Happened THEN GOTO errmes
                l$ = l$ + tlayout$
                e$ = evaluatetotyp(e$, -2)
                IF Error_Happened THEN GOTO errmes
                WriteBufLine MainTxtBuf, "sub_paletteusing(" + e$ + "," + str2(bits) + ");"
                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                GOTO finishedline
            END IF 'using
        END IF 'palette
    END IF 'n>1


    IF firstelement$ = "KEY" THEN
        IF n = 1 THEN a$ = "Expected KEY ...": GOTO errmes
        l$ = SCase$("KEY") + sp
        IF secondelement$ = "OFF" THEN
            IF n > 2 THEN a$ = "Expected KEY OFF only": GOTO errmes
            l$ = l$ + SCase$("Off"): layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            WriteBufLine MainTxtBuf, "key_off();"
            GOTO finishedline
        END IF
        IF secondelement$ = "ON" THEN
            IF n > 2 THEN a$ = "Expected KEY ON only": GOTO errmes
            l$ = l$ + SCase$("On"): layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            WriteBufLine MainTxtBuf, "key_on();"
            GOTO finishedline
        END IF
        IF secondelement$ = "LIST" THEN
            IF n > 2 THEN a$ = "Expected KEY LIST only": GOTO errmes
            l$ = l$ + SCase$("List"): layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            WriteBufLine MainTxtBuf, "key_list();"
            GOTO finishedline
        END IF
        'search for comma to indicate assignment
        B = 0: e$ = ""
        FOR i = 2 TO n
            e2$ = getelement(ca$, i)
            IF e2$ = "(" THEN B = B + 1
            IF e2$ = ")" THEN B = B - 1
            IF e2$ = "," AND B = 0 THEN
                i = i + 1: GOTO key_assignment
            END IF
            IF LEN(e$) THEN e$ = e$ + sp + e2$ ELSE e$ = e2$
        NEXT
        'assume KEY(x) ON/OFF/STOP and handle as a sub
        GOTO key_fallthrough
        key_assignment:
        'KEY x, "string"
        'index
        e$ = fixoperationorder(e$)
        IF Error_Happened THEN GOTO errmes
        l$ = l$ + tlayout$ + sp2 + "," + sp
        e$ = evaluatetotyp(e$, 32&)
        IF Error_Happened THEN GOTO errmes
        WriteBufRawData MainTxtBuf, "key_assign(" + e$ + ","
        'string
        e$ = getelements$(ca$, i, n)
        e$ = fixoperationorder(e$)
        IF Error_Happened THEN GOTO errmes
        l$ = l$ + tlayout$
        e$ = evaluatetotyp(e$, ISSTRING)
        IF Error_Happened THEN GOTO errmes
        WriteBufLine MainTxtBuf, e$ + ");"
        layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
        GOTO finishedline
    END IF 'KEY
    key_fallthrough:




    IF firstelement$ = "FIELD" THEN

        'get filenumber
        B = 0: e$ = ""
        FOR i = 2 TO n
            e2$ = getelement(ca$, i)
            IF e2$ = "(" THEN B = B + 1
            IF e2$ = ")" THEN B = B - 1
            IF e2$ = "," AND B = 0 THEN
                i = i + 1: GOTO fieldgotfn
            END IF
            IF LEN(e$) THEN e$ = e$ + sp + e2$ ELSE e$ = e2$
        NEXT
        GOTO fielderror
        fieldgotfn:
        IF e$ = "#" OR LEN(e$) = 0 THEN GOTO fielderror
        IF LEFT$(e$, 2) = "#" + sp THEN e$ = RIGHT$(e$, LEN(e$) - 2): l$ = SCase$("Field") + sp + "#" + sp2 ELSE l$ = SCase$("Field") + sp
        e$ = fixoperationorder(e$)
        IF Error_Happened THEN GOTO errmes
        l$ = l$ + tlayout$ + sp2 + "," + sp
        e$ = evaluatetotyp(e$, 32&)
        IF Error_Happened THEN GOTO errmes
        WriteBufLine MainTxtBuf, "field_new(" + e$ + ");"

        fieldnext:

        'get fieldwidth
        IF i > n THEN GOTO fielderror
        B = 0: e$ = ""
        FOR i = i TO n
            e2$ = getelement(ca$, i)
            IF e2$ = "(" THEN B = B + 1
            IF e2$ = ")" THEN B = B - 1
            IF UCASE$(e2$) = "AS" AND B = 0 THEN
                i = i + 1: GOTO fieldgotfw
            END IF
            IF LEN(e$) THEN e$ = e$ + sp + e2$ ELSE e$ = e2$
        NEXT
        GOTO fielderror
        fieldgotfw:
        IF LEN(e$) = 0 THEN GOTO fielderror
        e$ = fixoperationorder(e$)
        IF Error_Happened THEN GOTO errmes
        l$ = l$ + tlayout$ + sp + SCase$("As") + sp
        sizee$ = evaluatetotyp(e$, 32&)
        IF Error_Happened THEN GOTO errmes

        'get variable name
        IF i > n THEN GOTO fielderror
        B = 0: e$ = ""
        FOR i = i TO n
            e2$ = getelement(ca$, i)
            IF e2$ = "(" THEN B = B + 1
            IF e2$ = ")" THEN B = B - 1
            IF (i = n OR e2$ = ",") AND B = 0 THEN
                IF e2$ = "," THEN i = i - 1
                IF i = n THEN
                    IF LEN(e$) THEN e$ = e$ + sp + e2$ ELSE e$ = e2$
                END IF
                GOTO fieldgotfname
            END IF
            IF LEN(e$) THEN e$ = e$ + sp + e2$ ELSE e$ = e2$
        NEXT
        GOTO fielderror
        fieldgotfname:
        IF LEN(e$) = 0 THEN GOTO fielderror
        'evaluate it to check it is a STRING
        e$ = fixoperationorder(e$)
        IF Error_Happened THEN GOTO errmes
        l$ = l$ + tlayout$
        e$ = evaluate(e$, typ)
        IF Error_Happened THEN GOTO errmes
        IF (typ AND ISSTRING) = 0 THEN GOTO fielderror
        IF typ AND ISFIXEDLENGTH THEN a$ = "Fixed length strings cannot be used in a FIELD statement": GOTO errmes
        IF (typ AND ISREFERENCE) = 0 THEN GOTO fielderror
        e$ = refer(e$, typ, 0)
        IF Error_Happened THEN GOTO errmes
        WriteBufLine MainTxtBuf, "field_add(" + e$ + "," + sizee$ + ");"

        IF i < n THEN
            i = i + 1
            e$ = getelement(a$, i)
            IF e$ <> "," THEN a$ = "Expected ,": GOTO errmes
            l$ = l$ + sp2 + "," + sp
            i = i + 1
            GOTO fieldnext
        END IF

        layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
        GOTO finishedline

        fielderror: a$ = "Expected FIELD #filenumber, characters AS variable$, ...": GOTO errmes
    END IF





    '1=IF (awaiting END IF)
    '2=FOR (awaiting NEXT)
    '3=DO (awaiting LOOP [UNTIL|WHILE param])
    '4=DO WHILE/UNTIL (awaiting LOOP)
    '5=WHILE (awaiting WEND)

    IF n = 2 THEN
        IF firstelement$ = "EXIT" THEN

            l$ = SCase$("Exit") + sp

            IF secondelement$ = "DO" THEN
                'scan backwards until previous control level reached
                l$ = l$ + SCase$("Do")
                FOR i = controllevel TO 1 STEP -1
                    t = controltype(i)
                    IF t = 3 OR t = 4 THEN
                        WriteBufLine MainTxtBuf, "goto dl_exit_" + str2$(controlid(i)) + ";"
                        layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                        GOTO finishedline
                    END IF
                NEXT
                a$ = "EXIT DO without DO": GOTO errmes
            END IF

            IF secondelement$ = "FOR" THEN
                'scan backwards until previous control level reached
                l$ = l$ + SCase$("For")
                FOR i = controllevel TO 1 STEP -1
                    t = controltype(i)
                    IF t = 2 THEN
                        WriteBufLine MainTxtBuf, "goto fornext_exit_" + str2$(controlid(i)) + ";"
                        layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                        GOTO finishedline
                    END IF
                NEXT
                a$ = "EXIT FOR without FOR": GOTO errmes
            END IF

            IF secondelement$ = "WHILE" THEN
                'scan backwards until previous control level reached
                l$ = l$ + SCase$("While")
                FOR i = controllevel TO 1 STEP -1
                    t = controltype(i)
                    IF t = 5 THEN
                        WriteBufLine MainTxtBuf, "goto ww_exit_" + str2$(controlid(i)) + ";"
                        layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                        GOTO finishedline
                    END IF
                NEXT
                a$ = "EXIT WHILE without WHILE": GOTO errmes
            END IF

            IF secondelement$ = "SELECT" THEN
                'scan backwards until previous control level reached
                l$ = l$ + SCase$("Select")
                FOR i = controllevel TO 1 STEP -1
                    t = controltype(i)
                    IF t = 18 OR t = 19 THEN 'CASE/CASE ELSE
                        WriteBufLine MainTxtBuf, "goto sc_" + str2$(controlid(i - 1)) + "_end;"
                        layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                        GOTO finishedline
                    END IF
                NEXT
                a$ = "EXIT SELECT without SELECT": GOTO errmes
            END IF

            IF secondelement$ = "CASE" THEN
                'scan backwards until previous control level reached
                l$ = l$ + SCase$("Case")
                FOR i = controllevel TO 1 STEP -1
                    t = controltype(i)
                    IF t = 18 THEN 'CASE
                        WriteBufLine MainTxtBuf, "goto sc_ec_" + str2$(everycasenewcase + 1) + "_end;"
                        layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                        GOTO finishedline
                    ELSEIF t = 19 THEN 'CASE ELSE
                        WriteBufLine MainTxtBuf, "goto sc_" + str2$(controlid(i - 1)) + "_end;"
                        layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                        GOTO finishedline
                    END IF
                NEXT
                a$ = "EXIT CASE without CASE": GOTO errmes
            END IF

        END IF
    END IF








    IF n >= 2 THEN
        IF firstelement$ = "ON" AND secondelement$ = "STRIG" THEN
            DEPENDENCY(DEPENDENCY_DEVICEINPUT) = 1
            i = 3
            IF i > n THEN a$ = "Expected (": GOTO errmes
            a2$ = getelement$(ca$, i): i = i + 1
            IF a2$ <> "(" THEN a$ = "Expected (": GOTO errmes
            l$ = SCase$("On" + sp + "Strig" + sp2 + "(")
            IF i > n THEN a$ = "Expected ...": GOTO errmes
            B = 0
            x = 0
            e2$ = ""
            e3$ = ""
            FOR i = i TO n
                e$ = getelement$(ca$, i)
                a = ASC(e$)
                IF a = 40 THEN B = B + 1
                IF a = 41 THEN B = B - 1
                IF B = -1 THEN GOTO onstriggotarg
                IF a = 44 AND B = 0 THEN
                    x = x + 1
                    IF x > 1 THEN a$ = "Expected )": GOTO errmes
                    IF e2$ = "" THEN a$ = "Expected ... ,": GOTO errmes
                    e3$ = e2$
                    e2$ = ""
                ELSE
                    IF LEN(e2$) THEN e2$ = e2$ + sp + e$ ELSE e2$ = e$
                END IF
            NEXT
            a$ = "Expected )": GOTO errmes
            onstriggotarg:
            IF e2$ = "" THEN a$ = "Expected ... )": GOTO errmes
            WriteBufRawData MainTxtBuf, "onstrig_setup("

            'sort scanned results
            IF LEN(e3$) THEN
                optI$ = e3$
                optController$ = e2$
                optPassed$ = "1"
            ELSE
                optI$ = e2$
                optController$ = "0"
                optPassed$ = "0"
            END IF

            'i
            e$ = fixoperationorder$(optI$): IF Error_Happened THEN GOTO errmes
            l$ = l$ + sp2 + tlayout$
            e$ = evaluatetotyp(e$, 32&): IF Error_Happened THEN GOTO errmes
            WriteBufRawData MainTxtBuf, e$ + ","

            'controller , passed
            IF optPassed$ = "1" THEN
                e$ = fixoperationorder$(optController$): IF Error_Happened THEN GOTO errmes
                l$ = l$ + sp2 + "," + sp + tlayout$
                e$ = evaluatetotyp(e$, 32&): IF Error_Happened THEN GOTO errmes
            ELSE
                e$ = optController$
            END IF
            WriteBufRawData MainTxtBuf, e$ + "," + optPassed$ + ","

            l$ = l$ + sp2 + ")" + sp 'close brackets

            i = i + 1
            IF i > n THEN a$ = "Expected GOSUB/sub-name": GOTO errmes
            a2$ = getelement$(a$, i): i = i + 1
            onstrigid = onstrigid + 1
            WriteBufRawData MainTxtBuf, str2$(onstrigid) + ","

            IF a2$ = "GOSUB" THEN
                IF i > n THEN a$ = "Expected linenumber/label": GOTO errmes
                a2$ = getelement$(ca$, i): i = i + 1

                WriteBufLine MainTxtBuf, "0);"

                IF validlabel(a2$) = 0 THEN a$ = "Invalid label": GOTO errmes

                v = HashFind(a2$, HASHFLAG_LABEL, ignore, r)
                x = 1
                labchk60z:
                IF v THEN
                    s = Labels(r).Scope
                    IF s = 0 OR s = -1 THEN 'main scope?
                        IF s = -1 THEN Labels(r).Scope = 0 'acquire scope
                        x = 0 'already defined
                        tlayout$ = RTRIM$(Labels(r).cn)
                        Labels(r).Scope_Restriction = subfuncn
                        Labels(r).Error_Line = linenumber
                    ELSE
                        IF v = 2 THEN v = HashFindCont(ignore, r): GOTO labchk60z
                    END IF
                END IF
                IF x THEN
                    'does not exist
                    nLabels = nLabels + 1: IF nLabels > Labels_Ubound THEN Labels_Ubound = Labels_Ubound * 2: REDIM _PRESERVE Labels(1 TO Labels_Ubound) AS Label_Type
                    Labels(nLabels) = Empty_Label
                    HashAdd a2$, HASHFLAG_LABEL, nLabels
                    r = nLabels
                    Labels(r).State = 0
                    Labels(r).cn = tlayout$
                    Labels(r).Scope = 0
                    Labels(r).Error_Line = linenumber
                    Labels(r).Scope_Restriction = subfuncn
                END IF 'x
                l$ = l$ + SCase$("GoSub") + sp + tlayout$

                WriteBufLine StrigjTxtBuf, "if(strig_event_id==" + str2$(onstrigid) + ")goto LABEL_" + a2$ + ";"

                WriteBufLine StrigTxtBuf, "case " + str2$(onstrigid) + ":"
                WriteBufLine StrigTxtBuf, "strig_event_occurred++;"
                WriteBufLine StrigTxtBuf, "strig_event_id=" + str2$(onstrigid) + ";"
                WriteBufLine StrigTxtBuf, "strig_event_occurred++;"
                WriteBufLine StrigTxtBuf, "return_point[next_return_point++]=0;"
                WriteBufLine StrigTxtBuf, "if (next_return_point>=return_points) more_return_points();"
                WriteBufLine StrigTxtBuf, "QBMAIN(NULL);"
                WriteBufLine StrigTxtBuf, "break;"

                IF LEN(layout$) = 0 THEN layout$ = l$ ELSE layout$ = layout$ + sp + l$
                layoutdone = 1
                GOTO finishedline

            ELSE

                'establish whether sub a2$ exists using try
                x = 0
                try = findid(a2$)
                IF Error_Happened THEN GOTO errmes
                DO WHILE try
                    IF id.subfunc = 2 THEN x = 1: EXIT DO
                    IF try = 2 THEN findanotherid = 1: try = findid(a2$) ELSE try = 0
                    IF Error_Happened THEN GOTO errmes
                LOOP
                IF x = 0 THEN a$ = "Expected GOSUB/sub": GOTO errmes

                l$ = l$ + RTRIM$(id.cn)

                WriteBufLine StrigTxtBuf, "case " + str2$(onstrigid) + ":"
                WriteBufRawData StrigTxtBuf, RTRIM$(id.callname) + "("

                IF id.args > 1 THEN a$ = "SUB requires more than one argument": GOTO errmes

                IF i > n THEN

                    IF id.args = 1 THEN a$ = "Expected argument after SUB": GOTO errmes
                    WriteBufLine MainTxtBuf, "0);"
                    WriteBufLine StrigTxtBuf, ");"

                ELSE

                    IF id.args = 0 THEN a$ = "SUB has no arguments": GOTO errmes

                    t = CVL(id.arg)
                    B = t AND 511
                    IF B = 0 OR (t AND ISARRAY) <> 0 OR (t AND ISFLOAT) <> 0 OR (t AND ISSTRING) <> 0 OR (t AND ISOFFSETINBITS) <> 0 THEN a$ = "Only SUB arguments of integer-type allowed": GOTO errmes
                    IF B = 8 THEN ct$ = "int8"
                    IF B = 16 THEN ct$ = "int16"
                    IF B = 32 THEN ct$ = "int32"
                    IF B = 64 THEN ct$ = "int64"
                    IF t AND ISOFFSET THEN ct$ = "ptrszint"
                    IF t AND ISUNSIGNED THEN ct$ = "u" + ct$
                    WriteBufLine StrigTxtBuf, "(" + ct$ + "*)&i64);"

                    e$ = getelements$(ca$, i, n)
                    e$ = fixoperationorder$(e$)
                    IF Error_Happened THEN GOTO errmes
                    l$ = l$ + sp + tlayout$
                    e$ = evaluatetotyp(e$, INTEGER64TYPE - ISPOINTER)
                    IF Error_Happened THEN GOTO errmes
                    WriteBufLine MainTxtBuf, e$ + ");"

                END IF

                WriteBufLine StrigTxtBuf, "break;"
                IF LEN(layout$) = 0 THEN layout$ = l$ ELSE layout$ = layout$ + sp + l$
                layoutdone = 1
                GOTO finishedline
            END IF

        END IF
    END IF












    IF n >= 2 THEN
        IF firstelement$ = "ON" AND secondelement$ = "TIMER" THEN
            i = 3
            IF i > n THEN a$ = "Expected (": GOTO errmes
            a2$ = getelement$(ca$, i): i = i + 1
            IF a2$ <> "(" THEN a$ = "Expected (": GOTO errmes
            l$ = SCase$("On" + sp + "Timer" + sp2 + "(")
            IF i > n THEN a$ = "Expected ...": GOTO errmes
            B = 0
            x = 0
            e2$ = ""
            e3$ = ""
            FOR i = i TO n
                e$ = getelement$(ca$, i)
                a = ASC(e$)
                IF a = 40 THEN B = B + 1
                IF a = 41 THEN B = B - 1
                IF B = -1 THEN GOTO ontimgotarg
                IF a = 44 AND B = 0 THEN
                    x = x + 1
                    IF x > 1 THEN a$ = "Expected )": GOTO errmes
                    IF e2$ = "" THEN a$ = "Expected ... ,": GOTO errmes
                    e3$ = e2$
                    e2$ = ""
                ELSE
                    IF LEN(e2$) THEN e2$ = e2$ + sp + e$ ELSE e2$ = e$
                END IF
            NEXT
            a$ = "Expected )": GOTO errmes
            ontimgotarg:
            IF e2$ = "" THEN a$ = "Expected ... )": GOTO errmes
            WriteBufRawData MainTxtBuf, "ontimer_setup("
            'i
            IF LEN(e3$) THEN
                e$ = fixoperationorder$(e3$)
                IF Error_Happened THEN GOTO errmes
                l$ = l$ + sp2 + tlayout$ + "," + sp
                e$ = evaluatetotyp(e$, 32&)
                IF Error_Happened THEN GOTO errmes
                WriteBufRawData MainTxtBuf, e$ + ","
            ELSE
                WriteBufRawData MainTxtBuf, "0,"
                l$ = l$ + sp2
            END IF
            'sec
            e$ = fixoperationorder$(e2$)
            IF Error_Happened THEN GOTO errmes
            l$ = l$ + tlayout$ + sp2 + ")" + sp
            e$ = evaluatetotyp(e$, DOUBLETYPE - ISPOINTER)
            IF Error_Happened THEN GOTO errmes
            WriteBufRawData MainTxtBuf, e$ + ","
            i = i + 1
            IF i > n THEN a$ = "Expected GOSUB/sub-name": GOTO errmes
            a2$ = getelement$(a$, i): i = i + 1
            ontimerid = ontimerid + 1
            WriteBufRawData MainTxtBuf, str2$(ontimerid) + ","

            IF a2$ = "GOSUB" THEN
                IF i > n THEN a$ = "Expected linenumber/label": GOTO errmes
                a2$ = getelement$(ca$, i): i = i + 1

                WriteBufLine MainTxtBuf, "0);"

                IF validlabel(a2$) = 0 THEN a$ = "Invalid label": GOTO errmes

                v = HashFind(a2$, HASHFLAG_LABEL, ignore, r)
                x = 1
                labchk60:
                IF v THEN
                    s = Labels(r).Scope
                    IF s = 0 OR s = -1 THEN 'main scope?
                        IF s = -1 THEN Labels(r).Scope = 0 'acquire scope
                        x = 0 'already defined
                        tlayout$ = RTRIM$(Labels(r).cn)
                        Labels(r).Scope_Restriction = subfuncn
                        Labels(r).Error_Line = linenumber
                    ELSE
                        IF v = 2 THEN v = HashFindCont(ignore, r): GOTO labchk60
                    END IF
                END IF
                IF x THEN
                    'does not exist
                    nLabels = nLabels + 1: IF nLabels > Labels_Ubound THEN Labels_Ubound = Labels_Ubound * 2: REDIM _PRESERVE Labels(1 TO Labels_Ubound) AS Label_Type
                    Labels(nLabels) = Empty_Label
                    HashAdd a2$, HASHFLAG_LABEL, nLabels
                    r = nLabels
                    Labels(r).State = 0
                    Labels(r).cn = tlayout$
                    Labels(r).Scope = 0
                    Labels(r).Error_Line = linenumber
                    Labels(r).Scope_Restriction = subfuncn
                END IF 'x
                l$ = l$ + SCase$("GoSub") + sp + tlayout$

                WriteBufLine TimejTxtBuf, "if(timer_event_id==" + str2$(ontimerid) + ")goto LABEL_" + a2$ + ";"

                WriteBufLine TimeTxtBuf, "case " + str2$(ontimerid) + ":"
                WriteBufLine TimeTxtBuf, "timer_event_occurred++;"
                WriteBufLine TimeTxtBuf, "timer_event_id=" + str2$(ontimerid) + ";"
                WriteBufLine TimeTxtBuf, "timer_event_occurred++;"
                WriteBufLine TimeTxtBuf, "return_point[next_return_point++]=0;"
                WriteBufLine TimeTxtBuf, "if (next_return_point>=return_points) more_return_points();"
                WriteBufLine TimeTxtBuf, "QBMAIN(NULL);"
                WriteBufLine TimeTxtBuf, "break;"



                'call validlabel (to validate the label) [see goto]
                'increment ontimerid
                'use ontimerid to generate the jumper routine
                'etc.


                IF LEN(layout$) = 0 THEN layout$ = l$ ELSE layout$ = layout$ + sp + l$
                layoutdone = 1
                GOTO finishedline
            ELSE

                'establish whether sub a2$ exists using try
                x = 0
                try = findid(a2$)
                IF Error_Happened THEN GOTO errmes
                DO WHILE try
                    IF id.subfunc = 2 THEN x = 1: EXIT DO
                    IF try = 2 THEN findanotherid = 1: try = findid(a2$) ELSE try = 0
                    IF Error_Happened THEN GOTO errmes
                LOOP
                IF x = 0 THEN a$ = "Expected GOSUB/sub": GOTO errmes

                l$ = l$ + RTRIM$(id.cn)

                WriteBufLine TimeTxtBuf, "case " + str2$(ontimerid) + ":"
                WriteBufRawData TimeTxtBuf, RTRIM$(id.callname) + "("

                IF id.args > 1 THEN a$ = "SUB requires more than one argument": GOTO errmes

                IF i > n THEN

                    IF id.args = 1 THEN a$ = "Expected argument after SUB": GOTO errmes
                    WriteBufLine MainTxtBuf, "0);"
                    WriteBufLine TimeTxtBuf, ");"

                ELSE

                    IF id.args = 0 THEN a$ = "SUB has no arguments": GOTO errmes

                    t = CVL(id.arg)
                    B = t AND 511
                    IF B = 0 OR (t AND ISARRAY) <> 0 OR (t AND ISFLOAT) <> 0 OR (t AND ISSTRING) <> 0 OR (t AND ISOFFSETINBITS) <> 0 THEN a$ = "Only SUB arguments of integer-type allowed": GOTO errmes
                    IF B = 8 THEN ct$ = "int8"
                    IF B = 16 THEN ct$ = "int16"
                    IF B = 32 THEN ct$ = "int32"
                    IF B = 64 THEN ct$ = "int64"
                    IF t AND ISOFFSET THEN ct$ = "ptrszint"
                    IF t AND ISUNSIGNED THEN ct$ = "u" + ct$
                    WriteBufLine TimeTxtBuf, "(" + ct$ + "*)&i64);"

                    e$ = getelements$(ca$, i, n)
                    e$ = fixoperationorder$(e$)
                    IF Error_Happened THEN GOTO errmes
                    l$ = l$ + sp + tlayout$
                    e$ = evaluatetotyp(e$, INTEGER64TYPE - ISPOINTER)
                    IF Error_Happened THEN GOTO errmes
                    WriteBufLine MainTxtBuf, e$ + ");"

                END IF

                WriteBufLine TimeTxtBuf, "break;"
                IF LEN(layout$) = 0 THEN layout$ = l$ ELSE layout$ = layout$ + sp + l$
                layoutdone = 1
                GOTO finishedline
            END IF

        END IF
    END IF




    IF n >= 2 THEN
        IF firstelement$ = "ON" AND secondelement$ = "KEY" THEN
            i = 3
            IF i > n THEN a$ = "Expected (": GOTO errmes
            a2$ = getelement$(ca$, i): i = i + 1
            IF a2$ <> "(" THEN a$ = "Expected (": GOTO errmes
            l$ = SCase$("On" + sp + "Key" + sp2 + "(")
            IF i > n THEN a$ = "Expected ...": GOTO errmes
            B = 0
            x = 0
            e2$ = ""
            FOR i = i TO n
                e$ = getelement$(ca$, i)
                a = ASC(e$)


                IF a = 40 THEN B = B + 1
                IF a = 41 THEN B = B - 1
                IF B = -1 THEN EXIT FOR
                IF LEN(e2$) THEN e2$ = e2$ + sp + e$ ELSE e2$ = e$
            NEXT
            IF i = n + 1 THEN a$ = "Expected )": GOTO errmes
            IF e2$ = "" THEN a$ = "Expected ... )": GOTO errmes

            e$ = fixoperationorder$(e2$)
            IF Error_Happened THEN GOTO errmes
            l$ = l$ + tlayout$ + sp2 + ")" + sp
            e$ = evaluatetotyp(e$, DOUBLETYPE - ISPOINTER)
            IF Error_Happened THEN GOTO errmes
            WriteBufRawData MainTxtBuf, "onkey_setup(" + e$ + ","

            i = i + 1
            IF i > n THEN a$ = "Expected GOSUB/sub-name": GOTO errmes
            a2$ = getelement$(a$, i): i = i + 1
            onkeyid = onkeyid + 1
            WriteBufRawData MainTxtBuf, str2$(onkeyid) + ","

            IF a2$ = "GOSUB" THEN
                IF i > n THEN a$ = "Expected linenumber/label": GOTO errmes
                a2$ = getelement$(ca$, i): i = i + 1

                WriteBufLine MainTxtBuf, "0);"

                IF validlabel(a2$) = 0 THEN a$ = "Invalid label": GOTO errmes

                v = HashFind(a2$, HASHFLAG_LABEL, ignore, r)
                x = 1
                labchk61:
                IF v THEN
                    s = Labels(r).Scope
                    IF s = 0 OR s = -1 THEN 'main scope?
                        IF s = -1 THEN Labels(r).Scope = 0 'acquire scope
                        x = 0 'already defined
                        tlayout$ = RTRIM$(Labels(r).cn)
                        Labels(r).Scope_Restriction = subfuncn
                        Labels(r).Error_Line = linenumber
                    ELSE
                        IF v = 2 THEN v = HashFindCont(ignore, r): GOTO labchk61
                    END IF
                END IF
                IF x THEN
                    'does not exist
                    nLabels = nLabels + 1: IF nLabels > Labels_Ubound THEN Labels_Ubound = Labels_Ubound * 2: REDIM _PRESERVE Labels(1 TO Labels_Ubound) AS Label_Type
                    Labels(nLabels) = Empty_Label
                    HashAdd a2$, HASHFLAG_LABEL, nLabels
                    r = nLabels
                    Labels(r).State = 0
                    Labels(r).cn = tlayout$
                    Labels(r).Scope = 0
                    Labels(r).Error_Line = linenumber
                    Labels(r).Scope_Restriction = subfuncn
                END IF 'x
                l$ = l$ + SCase$("GoSub") + sp + tlayout$

                WriteBufLine KeyjTxtBuf, "if(key_event_id==" + str2$(onkeyid) + ")goto LABEL_" + a2$ + ";"

                WriteBufLine KeyTxtBuf, "case " + str2$(onkeyid) + ":"
                WriteBufLine KeyTxtBuf, "key_event_occurred++;"
                WriteBufLine KeyTxtBuf, "key_event_id=" + str2$(onkeyid) + ";"
                WriteBufLine KeyTxtBuf, "key_event_occurred++;"
                WriteBufLine KeyTxtBuf, "return_point[next_return_point++]=0;"
                WriteBufLine KeyTxtBuf, "if (next_return_point>=return_points) more_return_points();"
                WriteBufLine KeyTxtBuf, "QBMAIN(NULL);"
                WriteBufLine KeyTxtBuf, "break;"

                IF LEN(layout$) = 0 THEN layout$ = l$ ELSE layout$ = layout$ + sp + l$
                layoutdone = 1
                GOTO finishedline
            ELSE

                'establish whether sub a2$ exists using try
                x = 0
                try = findid(a2$)
                IF Error_Happened THEN GOTO errmes
                DO WHILE try
                    IF id.subfunc = 2 THEN x = 1: EXIT DO
                    IF try = 2 THEN findanotherid = 1: try = findid(a2$) ELSE try = 0
                    IF Error_Happened THEN GOTO errmes
                LOOP
                IF x = 0 THEN a$ = "Expected GOSUB/sub": GOTO errmes

                l$ = l$ + RTRIM$(id.cn)

                WriteBufLine KeyTxtBuf, "case " + str2$(onkeyid) + ":"
                WriteBufRawData KeyTxtBuf, RTRIM$(id.callname) + "("

                IF id.args > 1 THEN a$ = "SUB requires more than one argument": GOTO errmes

                IF i > n THEN

                    IF id.args = 1 THEN a$ = "Expected argument after SUB": GOTO errmes
                    WriteBufLine MainTxtBuf, "0);"
                    WriteBufLine KeyTxtBuf, ");"

                ELSE

                    IF id.args = 0 THEN a$ = "SUB has no arguments": GOTO errmes

                    t = CVL(id.arg)
                    B = t AND 511
                    IF B = 0 OR (t AND ISARRAY) <> 0 OR (t AND ISFLOAT) <> 0 OR (t AND ISSTRING) <> 0 OR (t AND ISOFFSETINBITS) <> 0 THEN a$ = "Only SUB arguments of integer-type allowed": GOTO errmes
                    IF B = 8 THEN ct$ = "int8"
                    IF B = 16 THEN ct$ = "int16"
                    IF B = 32 THEN ct$ = "int32"
                    IF B = 64 THEN ct$ = "int64"
                    IF t AND ISOFFSET THEN ct$ = "ptrszint"
                    IF t AND ISUNSIGNED THEN ct$ = "u" + ct$
                    WriteBufLine KeyTxtBuf, "(" + ct$ + "*)&i64);"

                    e$ = getelements$(ca$, i, n)
                    e$ = fixoperationorder$(e$)
                    IF Error_Happened THEN GOTO errmes
                    l$ = l$ + sp + tlayout$
                    e$ = evaluatetotyp(e$, INTEGER64TYPE - ISPOINTER)
                    IF Error_Happened THEN GOTO errmes
                    WriteBufLine MainTxtBuf, e$ + ");"

                END IF

                WriteBufLine KeyTxtBuf, "break;"
                IF LEN(layout$) = 0 THEN layout$ = l$ ELSE layout$ = layout$ + sp + l$
                layoutdone = 1
                GOTO finishedline
            END IF

        END IF
    END IF



























    'SHARED (SUB)
    IF n >= 1 THEN
        IF firstelement$ = "SHARED" THEN
            IF n = 1 THEN a$ = "Expected SHARED ...": GOTO errmes
            i = 2
            IF subfuncn = 0 THEN a$ = "SHARED must be used within a SUB/FUNCTION": GOTO errmes



            l$ = SCase$("Shared")
            subfuncshr:

            'get variable name
            n$ = getelement$(ca$, i): i = i + 1

            IF n$ = "" THEN a$ = "Expected SHARED variable-name or SHARED AS type variable-list": GOTO errmes

            IF UCASE$(n$) <> "AS" THEN
                'traditional dim syntax for SHARED
                newSharedSyntax = 0
                s$ = removesymbol(n$)
                IF Error_Happened THEN GOTO errmes
                l2$ = s$ 'either symbol or nothing

                'array?
                a = 0
                IF getelement$(a$, i) = "(" THEN
                    IF getelement$(a$, i + 1) <> ")" THEN a$ = "Expected ()": GOTO errmes
                    i = i + 2
                    a = 1
                    l2$ = l2$ + sp2 + "(" + sp2 + ")"
                END IF

                method = 1

                'specific type?
                t$ = ""
                ts$ = ""
                t3$ = ""
                IF getelement$(a$, i) = "AS" THEN
                    l2$ = l2$ + sp + SCase$("As")
                    getshrtyp:
                    i = i + 1
                    t2$ = getelement$(a$, i)
                    IF t2$ <> "," AND t2$ <> "" THEN
                        IF t$ = "" THEN t$ = t2$ ELSE t$ = t$ + " " + t2$
                        IF t3$ = "" THEN t3$ = t2$ ELSE t3$ = t3$ + sp + t2$
                        GOTO getshrtyp
                    END IF
                    IF t$ = "" THEN a$ = "Expected AS type": GOTO errmes

                    t = typname2typ(t$)
                    IF Error_Happened THEN GOTO errmes
                    IF t AND ISINCONVENTIONALMEMORY THEN t = t - ISINCONVENTIONALMEMORY
                    IF t AND ISPOINTER THEN t = t - ISPOINTER
                    IF t AND ISREFERENCE THEN t = t - ISREFERENCE
                    tsize = typname2typsize
                    method = 0
                    IF (t AND ISUDT) = 0 THEN
                        ts$ = type2symbol$(t$)
                        l2$ = l2$ + sp + SCase2$(t3$)
                    ELSE
                        t3$ = RTRIM$(udtxcname(t AND 511))
                        IF RTRIM$(udtxcname(t AND 511)) = "_MEM" AND UCASE$(t$) = "MEM" AND qb64prefix_set = 1 THEN
                            t3$ = MID$(RTRIM$(udtxcname(t AND 511)), 2)
                        END IF
                        l2$ = l2$ + sp + t3$
                    END IF
                    IF Error_Happened THEN GOTO errmes

                END IF 'as

                IF LEN(s$) <> 0 AND LEN(t$) <> 0 THEN a$ = "Expected symbol or AS type after variable name": GOTO errmes

                'no symbol of type specified, apply default
                IF s$ = "" AND t$ = "" THEN
                    IF LEFT$(n$, 1) = "_" THEN v = 27 ELSE v = ASC(UCASE$(n$)) - 64
                    s$ = defineextaz(v)
                END IF

                NormalSharedBlock:
                'switch to main module
                oldsubfunc$ = subfunc$
                subfunc$ = ""
                defdatahandle = GlobTxtBuf
                DataTxtBuf = OpenBuffer%("A", tmpdir$ + "maindata.txt")
                FreeTxtBuf = OpenBuffer%("A", tmpdir$ + "mainfree.txt")

                'use 'try' to locate the variable (if it already exists)
                n2$ = n$ + s$ + ts$ 'note: either ts$ or s$ will exist unless it is a UDT
                try = findid(n2$)
                IF Error_Happened THEN GOTO errmes
                DO WHILE try
                    IF a THEN
                        'an array

                        IF id.arraytype THEN
                            IF LEN(t$) = 0 THEN GOTO shrfound
                            t2 = id.arraytype: t2size = id.tsize
                            IF t2 AND ISINCONVENTIONALMEMORY THEN t2 = t2 - ISINCONVENTIONALMEMORY
                            IF t2 AND ISPOINTER THEN t2 = t2 - ISPOINTER
                            IF t2 AND ISREFERENCE THEN t2 = t2 - ISREFERENCE
                            IF t = t2 AND tsize = t2size THEN GOTO shrfound
                        END IF

                    ELSE
                        'not an array

                        IF id.t THEN
                            IF LEN(t$) = 0 THEN GOTO shrfound
                            t2 = id.t: t2size = id.tsize
                            IF t2 AND ISINCONVENTIONALMEMORY THEN t2 = t2 - ISINCONVENTIONALMEMORY
                            IF t2 AND ISPOINTER THEN t2 = t2 - ISPOINTER
                            IF t2 AND ISREFERENCE THEN t2 = t2 - ISREFERENCE

                            IF Debug THEN PRINT #9, "SHARED:comparing:"; t; t2, tsize; t2size

                            IF t = t2 AND tsize = t2size THEN GOTO shrfound
                        END IF

                    END IF

                    IF try = 2 THEN findanotherid = 1: try = findid(n2$) ELSE try = 0
                    IF Error_Happened THEN GOTO errmes
                LOOP
                'unknown variable
                IF a THEN a$ = "Array '" + n$ + "' not defined": GOTO errmes
                'create variable
                IF LEN(s$) THEN typ$ = s$ ELSE typ$ = t$
                IF optionexplicit THEN a$ = "Variable '" + n$ + "' (" + symbol2fulltypename$(typ$) + ") not defined": GOTO errmes
                bypassNextVariable = -1
                retval = dim2(n$, typ$, method, "")
                manageVariableList "", vWatchNewVariable$, 0, 2
                IF Error_Happened THEN GOTO errmes
                'note: variable created!

                shrfound:
                IF newSharedSyntax = 0 THEN
                    l$ = l$ + sp + RTRIM$(id.cn) + l2$
                ELSE
                    IF sharedAsLayoutAdded = 0 THEN
                        sharedAsLayoutAdded = -1
                        l$ = l$ + l2$ + sp$ + RTRIM$(id.cn) + l3$
                    ELSE
                        l$ = l$ + sp$ + RTRIM$(id.cn) + l3$
                    END IF
                END IF

                ids(currentid).share = ids(currentid).share OR 2 'set as temporarily shared

                'method must apply to the current sub/function regardless of how the variable was defined in 'main'
                lmay = LEN(RTRIM$(id.mayhave)): lmust = LEN(RTRIM$(id.musthave))
                IF lmay <> 0 OR lmust <> 0 THEN
                    IF (method = 1 AND lmust = 0) OR (method = 0 AND lmay = 0) THEN
                        revertmaymusthaven = revertmaymusthaven + 1
                        revertmaymusthave(revertmaymusthaven) = currentid
                        SWAP ids(currentid).musthave, ids(currentid).mayhave
                    END IF
                END IF

                'switch back to sub/func
                subfunc$ = oldsubfunc$
                DataTxtBuf = OpenBuffer%("A", tmpdir$ + "data" + str2$(subfuncn) + ".txt")
                FreeTxtBuf = OpenBuffer%("A", tmpdir$ + "free" + str2$(subfuncn) + ".txt")
                defdatahandle = DataTxtBuf

                IF newSharedSyntax THEN RETURN

                IF getelement$(a$, i) = "," THEN i = i + 1: l$ = l$ + sp2 + ",": GOTO subfuncshr
                IF getelement$(a$, i) <> "" THEN a$ = "Expected ,": GOTO errmes

                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                GOTO finishedline
            ELSE
                'new dim syntax for SHARED!
                i = i - 1 'relocate back to "AS"

                'estabilish the data type:
                t$ = ""
                ts$ = ""
                t3$ = ""
                n$ = ""
                previousElement$ = ""
                l2$ = sp + SCase$("As")
                sharedAsLayoutAdded = 0
                getshrtyp2:
                i = i + 1
                t2$ = getelement$(a$, i)
                IF t2$ <> "," AND t2$ <> "(" AND t2$ <> "" THEN
                    'get first variable name
                    n$ = getelement$(ca$, i)

                    IF LEN(previousElement$) THEN
                        IF t$ = "" THEN t$ = previousElement$ ELSE t$ = t$ + " " + previousElement$
                        IF t3$ = "" THEN t3$ = previousElement$ ELSE t3$ = t3$ + sp + previousElement$
                    END IF
                    previousElement$ = t2$
                    GOTO getshrtyp2
                END IF
                IF t$ = "" THEN a$ = "Expected SHARED AS type variable-list or SHARED variable-name AS type": GOTO errmes

                t = typname2typ(t$)
                IF Error_Happened THEN GOTO errmes
                IF t AND ISINCONVENTIONALMEMORY THEN t = t - ISINCONVENTIONALMEMORY
                IF t AND ISPOINTER THEN t = t - ISPOINTER
                IF t AND ISREFERENCE THEN t = t - ISREFERENCE
                tsize = typname2typsize
                method = 0
                IF (t AND ISUDT) = 0 THEN
                    ts$ = type2symbol$(t$)
                    l2$ = l2$ + sp + SCase2$(t3$)
                ELSE
                    t3$ = RTRIM$(udtxcname(t AND 511))
                    IF RTRIM$(udtxcname(t AND 511)) = "_MEM" AND UCASE$(t$) = "MEM" AND qb64prefix_set = 1 THEN
                        t3$ = MID$(RTRIM$(udtxcname(t AND 511)), 2)
                    END IF
                    l2$ = l2$ + sp + t3$
                END IF
                IF Error_Happened THEN GOTO errmes

                subfuncshr2:
                s$ = removesymbol(n$)
                IF Error_Happened THEN GOTO errmes
                IF s$ <> "" THEN
                    a$ = "Cannot use type symbol with SHARED AS type variable-list (" + s$ + ")"
                    GOTO errmes
                END IF

                'array?
                a = 0
                l3$ = ""
                IF getelement$(a$, i) = "(" THEN
                    IF getelement$(a$, i + 1) <> ")" THEN a$ = "Expected ()": GOTO errmes
                    i = i + 2
                    a = 1
                    l3$ = sp2 + "(" + sp2 + ")"
                END IF

                newSharedSyntax = -1
                GOSUB NormalSharedBlock
                newSharedSyntax = 0

                IF getelement$(a$, i) = "," THEN
                    i = i + 1
                    l$ = l$ + sp2 + ","

                    'get next variable name
                    n$ = getelement$(ca$, i): i = i + 1
                    GOTO subfuncshr2
                END IF
                IF getelement$(a$, i) <> "" THEN a$ = "Expected ,": GOTO errmes

                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                GOTO finishedline
            END IF
        END IF
    END IF

    'EXIT SUB/FUNCTION
    IF n = 2 THEN
        IF firstelement$ = "EXIT" THEN
            sf = 0
            IF secondelement$ = "FUNCTION" THEN sf = 1
            IF secondelement$ = "SUB" THEN sf = 2
            IF sf THEN

                IF LEN(subfunc) = 0 THEN a$ = "EXIT " + secondelement$ + " must be used within a " + secondelement$: GOTO errmes

                WriteBufLine MainTxtBuf, "goto exit_subfunc;"
                IF LEFT$(subfunc, 4) = "SUB_" THEN secondelement$ = SCase$("Sub") ELSE secondelement$ = SCase$("Function")
                l$ = SCase$("Exit") + sp + secondelement$
                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                GOTO finishedline
            END IF
        END IF
    END IF


    '_ECHO checking
    IF firstelement$ = "_ECHO" OR (firstelement$ = "ECHO" AND qb64prefix_set = 1) THEN
        IF Console = 0 THEN
            a$ = qb64prefix$ + "ECHO requires $CONSOLE or $CONSOLE:ONLY to be set first": GOTO errmes
        END IF
    END IF


    'ASC statement (fully inline)
    IF n >= 1 THEN
        IF firstelement$ = "ASC" THEN
            IF getelement$(a$, 2) <> "(" THEN a$ = "Expected ( after ASC": GOTO errmes

            'calculate 3 parts
            useposition = 0
            part = 1
            i = 3
            a3$ = ""
            stringvariable$ = ""
            position$ = ""
            B = 0
            DO

                IF i > n THEN 'got part 3
                    IF part <> 3 OR LEN(a3$) = 0 THEN a$ = "Expected ASC ( ... , ... ) = ...": GOTO errmes
                    expression$ = a3$
                    EXIT DO
                END IF

                a2$ = getelement$(ca$, i)
                IF a2$ = "(" THEN B = B + 1
                IF a2$ = ")" THEN B = B - 1

                IF B = -1 THEN

                    IF part = 1 THEN 'eg. ASC(a$)=65
                        IF getelement$(a$, i + 1) <> "=" THEN a$ = "Expected =": GOTO errmes
                        stringvariable$ = a3$
                        position$ = "1"
                        part = 3: a3$ = "": i = i + 1: GOTO ascgotpart
                    END IF

                    IF part = 2 THEN 'eg. ASC(a$,i)=65
                        IF getelement$(a$, i + 1) <> "=" THEN a$ = "Expected =": GOTO errmes
                        useposition = 1
                        position$ = a3$
                        part = 3: a3$ = "": i = i + 1: GOTO ascgotpart
                    END IF

                    'fall through, already in part 3

                END IF

                IF a2$ = "," AND B = 0 THEN
                    IF part = 1 THEN stringvariable$ = a3$: part = 2: a3$ = "": GOTO ascgotpart
                END IF

                IF LEN(a3$) THEN a3$ = a3$ + sp + a2$ ELSE a3$ = a2$
                ascgotpart:
                i = i + 1
            LOOP
            IF LEN(stringvariable$) = 0 OR LEN(position$) = 0 THEN a$ = "Expected ASC ( ... , ... ) = ...": GOTO errmes

            'validate stringvariable$
            stringvariable$ = fixoperationorder$(stringvariable$)
            IF Error_Happened THEN GOTO errmes
            l$ = SCase$("Asc") + sp2 + "(" + sp2 + tlayout$

            e$ = evaluate(stringvariable$, sourcetyp)
            IF Error_Happened THEN GOTO errmes
            IF (sourcetyp AND ISREFERENCE) = 0 OR (sourcetyp AND ISSTRING) = 0 THEN a$ = "Expected ASC ( string-variable , ...": GOTO errmes
            stringvariable$ = evaluatetotyp(stringvariable$, ISSTRING)
            IF Error_Happened THEN GOTO errmes



            IF position$ = "1" THEN
                IF useposition THEN l$ = l$ + sp2 + "," + sp + "1" + sp2 + ")" + sp + "=" ELSE l$ = l$ + sp2 + ")" + sp + "="

                WriteBufLine MainTxtBuf, "tqbs=" + stringvariable$ + "; if (!new_error){"
                e$ = fixoperationorder$(expression$)
                IF Error_Happened THEN GOTO errmes
                l$ = l$ + sp + tlayout$
                e$ = evaluatetotyp(e$, 32&)
                IF Error_Happened THEN GOTO errmes
                WriteBufLine MainTxtBuf, "tmp_long=" + e$ + "; if (!new_error){"
                WriteBufLine MainTxtBuf, "if (tqbs->len){tqbs->chr[0]=tmp_long;}else{error(5);}"
                WriteBufLine MainTxtBuf, "}}"

            ELSE

                WriteBufLine MainTxtBuf, "tqbs=" + stringvariable$ + "; if (!new_error){"
                e$ = fixoperationorder$(position$)
                IF Error_Happened THEN GOTO errmes
                l$ = l$ + sp2 + "," + sp + tlayout$ + sp2 + ")" + sp + "="
                e$ = evaluatetotyp(e$, 32&)
                IF Error_Happened THEN GOTO errmes
                WriteBufLine MainTxtBuf, "tmp_fileno=" + e$ + "; if (!new_error){"
                e$ = fixoperationorder$(expression$)
                IF Error_Happened THEN GOTO errmes
                l$ = l$ + sp + tlayout$
                e$ = evaluatetotyp(e$, 32&)
                IF Error_Happened THEN GOTO errmes
                WriteBufLine MainTxtBuf, "tmp_long=" + e$ + "; if (!new_error){"
                WriteBufLine MainTxtBuf, "if ((tmp_fileno>0)&&(tmp_fileno<=tqbs->len)){tqbs->chr[tmp_fileno-1]=tmp_long;}else{error(5);}"
                WriteBufLine MainTxtBuf, "}}}"

            END IF
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            GOTO finishedline
        END IF
    END IF




    'MID$ statement
    IF n >= 1 THEN
        IF firstelement$ = "MID$" THEN
            IF getelement$(a$, 2) <> "(" THEN a$ = "Expected ( after MID$": GOTO errmes
            'calculate 4 parts
            length$ = ""
            part = 1
            i = 3
            a3$ = ""
            stringvariable$ = ""
            start$ = ""
            B = 0
            DO
                IF i > n THEN
                    IF part <> 4 OR a3$ = "" THEN a$ = "Expected MID$(...)=...": GOTO errmes
                    stringexpression$ = a3$
                    EXIT DO
                END IF
                a2$ = getelement$(ca$, i)
                IF a2$ = "(" THEN B = B + 1
                IF a2$ = ")" THEN B = B - 1
                IF B = -1 THEN
                    IF part = 2 THEN
                        IF getelement$(a$, i + 1) <> "=" THEN a$ = "Expected = after )": GOTO errmes
                        start$ = a3$: part = 4: a3$ = "": i = i + 1: GOTO midgotpart
                    END IF
                    IF part = 3 THEN
                        IF getelement$(a$, i + 1) <> "=" THEN a$ = "Expected = after )": GOTO errmes
                        IF a3$ = "" THEN a$ = "Omit , before ) if omitting length in MID$ statement": GOTO errmes
                        length$ = a3$: part = 4: a3$ = "": i = i + 1: GOTO midgotpart
                    END IF
                END IF
                IF a2$ = "," AND B = 0 THEN
                    IF part = 1 THEN stringvariable$ = a3$: part = 2: a3$ = "": GOTO midgotpart
                    IF part = 2 THEN start$ = a3$: part = 3: a3$ = "": GOTO midgotpart
                END IF
                IF LEN(a3$) THEN a3$ = a3$ + sp + a2$ ELSE a3$ = a2$
                midgotpart:
                i = i + 1
            LOOP
            IF stringvariable$ = "" THEN a$ = "Syntax error - first parameter must be a string variable/array-element": GOTO errmes
            IF start$ = "" THEN a$ = "Syntax error - second parameter not optional": GOTO errmes
            'check if it is a valid source string
            stringvariable$ = fixoperationorder$(stringvariable$)
            IF Error_Happened THEN GOTO errmes
            l$ = SCase$("Mid$") + sp2 + "(" + sp2 + tlayout$
            e$ = evaluate(stringvariable$, sourcetyp)
            IF Error_Happened THEN GOTO errmes
            IF (sourcetyp AND ISREFERENCE) = 0 OR (sourcetyp AND ISSTRING) = 0 THEN a$ = "MID$ expects a string variable/array-element as its first argument": GOTO errmes
            stringvariable$ = evaluatetotyp(stringvariable$, ISSTRING)
            IF Error_Happened THEN GOTO errmes

            start$ = fixoperationorder$(start$)
            IF Error_Happened THEN GOTO errmes
            l$ = l$ + sp2 + "," + sp + tlayout$
            start$ = evaluatetotyp((start$), 32&)

            stringexpression$ = fixoperationorder$(stringexpression$)
            IF Error_Happened THEN GOTO errmes
            l2$ = tlayout$
            stringexpression$ = evaluatetotyp(stringexpression$, ISSTRING)
            IF Error_Happened THEN GOTO errmes

            IF LEN(length$) THEN
                length$ = fixoperationorder$(length$)
                IF Error_Happened THEN GOTO errmes
                l$ = l$ + sp2 + "," + sp + tlayout$
                length$ = evaluatetotyp(length$, 32&)
                IF Error_Happened THEN GOTO errmes
                WriteBufLine MainTxtBuf, "sub_mid(" + stringvariable$ + "," + start$ + "," + length$ + "," + stringexpression$ + ",1);"
            ELSE
                WriteBufLine MainTxtBuf, "sub_mid(" + stringvariable$ + "," + start$ + ",0," + stringexpression$ + ",0);"
            END IF

            l$ = l$ + sp2 + ")" + sp + "=" + sp + l2$
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            GOTO finishedline
        END IF
    END IF


    IF n >= 2 THEN
        IF firstelement$ = "ERASE" THEN
            i = 2
            l$ = SCase$("Erase")
            erasenextarray:
            var$ = getelement$(ca$, i)
            x$ = var$: ls$ = removesymbol(x$)
            IF Error_Happened THEN GOTO errmes

            IF FindArray(var$) THEN
                IF Error_Happened THEN GOTO errmes
                l$ = l$ + sp + RTRIM$(id.cn) + ls$
                'erase the array
                clearerase:
                n$ = RTRIM$(id.callname)
                bytesperelement$ = str2((id.arraytype AND 511) \ 8)
                IF id.arraytype AND ISSTRING THEN bytesperelement$ = str2(id.tsize)
                IF id.arraytype AND ISOFFSETINBITS THEN bytesperelement$ = str2((id.arraytype AND 511)) + "/8+1"
                IF id.arraytype AND ISUDT THEN
                    bytesperelement$ = str2(udtxsize(id.arraytype AND 511) \ 8)
                END IF
                WriteBufLine MainTxtBuf, "if (" + n$ + "[2]&1){" 'array is defined
                WriteBufLine MainTxtBuf, "if (" + n$ + "[2]&2){" 'array is static
                IF (id.arraytype AND ISSTRING) <> 0 AND (id.arraytype AND ISFIXEDLENGTH) = 0 THEN
                    WriteBufRawData MainTxtBuf, "tmp_long="
                    FOR i2 = 1 TO ABS(id.arrayelements)
                        IF i2 <> 1 THEN WriteBufRawData MainTxtBuf, "*"
                        WriteBufRawData MainTxtBuf, n$ + "[" + str2(i2 * 4 - 4 + 5) + "]"
                    NEXT
                    WriteBufLine MainTxtBuf, ";"
                    WriteBufLine MainTxtBuf, "while(tmp_long--){"
                    WriteBufLine MainTxtBuf, "((qbs*)(((uint64*)(" + n$ + "[0]))[tmp_long]))->len=0;"
                    WriteBufLine MainTxtBuf, "}"
                ELSE
                    'numeric
                    'clear array
                    WriteBufRawData MainTxtBuf, "memset((void*)(" + n$ + "[0]),0,"
                    FOR i2 = 1 TO ABS(id.arrayelements)
                        IF i2 <> 1 THEN WriteBufRawData MainTxtBuf, "*"
                        WriteBufRawData MainTxtBuf, n$ + "[" + str2(i2 * 4 - 4 + 5) + "]"
                    NEXT
                    WriteBufLine MainTxtBuf, "*" + bytesperelement$ + ");"
                END IF
                WriteBufLine MainTxtBuf, "}else{" 'array is dynamic
                '1. free memory & any allocated strings
                IF (id.arraytype AND ISSTRING) <> 0 AND (id.arraytype AND ISFIXEDLENGTH) = 0 THEN
                    'free strings
                    WriteBufRawData MainTxtBuf, "tmp_long="
                    FOR i2 = 1 TO ABS(id.arrayelements)
                        IF i2 <> 1 THEN WriteBufRawData MainTxtBuf, "*"
                        WriteBufRawData MainTxtBuf, n$ + "[" + str2(i2 * 4 - 4 + 5) + "]"
                    NEXT
                    WriteBufLine MainTxtBuf, ";"
                    WriteBufLine MainTxtBuf, "while(tmp_long--){"
                    WriteBufLine MainTxtBuf, "qbs_free((qbs*)(((uint64*)(" + n$ + "[0]))[tmp_long]));"
                    WriteBufLine MainTxtBuf, "}"
                    'free memory
                    WriteBufLine MainTxtBuf, "free((void*)(" + n$ + "[0]));"
                ELSE
                    'free memory
                    WriteBufLine MainTxtBuf, "if (" + n$ + "[2]&4){" 'cmem array
                    WriteBufLine MainTxtBuf, "cmem_dynamic_free((uint8*)(" + n$ + "[0]));"
                    WriteBufLine MainTxtBuf, "}else{" 'non-cmem array
                    WriteBufLine MainTxtBuf, "free((void*)(" + n$ + "[0]));"
                    WriteBufLine MainTxtBuf, "}"
                END IF
                '2. set array (and its elements) as undefined
                WriteBufLine MainTxtBuf, n$ + "[2]^=1;" 'remove defined flag, keeping other flags (such as cmem)
                'set dimensions as undefined
                FOR i2 = 1 TO ABS(id.arrayelements)
                    B = i2 * 4
                    WriteBufLine MainTxtBuf, n$ + "[" + str2(B) + "]=2147483647;" 'base
                    WriteBufLine MainTxtBuf, n$ + "[" + str2(B + 1) + "]=0;" 'num. index
                    WriteBufLine MainTxtBuf, n$ + "[" + str2(B + 2) + "]=0;" 'multiplier
                NEXT
                IF (id.arraytype AND ISSTRING) <> 0 AND (id.arraytype AND ISFIXEDLENGTH) = 0 THEN
                    WriteBufLine MainTxtBuf, n$ + "[0]=(ptrszint)&nothingstring;"
                ELSE
                    WriteBufLine MainTxtBuf, n$ + "[0]=(ptrszint)nothingvalue;"
                END IF
                WriteBufLine MainTxtBuf, "}" 'static/dynamic
                WriteBufLine MainTxtBuf, "}" 'array is defined
                IF clearerasereturn = 1 THEN clearerasereturn = 0: GOTO clearerasereturned
                GOTO erasedarray
            END IF
            IF Error_Happened THEN GOTO errmes
            a$ = "Undefined array passed to ERASE": GOTO errmes

            erasedarray:
            IF i < n THEN
                i = i + 1: n$ = getelement$(a$, i): IF n$ <> "," THEN a$ = "Expected ,": GOTO errmes
                l$ = l$ + sp2 + ","
                i = i + 1: IF i > n THEN a$ = "Expected , ...": GOTO errmes
                GOTO erasenextarray
            END IF

            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            GOTO finishedline
        END IF
    END IF


    'DIM/REDIM/STATIC
    IF n >= 2 THEN
        dimoption = 0: redimoption = 0: commonoption = 0
        IF firstelement$ = "DIM" THEN l$ = SCase$("Dim"): dimoption = 1
        IF firstelement$ = "REDIM" THEN
            l$ = SCase$("ReDim")
            dimoption = 2: redimoption = 1
            IF secondelement$ = "_PRESERVE" OR (secondelement$ = "PRESERVE" AND qb64prefix_set = 1) THEN
                redimoption = 2
                IF secondelement$ = "_PRESERVE" THEN
                    l$ = l$ + sp + SCase$("_Preserve")
                ELSE
                    l$ = l$ + sp + SCase$("Preserve")
                END IF
                IF n = 2 THEN a$ = "Expected REDIM " + qb64prefix$ + "PRESERVE ...": GOTO errmes
            END IF
        END IF
        IF firstelement$ = "STATIC" THEN l$ = SCase$("Static"): dimoption = 3
        IF firstelement$ = "COMMON" THEN l$ = SCase$("Common"): dimoption = 1: commonoption = 1
        IF dimoption THEN

            IF dimoption = 3 AND subfuncn = 0 THEN a$ = "STATIC must be used within a SUB/FUNCTION": GOTO errmes
            IF commonoption = 1 AND subfuncn <> 0 THEN a$ = "COMMON cannot be used within a SUB/FUNCTION": GOTO errmes

            i = 2
            IF redimoption = 2 THEN i = 3

            IF dimoption <> 3 THEN 'shared cannot be static
                a2$ = getelement(a$, i)
                IF a2$ = "SHARED" THEN
                    IF subfuncn <> 0 THEN a$ = "DIM/REDIM SHARED invalid within a SUB/FUNCTION": GOTO errmes
                    dimshared = 1
                    i = i + 1
                    l$ = l$ + sp + SCase$("Shared")
                END IF
            END IF

            IF dimoption = 3 THEN dimstatic = 1: AllowLocalName = 1

            'look for new dim syntax: DIM AS variabletype var1, var2, etc....
            e$ = getelement$(a$, i)
            IF e$ <> "AS" THEN
                'no "AS", so this is the traditional dim syntax
                dimnext:
                newDimSyntax = 0
                notype = 0
                listarray = 0


                'old chain code
                'chaincommonarray=0

                varname$ = getelement(ca$, i): i = i + 1
                IF varname$ = "" THEN a$ = "Expected " + firstelement$ + " variable-name or " + firstelement$ + " AS type variable-list": GOTO errmes

                'get the next element
                IF i >= n + 1 THEN e$ = "" ELSE e$ = getelement(a$, i): i = i + 1

                'check if next element is a ( to create an array
                elements$ = ""

                IF e$ = "(" THEN
                    B = 1
                    FOR i = i TO n
                        e$ = getelement(ca$, i)
                        IF e$ = "(" THEN B = B + 1
                        IF e$ = ")" THEN B = B - 1
                        IF B = 0 THEN EXIT FOR
                        IF LEN(elements$) THEN elements$ = elements$ + sp + e$ ELSE elements$ = e$
                    NEXT
                    IF B <> 0 THEN a$ = "Expected )": GOTO errmes
                    i = i + 1 'set i to point to the next element

                    IF commonoption THEN elements$ = "?"


                    IF Debug THEN PRINT #9, "DIM2:array:elements$:[" + elements$ + "]"

                    'arrayname() means list array to it will automatically be static when it is formally dimensioned later
                    'note: listed arrays are always created in dynamic memory, but their contents are not erased
                    '      this differs from static arrays from SUB...STATIC and the unique QB64 method -> STATIC arrayname(100)
                    IF dimoption = 3 THEN 'STATIC used
                        IF LEN(elements$) = 0 THEN 'nothing between brackets
                            listarray = 1 'add to static list
                        END IF
                    END IF

                    'last element was ")"
                    'get next element
                    IF i >= n + 1 THEN e$ = "" ELSE e$ = getelement(a$, i): i = i + 1
                END IF 'e$="("
                d$ = e$

                dimmethod = 0

                appendname$ = "" 'the symbol to append to name returned by dim2
                appendtype$ = "" 'eg. sp+AS+spINTEGER
                dim2typepassback$ = ""

                'does varname have an appended symbol?
                s$ = removesymbol$(varname$)
                IF Error_Happened THEN GOTO errmes
                IF validname(varname$) = 0 THEN a$ = "Invalid variable name": GOTO errmes

                IF s$ <> "" THEN
                    typ$ = s$
                    dimmethod = 1
                    appendname$ = typ$
                    GOTO dimgottyp
                END IF

                IF d$ = "AS" THEN
                    appendtype$ = sp + SCase$("As")
                    typ$ = ""
                    FOR i = i TO n
                        d$ = getelement(a$, i)
                        IF d$ = "," THEN i = i + 1: EXIT FOR
                        typ$ = typ$ + d$ + " "
                        appendtype$ = appendtype$ + sp + d$
                        d$ = ""
                    NEXT
                    appendtype$ = SCase2$(appendtype$) 'capitalise default types (udt override this later if necessary)
                    typ$ = RTRIM$(typ$)
                    GOTO dimgottyp
                END IF

                'auto-define type based on name
                notype = 1
                IF LEFT$(varname$, 1) = "_" THEN v = 27 ELSE v = ASC(UCASE$(varname$)) - 64
                typ$ = defineaz(v)
                dimmethod = 1
                GOTO dimgottyp

                dimgottyp:
                IF d$ <> "" AND d$ <> "," THEN a$ = "DIM: Expected ,": GOTO errmes

                'In QBASIC, if no type info is given it can refer to an expeicit/formally defined array
                IF notype <> 0 AND dimoption <> 3 AND dimoption <> 1 THEN 'not DIM or STATIC which only create new content
                    IF LEN(elements$) THEN 'an array
                        IF FindArray(varname$) THEN
                            IF LEN(RTRIM$(id.mayhave)) THEN 'explict/formally defined
                                typ$ = id2fulltypename$ 'adopt type
                                dimmethod = 0 'set as formally defined
                            END IF
                        END IF
                    END IF
                END IF

                NormalDimBlock:
                IF dimoption = 3 AND LEN(elements$) THEN 'eg. STATIC a(100)
                    'does a conflicting array exist? (use findarray) if so again this should lead to duplicate definition
                    typ2$ = symbol2fulltypename$(typ$)
                    t = typname2typ(typ2$): ts = typname2typsize
                    'try name without any extension
                    IF FindArray(varname$) THEN 'name without any symbol
                        IF id.insubfuncn = subfuncn THEN 'global cannot conflict with static
                            IF LEN(RTRIM$(id.musthave)) THEN
                                'if types match then fail
                                IF (id.arraytype AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) = (t AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) THEN
                                    IF ts = id.tsize THEN
                                        a$ = "Name already in use (" + varname$ + ")": GOTO errmes
                                    END IF
                                END IF
                            ELSE
                                IF dimmethod = 0 THEN
                                    a$ = "Name already in use (" + varname$ + ")": GOTO errmes 'explicit over explicit
                                ELSE
                                    'if types match then fail
                                    IF (id.arraytype AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) = (t AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) THEN
                                        IF ts = id.tsize THEN
                                            a$ = "Name already in use (" + varname$ + ")": GOTO errmes
                                        END IF
                                    END IF
                                END IF
                            END IF
                        END IF
                    END IF
                    'add extension (if possible)
                    IF (t AND ISUDT) = 0 THEN
                        s2$ = type2symbol$(typ2$)
                        IF Error_Happened THEN GOTO errmes
                        IF FindArray(varname$ + s2$) THEN
                            IF id.insubfuncn = subfuncn THEN 'global cannot conflict with static
                                IF LEN(RTRIM$(id.musthave)) THEN
                                    'if types match then fail
                                    IF (id.arraytype AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) = (t AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) THEN
                                        IF ts = id.tsize THEN
                                            a$ = "Name already in use (" + varname$ + s2$ + ")": GOTO errmes
                                        END IF
                                    END IF
                                ELSE
                                    IF dimmethod = 0 THEN
                                        a$ = "Name already in use (" + varname$ + s2$ + ")": GOTO errmes 'explicit over explicit
                                    ELSE
                                        'if types match then fail
                                        IF (id.arraytype AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) = (t AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) THEN
                                            IF ts = id.tsize THEN
                                                a$ = "Name already in use (" + varname$ + s2$ + ")": GOTO errmes
                                            END IF
                                        END IF
                                    END IF
                                END IF
                            END IF
                        END IF
                    END IF 'not a UDT
                END IF

                IF listarray THEN 'eg. STATIC a()
                    'note: list is cleared by END SUB/FUNCTION

                    'is a conflicting array already listed? if so this should cause a duplicate definition error
                    'check for conflict within list:
                    xi = 1
                    FOR x = 1 TO staticarraylistn
                        varname2$ = getelement$(staticarraylist, xi): xi = xi + 1
                        typ2$ = getelement$(staticarraylist, xi): xi = xi + 1
                        dimmethod2 = VAL(getelement$(staticarraylist, xi)): xi = xi + 1
                        'check if they are similar
                        IF UCASE$(varname$) = UCASE$(varname2$) THEN
                            IF dimmethod2 = 1 THEN
                                'old using symbol
                                IF symbol2fulltypename$(typ$) = typ2$ THEN a$ = "Name already in use (" + varname$ + ")": GOTO errmes
                            ELSE
                                'old using AS
                                IF dimmethod = 0 THEN
                                    a$ = "Name already in use (" + varname$ + ")": GOTO errmes
                                ELSE
                                    IF symbol2fulltypename$(typ$) = typ2$ THEN a$ = "Name already in use (" + varname$ + ")": GOTO errmes
                                END IF
                            END IF
                        END IF
                    NEXT

                    'does a conflicting array exist? (use findarray) if so again this should lead to duplicate definition
                    typ2$ = symbol2fulltypename$(typ$)
                    t = typname2typ(typ2$): ts = typname2typsize
                    'try name without any extension
                    IF FindArray(varname$) THEN 'name without any symbol
                        IF id.insubfuncn = subfuncn THEN 'global cannot conflict with static
                            IF LEN(RTRIM$(id.musthave)) THEN
                                'if types match then fail
                                IF (id.arraytype AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) = (t AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) THEN
                                    IF ts = id.tsize THEN
                                        a$ = "Name already in use (" + varname$ + ")": GOTO errmes
                                    END IF
                                END IF
                            ELSE
                                IF dimmethod = 0 THEN
                                    a$ = "Name already in use (" + varname$ + ")": GOTO errmes 'explicit over explicit
                                ELSE
                                    'if types match then fail
                                    IF (id.arraytype AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) = (t AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) THEN
                                        IF ts = id.tsize THEN
                                            a$ = "Name already in use (" + varname$ + ")": GOTO errmes
                                        END IF
                                    END IF
                                END IF
                            END IF
                        END IF
                    END IF
                    'add extension (if possible)
                    IF (t AND ISUDT) = 0 THEN
                        s2$ = type2symbol$(typ2$)
                        IF Error_Happened THEN GOTO errmes
                        IF FindArray(varname$ + s2$) THEN
                            IF id.insubfuncn = subfuncn THEN 'global cannot conflict with static
                                IF LEN(RTRIM$(id.musthave)) THEN
                                    'if types match then fail
                                    IF (id.arraytype AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) = (t AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) THEN
                                        IF ts = id.tsize THEN
                                            a$ = "Name already in use (" + varname$ + s2$ + ")": GOTO errmes
                                        END IF
                                    END IF
                                ELSE
                                    IF dimmethod = 0 THEN
                                        a$ = "Name already in use (" + varname$ + s2$ + ")": GOTO errmes 'explicit over explicit
                                    ELSE
                                        'if types match then fail
                                        IF (id.arraytype AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) = (t AND (ISFLOAT + ISUDT + 511 + ISUNSIGNED + ISSTRING + ISFIXEDLENGTH)) THEN
                                            IF ts = id.tsize THEN
                                                a$ = "Name already in use (" + varname$ + s2$ + ")": GOTO errmes
                                            END IF
                                        END IF
                                    END IF
                                END IF
                            END IF
                        END IF
                    END IF 'not a UDT

                    'note: static list arrays cannot be created until they are formally [or informally] (RE)DIM'd later
                    IF LEN(staticarraylist) THEN staticarraylist = staticarraylist + sp
                    staticarraylist = staticarraylist + varname$ + sp + symbol2fulltypename$(typ$) + sp + str2(dimmethod)
                    IF Error_Happened THEN GOTO errmes
                    staticarraylistn = staticarraylistn + 1
                    l$ = l$ + sp + varname$ + appendname$ + sp2 + "(" + sp2 + ")" + appendtype$
                    'note: none of the following code is run, dim2 call is also skipped

                ELSE

                    olddimstatic = dimstatic

                    'check if varname is on the static list
                    IF LEN(elements$) THEN 'it's an array
                        IF subfuncn THEN 'it's in a sub/function
                            xi = 1
                            FOR x = 1 TO staticarraylistn
                                varname2$ = getelement$(staticarraylist, xi): xi = xi + 1
                                typ2$ = getelement$(staticarraylist, xi): xi = xi + 1
                                dimmethod2 = VAL(getelement$(staticarraylist, xi)): xi = xi + 1
                                'check if they are similar
                                IF UCASE$(varname$) = UCASE$(varname2$) THEN
                                    IF symbol2fulltypename$(typ$) = typ2$ THEN
                                        IF Error_Happened THEN GOTO errmes
                                        IF dimmethod = dimmethod2 THEN
                                            'match found!
                                            varname$ = varname2$
                                            dimstatic = 3
                                            IF dimoption = 3 THEN a$ = "Array already listed as STATIC": GOTO errmes
                                        END IF
                                    END IF 'typ
                                END IF 'varname
                            NEXT
                        END IF
                    END IF

                    'COMMON exception
                    'note: COMMON alone does not imply SHARED
                    '      if either(or both) COMMON & later DIM have SHARED, variable becomes shared
                    IF commonoption THEN
                        IF LEN(elements$) THEN

                            'add array to list
                            IF LEN(commonarraylist) THEN commonarraylist = commonarraylist + sp
                            'note: dimmethod distinguishes between a%(...) vs a(...) AS INTEGER
                            commonarraylist = commonarraylist + varname$ + sp + symbol2fulltypename$(typ$) + sp + str2(dimmethod) + sp + str2(dimshared)
                            IF Error_Happened THEN GOTO errmes
                            commonarraylistn = commonarraylistn + 1
                            IF Debug THEN PRINT #9, "common listed:" + varname$ + sp + symbol2fulltypename$(typ$) + sp + str2(dimmethod) + sp + str2(dimshared)
                            IF Error_Happened THEN GOTO errmes

                            x = 0

                            v$ = varname$
                            IF dimmethod = 1 THEN v$ = v$ + typ$
                            try = findid(v$)
                            IF Error_Happened THEN GOTO errmes
                            DO WHILE try
                                IF id.arraytype THEN

                                    t = typname2typ(typ$)
                                    IF Error_Happened THEN GOTO errmes
                                    s = typname2typsize
                                    match = 1
                                    'note: dimmethod 2 is already matched
                                    IF dimmethod = 0 THEN
                                        t2 = id.arraytype
                                        s2 = id.tsize
                                        IF (t AND ISFLOAT) <> (t2 AND ISFLOAT) THEN match = 0
                                        IF (t AND ISUNSIGNED) <> (t2 AND ISUNSIGNED) THEN match = 0
                                        IF (t AND ISSTRING) <> (t2 AND ISSTRING) THEN match = 0
                                        IF (t AND ISFIXEDLENGTH) <> (t2 AND ISFIXEDLENGTH) THEN match = 0
                                        IF (t AND ISOFFSETINBITS) <> (t2 AND ISOFFSETINBITS) THEN match = 0
                                        IF (t AND ISUDT) <> (t2 AND ISUDT) THEN match = 0
                                        IF (t AND 511) <> (t2 AND 511) THEN match = 0
                                        IF s <> s2 THEN match = 0
                                        'check for implicit/explicit declaration match
                                        oldmethod = 0: IF LEN(RTRIM$(id.musthave)) THEN oldmethod = 1
                                        IF oldmethod <> dimmethod THEN match = 0
                                    END IF

                                    IF match THEN
                                        x = currentid
                                        IF dimshared THEN ids(x).share = 1 'share if necessary
                                        tlayout$ = RTRIM$(id.cn) + sp + "(" + sp2 + ")"

                                        IF dimmethod = 0 THEN
                                            IF t AND ISUDT THEN
                                                dim2typepassback$ = RTRIM$(udtxcname(t AND 511))
                                                IF UCASE$(typ$) = "MEM" AND qb64prefix_set = 1 AND RTRIM$(udtxcname(t AND 511)) = "_MEM" THEN
                                                    dim2typepassback$ = MID$(RTRIM$(udtxcname(t AND 511)), 2)
                                                END IF
                                            ELSE
                                                dim2typepassback$ = typ$
                                                DO WHILE INSTR(dim2typepassback$, " ")
                                                    ASC(dim2typepassback$, INSTR(dim2typepassback$, " ")) = ASC(sp)
                                                LOOP
                                                dim2typepassback$ = SCase2$(dim2typepassback$)
                                            END IF
                                        END IF 'method 0

                                        EXIT DO
                                    END IF 'match

                                END IF 'arraytype
                                IF try = 2 THEN findanotherid = 1: try = findid(v$) ELSE try = 0
                                IF Error_Happened THEN GOTO errmes
                            LOOP

                            IF x = 0 THEN x = idn + 1

                            'note: the following code only adds include directives, everything else is defered
                            ChainTxtBuf = OpenBuffer%("A", tmpdir$ + "chain.txt")
                            'include directive
                            WriteBufLine ChainTxtBuf, "#include " + CHR$(34) + "chain" + str2$(x) + ".txt" + CHR$(34)
                            'create/clear include file
                            ChainTxtBuf = OpenBuffer%("O", tmpdir$ + "chain" + str2$(x) + ".txt")

                            ChainTxtBuf = OpenBuffer%("A", tmpdir$ + "inpchain.txt")
                            'include directive
                            WriteBufLine ChainTxtBuf, "#include " + CHR$(34) + "inpchain" + str2$(x) + ".txt" + CHR$(34)
                            'create/clear include file
                            ChainTxtBuf = OpenBuffer%("O", tmpdir$ + "inpchain" + str2$(x) + ".txt")

                            'note: elements$="?"
                            IF x <> idn + 1 THEN GOTO skipdim 'array already exists
                            GOTO dimcommonarray

                        END IF
                    END IF

                    'is varname on common list?
                    '******
                    IF LEN(elements$) THEN 'it's an array
                        IF subfuncn = 0 THEN 'not in a sub/function

                            IF Debug THEN PRINT #9, "common checking:" + varname$

                            xi = 1
                            FOR x = 1 TO commonarraylistn
                                varname2$ = getelement$(commonarraylist, xi): xi = xi + 1
                                typ2$ = getelement$(commonarraylist, xi): xi = xi + 1
                                dimmethod2 = VAL(getelement$(commonarraylist, xi)): xi = xi + 1
                                dimshared2 = VAL(getelement$(commonarraylist, xi)): xi = xi + 1
                                IF Debug THEN PRINT #9, "common checking against:" + varname2$ + sp + typ2$ + sp + str2(dimmethod2) + sp + str2(dimshared2)
                                'check if they are similar
                                IF varname$ = varname2$ THEN
                                    IF symbol2fulltypename$(typ$) = typ2$ THEN
                                        IF Error_Happened THEN GOTO errmes
                                        IF dimmethod = dimmethod2 THEN

                                            'match found!
                                            'enforce shared status (if necessary)
                                            IF dimshared2 THEN dimshared = dimshared OR 2 'temp force SHARED

                                            'old chain code
                                            'chaincommonarray=x

                                        END IF 'method
                                    END IF 'typ
                                END IF 'varname
                            NEXT
                        END IF
                    END IF

                    dimcommonarray:
                    retval = dim2(varname$, typ$, dimmethod, elements$)
                    IF Error_Happened THEN GOTO errmes
                    skipdim:
                    IF dimshared >= 2 THEN dimshared = dimshared - 2

                    'non-array COMMON variable
                    IF commonoption <> 0 AND LEN(elements$) = 0 THEN

                        'CHAIN.TXT (save)

                        use_global_byte_elements = 1

                        'switch output from main.txt to chain.txt
                        MainTxtBuf = OpenBuffer%("A", tmpdir$ + "chain.txt")
                        l2$ = tlayout$

                        WriteBufLine MainTxtBuf, "int32val=1;" 'simple variable
                        WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)&int32val,4," + NewByteElement$ + "),0);"

                        t = id.t
                        bits = t AND 511
                        IF t AND ISUDT THEN bits = udtxsize(t AND 511)
                        IF t AND ISSTRING THEN
                            IF t AND ISFIXEDLENGTH THEN
                                bits = id.tsize * 8
                            ELSE
                                WriteBufLine MainTxtBuf, "int64val=__STRING_" + RTRIM$(id.n) + "->len*8;"
                                bits = 0
                            END IF
                        END IF

                        IF bits THEN
                            WriteBufLine MainTxtBuf, "int64val=" + str2$(bits) + ";" 'size in bits
                        END IF
                        WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)&int64val,8," + NewByteElement$ + "),0);"

                        'put the variable
                        e$ = RTRIM$(id.n)

                        IF (t AND ISUDT) = 0 THEN
                            IF t AND ISFIXEDLENGTH THEN
                                e$ = e$ + "$" + str2$(id.tsize)
                            ELSE
                                e$ = e$ + typevalue2symbol$(t)
                                IF Error_Happened THEN GOTO errmes
                            END IF
                        END IF
                        e$ = evaluatetotyp(fixoperationorder$(e$), -4)
                        IF Error_Happened THEN GOTO errmes

                        WriteBufLine MainTxtBuf, "sub_put(FF,NULL," + e$ + ",0);"

                        tlayout$ = l2$
                        'revert output to main.txt
                        MainTxtBuf = OpenBuffer%("A", tmpdir$ + "main.txt")


                        'INPCHAIN.TXT (load)

                        'switch output from main.txt to chain.txt
                        MainTxtBuf = OpenBuffer%("A", tmpdir$ + "inpchain.txt")
                        l2$ = tlayout$


                        WriteBufLine MainTxtBuf, "if (int32val==1){"
                        'get the size in bits
                        WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int64val,8," + NewByteElement$ + "),0);"
                        '***assume correct size***

                        e$ = RTRIM$(id.n)
                        t = id.t
                        IF (t AND ISUDT) = 0 THEN
                            IF t AND ISFIXEDLENGTH THEN
                                e$ = e$ + "$" + str2$(id.tsize)
                            ELSE
                                e$ = e$ + typevalue2symbol$(t)
                                IF Error_Happened THEN GOTO errmes
                            END IF
                        END IF

                        IF t AND ISSTRING THEN
                            IF (t AND ISFIXEDLENGTH) = 0 THEN
                                WriteBufLine MainTxtBuf, "tqbs=qbs_new(int64val>>3,1);"
                                WriteBufLine MainTxtBuf, "qbs_set(__STRING_" + RTRIM$(id.n) + ",tqbs);"
                                'now that the string is the correct size, the following GET command will work correctly...
                            END IF
                        END IF

                        e$ = evaluatetotyp(fixoperationorder$(e$), -4)
                        IF Error_Happened THEN GOTO errmes
                        WriteBufLine MainTxtBuf, "sub_get(FF,NULL," + e$ + ",0);"

                        WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int32val,4," + NewByteElement$ + "),0);" 'get next command
                        WriteBufLine MainTxtBuf, "}"

                        tlayout$ = l2$
                        'revert output to main.txt
                        MainTxtBuf = OpenBuffer%("A", tmpdir$ + "main.txt")

                        use_global_byte_elements = 0

                    END IF

                    commonarraylisted:

                    IF LEN(appendtype$) > 0 AND newDimSyntax = -1 THEN
                        IF LEN(dim2typepassback$) THEN appendtype$ = sp + SCase$("As") + sp + dim2typepassback$
                        IF newDimSyntaxTypePassBack = 0 THEN
                            newDimSyntaxTypePassBack = -1
                            l$ = l$ + appendtype$
                        END IF
                    END IF

                    n2 = numelements(tlayout$)
                    l$ = l$ + sp + getelement$(tlayout$, 1) + appendname$
                    IF n2 > 1 THEN
                        l$ = l$ + sp2 + getelements$(tlayout$, 2, n2)
                    END IF

                    IF LEN(appendtype$) > 0 AND newDimSyntax = 0 THEN
                        IF LEN(dim2typepassback$) THEN appendtype$ = sp + SCase$("As") + sp + dim2typepassback$
                        l$ = l$ + appendtype$
                    END IF

                    'modify first element name to include symbol

                    dimstatic = olddimstatic

                END IF 'listarray=0

                IF newDimSyntax THEN RETURN

                IF d$ = "," THEN l$ = l$ + sp2 + ",": GOTO dimnext

                dimoption = 0
                dimshared = 0
                redimoption = 0
                IF dimstatic = 1 THEN dimstatic = 0
                AllowLocalName = 0

                layoutdone = 1
                IF LEN(layout$) = 0 THEN layout$ = l$ ELSE layout$ = layout$ + sp + l$

                GOTO finishedline
            ELSE
                'yes, this is the new dim syntax.
                i = i + 1 'skip "AS"
                newDimSyntaxTypePassBack = 0

                'estabilish the data type:
                appendname$ = ""
                appendtype$ = sp + SCase$("As")
                typ$ = ""
                varname$ = ""
                previousElement$ = ""
                FOR i = i TO n
                    d$ = getelement(a$, i)
                    IF d$ = "," OR d$ = "(" THEN EXIT FOR
                    varname$ = getelement(ca$, i)
                    IF LEN(previousElement$) THEN
                        typ$ = typ$ + previousElement$ + " "
                        appendtype$ = appendtype$ + sp + previousElement$
                    END IF
                    previousElement$ = d$
                    d$ = ""
                NEXT
                appendtype$ = SCase2$(appendtype$) 'capitalise default types (udt override this later if necessary)
                typ$ = RTRIM$(typ$)

                dimnext2:
                notype = 0
                listarray = 0

                IF typ$ = "" OR varname$ = "" THEN a$ = "Expected " + firstelement$ + " AS type variable-list or " + firstelement$ + " variable-name AS type": GOTO errmes

                'get the next element
                IF i >= n + 1 THEN e$ = "" ELSE e$ = getelement(a$, i): i = i + 1

                'check if next element is a ( to create an array
                elements$ = ""

                IF e$ = "(" THEN
                    B = 1
                    FOR i = i TO n
                        e$ = getelement(ca$, i)
                        IF e$ = "(" THEN B = B + 1
                        IF e$ = ")" THEN B = B - 1
                        IF B = 0 THEN EXIT FOR
                        IF LEN(elements$) THEN elements$ = elements$ + sp + e$ ELSE elements$ = e$
                    NEXT
                    IF B <> 0 THEN a$ = "Expected )": GOTO errmes
                    i = i + 1 'set i to point to the next element

                    IF commonoption THEN elements$ = "?"


                    IF Debug THEN PRINT #9, "DIM2:array:elements$:[" + elements$ + "]"

                    'arrayname() means list array to it will automatically be static when it is formally dimensioned later
                    'note: listed arrays are always created in dynamic memory, but their contents are not erased
                    '      this differs from static arrays from SUB...STATIC and the unique QB64 method -> STATIC arrayname(100)
                    IF dimoption = 3 THEN 'STATIC used
                        IF LEN(elements$) = 0 THEN 'nothing between brackets
                            listarray = 1 'add to static list
                        END IF
                    END IF

                    'last element was ")"
                    'get next element
                    IF i >= n + 1 THEN e$ = "" ELSE e$ = getelement(a$, i): i = i + 1
                END IF 'e$="("
                d$ = e$

                dimmethod = 0

                dim2typepassback$ = ""

                'does varname have an appended symbol?
                s$ = removesymbol$(varname$)
                IF Error_Happened THEN GOTO errmes
                IF validname(varname$) = 0 THEN a$ = "Invalid variable name": GOTO errmes

                IF s$ <> "" THEN
                    a$ = "Cannot use type symbol with " + firstelement$ + " AS type variable-list (" + s$ + ")"
                    GOTO errmes
                END IF

                IF d$ <> "" AND d$ <> "," THEN a$ = "DIM: Expected ,": GOTO errmes

                newDimSyntax = -1
                GOSUB NormalDimBlock
                newDimSyntax = 0

                IF d$ = "," THEN
                    l$ = l$ + sp2 + ","
                    varname$ = getelement(ca$, i): i = i + 1
                    GOTO dimnext2
                END IF

                dimoption = 0
                dimshared = 0
                redimoption = 0
                IF dimstatic = 1 THEN dimstatic = 0
                AllowLocalName = 0

                layoutdone = 1
                IF LEN(layout$) = 0 THEN layout$ = l$ ELSE layout$ = layout$ + sp + l$

                GOTO finishedline
            END IF
        END IF
    END IF











    'THEN [GOTO] linenumber?
    IF THENGOTO = 1 THEN
        IF n = 1 THEN
            l$ = ""
            a = ASC(LEFT$(firstelement$, 1))
            IF a = 46 OR (a >= 48 AND a <= 57) THEN a2$ = ca$: GOTO THENGOTO
        END IF
    END IF

    'goto
    IF n = 2 THEN
        IF getelement$(a$, 1) = "GOTO" THEN
            l$ = SCase$("GoTo")
            a2$ = getelement$(ca$, 2)
            THENGOTO:
            IF validlabel(a2$) = 0 THEN a$ = "Invalid label!": GOTO errmes

            v = HashFind(a2$, HASHFLAG_LABEL, ignore, r)
            x = 1
            labchk2:
            IF v THEN
                s = Labels(r).Scope
                IF s = subfuncn OR s = -1 THEN 'same scope?
                    IF s = -1 THEN Labels(r).Scope = subfuncn 'acquire scope
                    x = 0 'already defined
                    tlayout$ = RTRIM$(Labels(r).cn)
                ELSE
                    IF v = 2 THEN v = HashFindCont(ignore, r): GOTO labchk2
                END IF
            END IF
            IF x THEN
                'does not exist
                nLabels = nLabels + 1: IF nLabels > Labels_Ubound THEN Labels_Ubound = Labels_Ubound * 2: REDIM _PRESERVE Labels(1 TO Labels_Ubound) AS Label_Type
                Labels(nLabels) = Empty_Label
                HashAdd a2$, HASHFLAG_LABEL, nLabels
                r = nLabels
                Labels(r).State = 0
                Labels(r).cn = tlayout$
                Labels(r).Scope = subfuncn
                Labels(r).Error_Line = linenumber
            END IF 'x

            IF LEN(l$) THEN l$ = l$ + sp + tlayout$ ELSE l$ = tlayout$
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            WriteBufLine MainTxtBuf, "goto LABEL_" + a2$ + ";"
            GOTO finishedline
        END IF
    END IF

    IF n = 1 THEN
        IF firstelement$ = "_CONTINUE" OR (firstelement$ = "CONTINUE" AND qb64prefix_set = 1) THEN
            IF firstelement$ = "_CONTINUE" THEN l$ = SCase$("_Continue") ELSE l$ = SCase$("Continue")
            'scan backwards until previous control level reached
            FOR i = controllevel TO 1 STEP -1
                t = controltype(i)
                IF t = 2 THEN 'for...next
                    WriteBufLine MainTxtBuf, "goto fornext_continue_" + str2$(controlid(i)) + ";"
                    layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                    GOTO finishedline
                ELSEIF t = 3 OR t = 4 THEN 'do...loop
                    WriteBufLine MainTxtBuf, "goto dl_continue_" + str2$(controlid(i)) + ";"
                    layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                    GOTO finishedline
                ELSEIF t = 5 THEN 'while...wend
                    WriteBufLine MainTxtBuf, "goto ww_continue_" + str2$(controlid(i)) + ";"
                    layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                    GOTO finishedline
                END IF
            NEXT
            a$ = qb64prefix$ + "CONTINUE outside DO..LOOP/FOR..NEXT/WHILE..WEND block": GOTO errmes
        END IF
    END IF

    IF firstelement$ = "CHAIN" THEN
        IF vWatchOn THEN
            addWarning linenumber, inclevel, inclinenumber(inclevel), incname$(inclevel), "Feature incompatible with $Debug mode", "CHAIN"
        END IF
    END IF

    IF firstelement$ = "RUN" THEN 'RUN
        IF vWatchOn THEN
            addWarning linenumber, inclevel, inclinenumber(inclevel), incname$(inclevel), "Feature incompatible with $Debug mode", "RUN"
        END IF
        l$ = SCase$("Run")
        IF n = 1 THEN
            'no parameters
            WriteBufLine MainTxtBuf, "sub_run_init();" 'note: called first to free up screen-locked image handles
            WriteBufLine MainTxtBuf, "sub_clear(NULL,NULL,NULL,NULL);" 'use functionality of CLEAR
            IF LEN(subfunc$) THEN
                WriteBufLine MainTxtBuf, "QBMAIN(NULL);"
            ELSE
                WriteBufLine MainTxtBuf, "goto S_0;"
            END IF
        ELSE
            'parameter passed
            e$ = getelements$(ca$, 2, n)
            e$ = fixoperationorder$(e$)
            IF Error_Happened THEN GOTO errmes
            l2$ = tlayout$
            ignore$ = evaluate(e$, typ)
            IF Error_Happened THEN GOTO errmes
            IF n = 2 AND ((typ AND ISSTRING) = 0) THEN
                'assume it's a label or line number
                lbl$ = getelement$(ca$, 2)
                IF validlabel(lbl$) = 0 THEN a$ = "Invalid label!": GOTO errmes 'invalid label

                v = HashFind(lbl$, HASHFLAG_LABEL, ignore, r)
                x = 1
                labchk501:
                IF v THEN
                    s = Labels(r).Scope
                    IF s = 0 OR s = -1 THEN 'main scope?
                        IF s = -1 THEN Labels(r).Scope = 0 'acquire scope
                        x = 0 'already defined
                        tlayout$ = RTRIM$(Labels(r).cn)
                        Labels(r).Scope_Restriction = subfuncn
                        Labels(r).Error_Line = linenumber
                    ELSE
                        IF v = 2 THEN v = HashFindCont(ignore, r): GOTO labchk501
                    END IF
                END IF
                IF x THEN
                    'does not exist
                    nLabels = nLabels + 1: IF nLabels > Labels_Ubound THEN Labels_Ubound = Labels_Ubound * 2: REDIM _PRESERVE Labels(1 TO Labels_Ubound) AS Label_Type
                    Labels(nLabels) = Empty_Label
                    HashAdd lbl$, HASHFLAG_LABEL, nLabels
                    r = nLabels
                    Labels(r).State = 0
                    Labels(r).cn = tlayout$
                    Labels(r).Scope = 0
                    Labels(r).Error_Line = linenumber
                    Labels(r).Scope_Restriction = subfuncn
                END IF 'x

                l$ = l$ + sp + tlayout$
                WriteBufLine MainTxtBuf, "sub_run_init();" 'note: called first to free up screen-locked image handles
                WriteBufLine MainTxtBuf, "sub_clear(NULL,NULL,NULL,NULL);" 'use functionality of CLEAR
                IF LEN(subfunc$) THEN
                    WriteBufLine RunTxtBuf, "if (run_from_line==" + str2(nextrunlineindex) + "){run_from_line=0;goto LABEL_" + lbl$ + ";}"
                    WriteBufLine MainTxtBuf, "run_from_line=" + str2(nextrunlineindex) + ";"
                    nextrunlineindex = nextrunlineindex + 1
                    WriteBufLine MainTxtBuf, "QBMAIN(NULL);"
                ELSE
                    WriteBufLine MainTxtBuf, "goto LABEL_" + lbl$ + ";"
                END IF
            ELSE
                'assume it's a string containing a filename to execute
                e$ = evaluatetotyp(e$, ISSTRING)
                IF Error_Happened THEN GOTO errmes
                WriteBufLine MainTxtBuf, "sub_run(" + e$ + ");"
                l$ = l$ + sp + l2$
            END IF 'isstring
        END IF 'n=1
        layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
        GOTO finishedline
    END IF 'run





    IF firstelement$ = "END" THEN
        l$ = SCase$("End")
        IF n > 1 THEN
            e$ = getelements$(ca$, 2, n)
            e$ = fixoperationorder$(e$): IF Error_Happened THEN GOTO errmes
            l2$ = tlayout$
            e$ = evaluatetotyp(e$, ISINTEGER64): IF Error_Happened THEN GOTO errmes
            inclinenump$ = ""
            IF inclinenumber(inclevel) THEN
                inclinenump$ = "," + str2$(inclinenumber(inclevel))
                thisincname$ = getfilepath$(incname$(inclevel))
                thisincname$ = MID$(incname$(inclevel), LEN(thisincname$) + 1)
                inclinenump$ = inclinenump$ + "," + CHR$(34) + thisincname$ + CHR$(34)
            END IF
            IF vWatchOn AND inclinenumber(inclevel) = 0 THEN temp$ = vWatchErrorCall$ ELSE temp$ = ""
            WriteBufLine MainTxtBuf, "if(qbevent){" + temp$ + "evnt(" + str2$(linenumber) + inclinenump$ + ");}" 'non-resumable error check (cannot exit without handling errors)
            WriteBufLine MainTxtBuf, "exit_code=" + e$ + ";"
            l$ = l$ + sp + l2$
        END IF
        xend
        layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
        GOTO finishedline
    END IF

    IF firstelement$ = "SYSTEM" THEN
        l$ = SCase$("System")
        IF n > 1 THEN
            e$ = getelements$(ca$, 2, n)
            e$ = fixoperationorder$(e$): IF Error_Happened THEN GOTO errmes
            l2$ = tlayout$
            e$ = evaluatetotyp(e$, ISINTEGER64): IF Error_Happened THEN GOTO errmes
            inclinenump$ = ""
            IF inclinenumber(inclevel) THEN
                inclinenump$ = "," + str2$(inclinenumber(inclevel))
                thisincname$ = getfilepath$(incname$(inclevel))
                thisincname$ = MID$(incname$(inclevel), LEN(thisincname$) + 1)
                inclinenump$ = inclinenump$ + "," + CHR$(34) + thisincname$ + CHR$(34)
            END IF
            IF vWatchOn = 1 AND NoChecks = 0 AND inclinenumber(inclevel) = 0 THEN temp$ = vWatchErrorCall$ ELSE temp$ = ""
            WriteBufLine MainTxtBuf, "if(qbevent){" + temp$ + "evnt(" + str2$(linenumber) + inclinenump$ + ");}" 'non-resumable error check (cannot exit without handling errors)
            WriteBufLine MainTxtBuf, "exit_code=" + e$ + ";"
            l$ = l$ + sp + l2$
        END IF


        IF vWatchOn = 1 THEN
            IF inclinenumber(inclevel) = 0 THEN
                vWatchAddLabel linenumber, 0
            END IF
            WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= 0; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars);"
        END IF
        WriteBufLine MainTxtBuf, "if (sub_gl_called) error(271);"
        WriteBufLine MainTxtBuf, "close_program=1;"
        WriteBufLine MainTxtBuf, "end();"
        layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
        GOTO finishedline
    END IF

    IF n >= 1 THEN
        IF firstelement$ = "STOP" THEN
            l$ = SCase$("Stop")
            IF n > 1 THEN
                e$ = getelements$(ca$, 2, n)
                e$ = fixoperationorder$(e$)
                IF Error_Happened THEN GOTO errmes
                l$ = SCase$("Stop") + sp + tlayout$
                e$ = evaluatetotyp(e$, 64)
                IF Error_Happened THEN GOTO errmes
                'note: this value is currently ignored but evaluated for checking reasons
            END IF
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            IF vWatchOn = 1 AND NoChecks = 0 AND inclinenumber(inclevel) = 0 THEN
                WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER=-3; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars); if (*__LONG_VWATCH_GOTO>0) goto VWATCH_SETNEXTLINE; if (*__LONG_VWATCH_GOTO<0) goto VWATCH_SKIPLINE;"
                vWatchAddLabel linenumber, 0
            ELSE
                WriteBufLine MainTxtBuf, "close_program=1;"
                WriteBufLine MainTxtBuf, "end();"
            END IF
            GOTO finishedline
        END IF
    END IF

    IF n = 2 THEN
        IF firstelement$ = "GOSUB" THEN
            xgosub ca$
            IF Error_Happened THEN GOTO errmes
            'note: layout implemented in xgosub
            GOTO finishedline
        END IF
    END IF

    IF n >= 1 THEN
        IF firstelement$ = "RETURN" THEN
            IF n = 1 THEN
                WriteBufLine MainTxtBuf, "#include " + CHR$(34) + "ret" + str2$(subfuncn) + ".txt" + CHR$(34)
                l$ = SCase$("Return")
                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                GOTO finishedline
            ELSE
                'label/linenumber follows
                IF subfuncn <> 0 THEN a$ = "RETURN linelabel/linenumber invalid within a SUB/FUNCTION": GOTO errmes
                IF n > 2 THEN a$ = "Expected linelabel/linenumber after RETURN": GOTO errmes
                WriteBufLine MainTxtBuf, "if (!next_return_point) error(3);" 'check return point available
                WriteBufLine MainTxtBuf, "next_return_point--;" 'destroy return point
                a2$ = getelement$(ca$, 2)
                IF validlabel(a2$) = 0 THEN a$ = "Invalid label!": GOTO errmes

                v = HashFind(a2$, HASHFLAG_LABEL, ignore, r)
                x = 1
                labchk505:
                IF v THEN
                    s = Labels(r).Scope
                    IF s = subfuncn OR s = -1 THEN 'same scope?
                        IF s = -1 THEN Labels(r).Scope = subfuncn 'acquire scope
                        x = 0 'already defined
                        tlayout$ = RTRIM$(Labels(r).cn)
                    ELSE
                        IF v = 2 THEN v = HashFindCont(ignore, r): GOTO labchk505
                    END IF
                END IF
                IF x THEN
                    'does not exist
                    nLabels = nLabels + 1: IF nLabels > Labels_Ubound THEN Labels_Ubound = Labels_Ubound * 2: REDIM _PRESERVE Labels(1 TO Labels_Ubound) AS Label_Type
                    Labels(nLabels) = Empty_Label
                    HashAdd a2$, HASHFLAG_LABEL, nLabels
                    r = nLabels
                    Labels(r).State = 0
                    Labels(r).cn = tlayout$
                    Labels(r).Scope = subfuncn
                    Labels(r).Error_Line = linenumber
                END IF 'x

                WriteBufLine MainTxtBuf, "goto LABEL_" + a2$ + ";"
                l$ = SCase$("Return") + sp + tlayout$
                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                GOTO finishedline
            END IF
        END IF
    END IF

    IF n >= 1 THEN
        IF firstelement$ = "RESUME" THEN
            l$ = SCase$("Resume")
            IF n = 1 THEN
                resumeprev:


                WriteBufLine MainTxtBuf, "if (!error_handling){error(20);}else{error_retry=1; qbevent=1; error_handling=0; error_err=0; return;}"

                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                GOTO finishedline
            END IF
            IF n > 2 THEN a$ = "Too many parameters": GOTO errmes
            s$ = getelement$(ca$, 2)
            IF UCASE$(s$) = "NEXT" THEN


                WriteBufLine MainTxtBuf, "if (!error_handling){error(20);}else{error_handling=0; error_err=0; return;}"

                l$ = l$ + sp + SCase$("Next")
                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                GOTO finishedline
            END IF
            IF s$ = "0" THEN l$ = l$ + sp + "0": GOTO resumeprev
            IF validlabel(s$) = 0 THEN a$ = "Invalid label passed to RESUME": GOTO errmes

            v = HashFind(s$, HASHFLAG_LABEL, ignore, r)
            x = 1
            labchk506:
            IF v THEN
                s = Labels(r).Scope
                IF s = subfuncn OR s = -1 THEN 'same scope?
                    IF s = -1 THEN Labels(r).Scope = subfuncn 'acquire scope
                    x = 0 'already defined
                    tlayout$ = RTRIM$(Labels(r).cn)
                ELSE
                    IF v = 2 THEN v = HashFindCont(ignore, r): GOTO labchk506
                END IF
            END IF
            IF x THEN
                'does not exist
                nLabels = nLabels + 1: IF nLabels > Labels_Ubound THEN Labels_Ubound = Labels_Ubound * 2: REDIM _PRESERVE Labels(1 TO Labels_Ubound) AS Label_Type
                Labels(nLabels) = Empty_Label
                HashAdd s$, HASHFLAG_LABEL, nLabels
                r = nLabels
                Labels(r).State = 0
                Labels(r).cn = tlayout$
                Labels(r).Scope = subfuncn
                Labels(r).Error_Line = linenumber
            END IF 'x

            l$ = l$ + sp + tlayout$
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            WriteBufLine MainTxtBuf, "if (!error_handling){error(20);}else{error_handling=0; error_err=0; goto LABEL_" + s$ + ";}"
            GOTO finishedline
        END IF
    END IF

    IF n = 4 THEN
        IF getelements(a$, 1, 3) = "ON" + sp + "ERROR" + sp + "GOTO" THEN
            l$ = SCase$("On" + sp + "Error" + sp + "GoTo")
            lbl$ = getelement$(ca$, 4)
            IF lbl$ = "0" THEN
                WriteBufLine MainTxtBuf, "error_goto_line=0;"
                l$ = l$ + sp + "0"
                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                GOTO finishedline
            END IF
            IF validlabel(lbl$) = 0 THEN a$ = "Invalid label": GOTO errmes

            v = HashFind(lbl$, HASHFLAG_LABEL, ignore, r)
            x = 1
            labchk6:
            IF v THEN
                s = Labels(r).Scope
                IF s = 0 OR s = -1 THEN 'main scope?
                    IF s = -1 THEN Labels(r).Scope = 0 'acquire scope
                    x = 0 'already defined
                    tlayout$ = RTRIM$(Labels(r).cn)
                    Labels(r).Scope_Restriction = subfuncn
                    Labels(r).Error_Line = linenumber
                ELSE
                    IF v = 2 THEN v = HashFindCont(ignore, r): GOTO labchk6
                END IF
            END IF
            IF x THEN
                'does not exist
                nLabels = nLabels + 1: IF nLabels > Labels_Ubound THEN Labels_Ubound = Labels_Ubound * 2: REDIM _PRESERVE Labels(1 TO Labels_Ubound) AS Label_Type
                Labels(nLabels) = Empty_Label
                HashAdd lbl$, HASHFLAG_LABEL, nLabels
                r = nLabels
                Labels(r).State = 0
                Labels(r).cn = tlayout$
                Labels(r).Scope = 0
                Labels(r).Error_Line = linenumber
                Labels(r).Scope_Restriction = subfuncn
            END IF 'x


            l$ = l$ + sp + tlayout$
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            errorlabels = errorlabels + 1
            WriteBufLine MainTxtBuf, "error_goto_line=" + str2(errorlabels) + ";"
            WriteBufLine ErrTxtBuf, "if (error_goto_line==" + str2(errorlabels) + "){error_handling=1; goto LABEL_" + lbl$ + ";}"
            GOTO finishedline
        END IF
    END IF

    IF n >= 1 THEN
        IF firstelement$ = "RESTORE" THEN
            l$ = SCase$("Restore")
            IF n = 1 THEN
                WriteBufLine MainTxtBuf, "data_offset=0;"
            ELSE
                IF n > 2 THEN a$ = "Syntax error - too many parameters (expected RESTORE label/line number)": GOTO errmes
                lbl$ = getelement$(ca$, 2)
                IF validlabel(lbl$) = 0 THEN a$ = "Invalid label": GOTO errmes

                'rule: a RESTORE label has no scope, therefore, only one instance of that label may exist
                'how: enforced by a post check for duplicates
                v = HashFind(lbl$, HASHFLAG_LABEL, ignore, r)
                x = 1
                IF v THEN 'already defined
                    x = 0
                    tlayout$ = RTRIM$(Labels(r).cn)
                    Labels(r).Data_Referenced = 1 'make sure the data referenced flag is set
                    IF Labels(r).Error_Line = 0 THEN Labels(r).Error_Line = linenumber
                END IF
                IF x THEN
                    nLabels = nLabels + 1: IF nLabels > Labels_Ubound THEN Labels_Ubound = Labels_Ubound * 2: REDIM _PRESERVE Labels(1 TO Labels_Ubound) AS Label_Type
                    Labels(nLabels) = Empty_Label
                    HashAdd lbl$, HASHFLAG_LABEL, nLabels
                    r = nLabels
                    Labels(r).State = 0
                    Labels(r).cn = tlayout$
                    Labels(r).Scope = -1 'modifyable scope
                    Labels(r).Error_Line = linenumber
                    Labels(r).Data_Referenced = 1
                END IF 'x

                l$ = l$ + sp + tlayout$
                WriteBufLine MainTxtBuf, "data_offset=data_at_LABEL_" + lbl$ + ";"
            END IF
            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            GOTO finishedline
        END IF
    END IF



    'ON ... GOTO/GOSUB
    IF n >= 1 THEN
        IF firstelement$ = "ON" THEN
            xongotogosub a$, ca$, n
            IF Error_Happened THEN GOTO errmes
            GOTO finishedline
        END IF
    END IF


    '(_MEM) _MEMPUT _MEMGET
    IF n >= 1 THEN
        IF firstelement$ = "_MEMGET" OR (firstelement$ = "MEMGET" AND qb64prefix_set = 1) THEN
            'get expressions
            e$ = ""
            B = 0
            ne = 0
            FOR i2 = 2 TO n
                e2$ = getelement$(ca$, i2)
                IF e2$ = "(" THEN B = B + 1
                IF e2$ = ")" THEN B = B - 1
                IF e2$ = "," AND B = 0 THEN
                    ne = ne + 1
                    IF ne = 1 THEN blk$ = e$: e$ = ""
                    IF ne = 2 THEN offs$ = e$: e$ = ""
                    IF ne = 3 THEN a$ = "Syntax error - too many parameters (Expected " + qb64prefix$ + "MEMGET mem-reference, offset, variable)": GOTO errmes
                ELSE
                    IF LEN(e$) = 0 THEN e$ = e2$ ELSE e$ = e$ + sp + e2$
                END IF
            NEXT
            var$ = e$
            IF e$ = "" OR ne <> 2 THEN a$ = "Expected " + qb64prefix$ + "MEMGET mem-reference, offset, variable": GOTO errmes

            IF firstelement$ = "_MEMGET" THEN l$ = SCase$("_MemGet") + sp ELSE l$ = SCase$("MemGet") + sp

            e$ = fixoperationorder$(blk$): IF Error_Happened THEN GOTO errmes
            l$ = l$ + tlayout$

            test$ = evaluate(e$, typ): IF Error_Happened THEN GOTO errmes
            IF (typ AND ISUDT) = 0 OR (typ AND 511) <> 1 THEN a$ = "Expected " + qb64prefix$ + "MEM type": GOTO errmes
            blkoffs$ = evaluatetotyp(e$, -6)

            '            IF typ AND ISREFERENCE THEN e$ = refer(e$, typ, 0)


            'WriteBufLine MainTxtBuf, blkoffs$ '???

            e$ = fixoperationorder$(offs$): IF Error_Happened THEN GOTO errmes
            l$ = l$ + sp2 + "," + sp + tlayout$
            e$ = evaluatetotyp(e$, OFFSETTYPE - ISPOINTER): IF Error_Happened THEN GOTO errmes
            offs$ = e$
            'WriteBufLine MainTxtBuf, e$ '???

            e$ = fixoperationorder$(var$): IF Error_Happened THEN GOTO errmes
            l$ = l$ + sp2 + "," + sp + tlayout$
            varsize$ = evaluatetotyp(e$, -5): IF Error_Happened THEN GOTO errmes
            varoffs$ = evaluatetotyp(e$, -6): IF Error_Happened THEN GOTO errmes


            'WriteBufLine MainTxtBuf, varoffs$ '???
            'WriteBufLine MainTxtBuf, varsize$ '???

            'what do we do next
            'need to know offset of variable and its size

            'known sizes will be handled by designated command casts, otherwise use memmove
            s = 0
            IF varsize$ = "1" THEN s = 1: st$ = "int8"
            IF varsize$ = "2" THEN s = 2: st$ = "int16"
            IF varsize$ = "4" THEN s = 4: st$ = "int32"
            IF varsize$ = "8" THEN s = 8: st$ = "int64"

            IF NoChecks THEN
                'fast version:
                IF s THEN
                    WriteBufLine MainTxtBuf, "*(" + st$ + "*)" + varoffs$ + "=*(" + st$ + "*)(" + offs$ + ");"
                ELSE
                    WriteBufLine MainTxtBuf, "memmove(" + varoffs$ + ",(void*)" + offs$ + "," + varsize$ + ");"
                END IF
            ELSE
                'safe version:
                WriteBufLine MainTxtBuf, "tmp_long=" + offs$ + ";"
                'is mem block init?
                WriteBufLine MainTxtBuf, "if ( ((mem_block*)(" + blkoffs$ + "))->lock_offset ){"
                'are region and id valid?
                WriteBufLine MainTxtBuf, "if ("
                WriteBufLine MainTxtBuf, "tmp_long < ((mem_block*)(" + blkoffs$ + "))->offset  ||"
                WriteBufLine MainTxtBuf, "(tmp_long+(" + varsize$ + ")) > ( ((mem_block*)(" + blkoffs$ + "))->offset + ((mem_block*)(" + blkoffs$ + "))->size)  ||"
                WriteBufLine MainTxtBuf, "((mem_lock*)((mem_block*)(" + blkoffs$ + "))->lock_offset)->id != ((mem_block*)(" + blkoffs$ + "))->lock_id  ){"
                'diagnose error
                WriteBufLine MainTxtBuf, "if (" + "((mem_lock*)((mem_block*)(" + blkoffs$ + "))->lock_offset)->id != ((mem_block*)(" + blkoffs$ + "))->lock_id" + ") error(308); else error(300);"
                WriteBufLine MainTxtBuf, "}else{"
                IF s THEN
                    WriteBufLine MainTxtBuf, "*(" + st$ + "*)" + varoffs$ + "=*(" + st$ + "*)tmp_long;"
                ELSE
                    WriteBufLine MainTxtBuf, "memmove(" + varoffs$ + ",(void*)tmp_long," + varsize$ + ");"
                END IF
                WriteBufLine MainTxtBuf, "}"
                WriteBufLine MainTxtBuf, "}else error(309);"
            END IF

            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            GOTO finishedline

        END IF
    END IF




    IF n >= 1 THEN
        IF firstelement$ = "_MEMPUT" OR (firstelement$ = "MEMPUT" AND qb64prefix_set = 1) THEN
            'get expressions
            typ$ = ""
            e$ = ""
            B = 0
            ne = 0
            FOR i2 = 2 TO n
                e2$ = getelement$(ca$, i2)
                IF e2$ = "(" THEN B = B + 1
                IF e2$ = ")" THEN B = B - 1
                IF (e2$ = "," OR UCASE$(e2$) = "AS") AND B = 0 THEN
                    ne = ne + 1
                    IF ne = 1 THEN blk$ = e$: e$ = ""
                    IF ne = 2 THEN offs$ = e$: e$ = ""
                    IF ne = 3 THEN var$ = e$: e$ = ""
                    IF (UCASE$(e2$) = "AS" AND ne <> 3) OR (ne = 3 AND UCASE$(e2$) <> "AS") OR ne = 4 THEN a$ = "Expected _MEMPUT mem-reference,offset,variable|value[AS type]": GOTO errmes
                ELSE
                    IF LEN(e$) = 0 THEN e$ = e2$ ELSE e$ = e$ + sp + e2$
                END IF
            NEXT
            IF ne < 2 OR e$ = "" THEN a$ = "Expected " + qb64prefix$ + "MEMPUT mem-reference, offset, variable|value[AS type]": GOTO errmes
            IF ne = 2 THEN var$ = e$ ELSE typ$ = UCASE$(e$)

            IF firstelement$ = "_MEMPUT" THEN l$ = SCase$("_MemPut") + sp ELSE l$ = SCase$("MemPut") + sp

            e$ = fixoperationorder$(blk$): IF Error_Happened THEN GOTO errmes
            l$ = l$ + tlayout$

            test$ = evaluate(e$, typ): IF Error_Happened THEN GOTO errmes
            IF (typ AND ISUDT) = 0 OR (typ AND 511) <> 1 THEN a$ = "Expected " + qb64prefix$ + "MEM type": GOTO errmes
            blkoffs$ = evaluatetotyp(e$, -6)

            e$ = fixoperationorder$(offs$): IF Error_Happened THEN GOTO errmes
            l$ = l$ + sp2 + "," + sp + tlayout$
            e$ = evaluatetotyp(e$, OFFSETTYPE - ISPOINTER): IF Error_Happened THEN GOTO errmes
            offs$ = e$

            IF ne = 2 THEN
                e$ = fixoperationorder$(var$): IF Error_Happened THEN GOTO errmes
                l$ = l$ + sp2 + "," + sp + tlayout$

                test$ = evaluate(e$, t): IF Error_Happened THEN GOTO errmes
                IF (t AND ISREFERENCE) = 0 AND (t AND ISSTRING) THEN
                    WriteBufLine MainTxtBuf, "g_tmp_str=" + test$ + ";"
                    varsize$ = "g_tmp_str->len"
                    varoffs$ = "g_tmp_str->chr"
                ELSE
                    varsize$ = evaluatetotyp(e$, -5): IF Error_Happened THEN GOTO errmes
                    varoffs$ = evaluatetotyp(e$, -6): IF Error_Happened THEN GOTO errmes
                END IF

                'known sizes will be handled by designated command casts, otherwise use memmove
                s = 0
                IF varsize$ = "1" THEN s = 1: st$ = "int8"
                IF varsize$ = "2" THEN s = 2: st$ = "int16"
                IF varsize$ = "4" THEN s = 4: st$ = "int32"
                IF varsize$ = "8" THEN s = 8: st$ = "int64"

                IF NoChecks THEN
                    'fast version:
                    IF s THEN
                        WriteBufLine MainTxtBuf, "*(" + st$ + "*)(" + offs$ + ")=*(" + st$ + "*)" + varoffs$ + ";"
                    ELSE
                        WriteBufLine MainTxtBuf, "memmove((void*)" + offs$ + "," + varoffs$ + "," + varsize$ + ");"
                    END IF
                ELSE
                    'safe version:
                    WriteBufLine MainTxtBuf, "tmp_long=" + offs$ + ";"
                    'is mem block init?
                    WriteBufLine MainTxtBuf, "if ( ((mem_block*)(" + blkoffs$ + "))->lock_offset ){"
                    'are region and id valid?
                    WriteBufLine MainTxtBuf, "if ("
                    WriteBufLine MainTxtBuf, "tmp_long < ((mem_block*)(" + blkoffs$ + "))->offset  ||"
                    WriteBufLine MainTxtBuf, "(tmp_long+(" + varsize$ + ")) > ( ((mem_block*)(" + blkoffs$ + "))->offset + ((mem_block*)(" + blkoffs$ + "))->size)  ||"
                    WriteBufLine MainTxtBuf, "((mem_lock*)((mem_block*)(" + blkoffs$ + "))->lock_offset)->id != ((mem_block*)(" + blkoffs$ + "))->lock_id  ){"
                    'diagnose error
                    WriteBufLine MainTxtBuf, "if (" + "((mem_lock*)((mem_block*)(" + blkoffs$ + "))->lock_offset)->id != ((mem_block*)(" + blkoffs$ + "))->lock_id" + ") error(308); else error(300);"
                    WriteBufLine MainTxtBuf, "}else{"
                    IF s THEN
                        WriteBufLine MainTxtBuf, "*(" + st$ + "*)tmp_long=*(" + st$ + "*)" + varoffs$ + ";"
                    ELSE
                        WriteBufLine MainTxtBuf, "memmove((void*)tmp_long," + varoffs$ + "," + varsize$ + ");"
                    END IF
                    WriteBufLine MainTxtBuf, "}"
                    WriteBufLine MainTxtBuf, "}else error(309);"
                END IF

            ELSE

                '... AS type method
                'FUNCTION typname2typ& (t2$)
                'typname2typsize = 0 'the default
                t = typname2typ(typ$)
                IF t = 0 THEN a$ = "Invalid type": GOTO errmes
                IF (t AND ISOFFSETINBITS) <> 0 OR (t AND ISUDT) <> 0 OR (t AND ISSTRING) THEN a$ = qb64prefix$ + "MEMPUT requires numeric type": GOTO errmes
                IF (t AND ISPOINTER) THEN t = t - ISPOINTER
                'attempt conversion...
                e$ = fixoperationorder$(var$): IF Error_Happened THEN GOTO errmes
                l$ = l$ + sp2 + "," + sp + tlayout$ + sp + SCase$("As") + sp + typ$
                e$ = evaluatetotyp(e$, t): IF Error_Happened THEN GOTO errmes
                st$ = typ2ctyp$(t, "")
                varsize$ = str2((t AND 511) \ 8)
                IF NoChecks THEN
                    'fast version:
                    WriteBufLine MainTxtBuf, "*(" + st$ + "*)(" + offs$ + ")=" + e$ + ";"
                ELSE
                    'safe version:
                    WriteBufLine MainTxtBuf, "tmp_long=" + offs$ + ";"
                    'is mem block init?
                    WriteBufLine MainTxtBuf, "if ( ((mem_block*)(" + blkoffs$ + "))->lock_offset ){"
                    'are region and id valid?
                    WriteBufLine MainTxtBuf, "if ("
                    WriteBufLine MainTxtBuf, "tmp_long < ((mem_block*)(" + blkoffs$ + "))->offset  ||"
                    WriteBufLine MainTxtBuf, "(tmp_long+(" + varsize$ + ")) > ( ((mem_block*)(" + blkoffs$ + "))->offset + ((mem_block*)(" + blkoffs$ + "))->size)  ||"
                    WriteBufLine MainTxtBuf, "((mem_lock*)((mem_block*)(" + blkoffs$ + "))->lock_offset)->id != ((mem_block*)(" + blkoffs$ + "))->lock_id  ){"
                    'diagnose error
                    WriteBufLine MainTxtBuf, "if (" + "((mem_lock*)((mem_block*)(" + blkoffs$ + "))->lock_offset)->id != ((mem_block*)(" + blkoffs$ + "))->lock_id" + ") error(308); else error(300);"
                    WriteBufLine MainTxtBuf, "}else{"
                    WriteBufLine MainTxtBuf, "*(" + st$ + "*)tmp_long=" + e$ + ";"
                    WriteBufLine MainTxtBuf, "}"
                    WriteBufLine MainTxtBuf, "}else error(309);"
                END IF

            END IF

            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            GOTO finishedline

        END IF
    END IF





    IF n >= 1 THEN
        IF firstelement$ = "_MEMFILL" OR (firstelement$ = "MEMFILL" AND qb64prefix_set = 1) THEN
            'get expressions
            typ$ = ""
            e$ = ""
            B = 0
            ne = 0
            FOR i2 = 2 TO n
                e2$ = getelement$(ca$, i2)
                IF e2$ = "(" THEN B = B + 1
                IF e2$ = ")" THEN B = B - 1
                IF (e2$ = "," OR UCASE$(e2$) = "AS") AND B = 0 THEN
                    ne = ne + 1
                    IF ne = 1 THEN blk$ = e$: e$ = ""
                    IF ne = 2 THEN offs$ = e$: e$ = ""
                    IF ne = 3 THEN bytes$ = e$: e$ = ""
                    IF ne = 4 THEN var$ = e$: e$ = ""
                    IF (UCASE$(e2$) = "AS" AND ne <> 4) OR (ne = 4 AND UCASE$(e2$) <> "AS") OR ne = 5 THEN a$ = "Expected _MEMFILL mem-reference,offset,bytes,variable|value[AS type]": GOTO errmes
                ELSE
                    IF LEN(e$) = 0 THEN e$ = e2$ ELSE e$ = e$ + sp + e2$
                END IF
            NEXT
            IF ne < 3 OR e$ = "" THEN a$ = "Expected " + qb64prefix$ + "MEMFILL mem-reference, offset, bytes, variable|value[AS type]": GOTO errmes
            IF ne = 3 THEN var$ = e$ ELSE typ$ = UCASE$(e$)

            IF firstelement$ = "_MEMFILL" THEN l$ = SCase$("_MemFill") + sp ELSE l$ = SCase$("MemFill") + sp

            e$ = fixoperationorder$(blk$): IF Error_Happened THEN GOTO errmes
            l$ = l$ + tlayout$

            test$ = evaluate(e$, typ): IF Error_Happened THEN GOTO errmes
            IF (typ AND ISUDT) = 0 OR (typ AND 511) <> 1 THEN a$ = "Expected " + qb64prefix$ + "MEM type": GOTO errmes
            blkoffs$ = evaluatetotyp(e$, -6)

            e$ = fixoperationorder$(offs$): IF Error_Happened THEN GOTO errmes
            l$ = l$ + sp2 + "," + sp + tlayout$
            e$ = evaluatetotyp(e$, OFFSETTYPE - ISPOINTER): IF Error_Happened THEN GOTO errmes
            offs$ = e$

            e$ = fixoperationorder$(bytes$): IF Error_Happened THEN GOTO errmes
            l$ = l$ + sp2 + "," + sp + tlayout$
            e$ = evaluatetotyp(e$, OFFSETTYPE - ISPOINTER): IF Error_Happened THEN GOTO errmes
            bytes$ = e$

            IF ne = 3 THEN 'no AS
                e$ = fixoperationorder$(var$): IF Error_Happened THEN GOTO errmes
                l$ = l$ + sp2 + "," + sp + tlayout$
                test$ = evaluate(e$, t)
                IF (t AND ISREFERENCE) = 0 AND (t AND ISSTRING) THEN
                    WriteBufLine MainTxtBuf, "tmp_long=(ptrszint)" + test$ + ";"
                    varsize$ = "((qbs*)tmp_long)->len"
                    varoffs$ = "((qbs*)tmp_long)->chr"
                ELSE
                    varsize$ = evaluatetotyp(e$, -5): IF Error_Happened THEN GOTO errmes
                    varoffs$ = evaluatetotyp(e$, -6): IF Error_Happened THEN GOTO errmes
                END IF

                IF NoChecks THEN
                    WriteBufLine MainTxtBuf, "sub__memfill_nochecks(" + offs$ + "," + bytes$ + ",(ptrszint)" + varoffs$ + "," + varsize$ + ");"
                ELSE
                    WriteBufLine MainTxtBuf, "sub__memfill((mem_block*)" + blkoffs$ + "," + offs$ + "," + bytes$ + ",(ptrszint)" + varoffs$ + "," + varsize$ + ");"
                END IF

            ELSE

                '... AS type method
                t = typname2typ(typ$)
                IF t = 0 THEN a$ = "Invalid type": GOTO errmes
                IF (t AND ISOFFSETINBITS) <> 0 OR (t AND ISUDT) <> 0 OR (t AND ISSTRING) THEN a$ = qb64prefix$ + "MEMFILL requires numeric type": GOTO errmes
                IF (t AND ISPOINTER) THEN t = t - ISPOINTER
                'attempt conversion...
                e$ = fixoperationorder$(var$): IF Error_Happened THEN GOTO errmes
                l$ = l$ + sp2 + "," + sp + tlayout$ + sp + SCase$("As") + sp + typ$
                e$ = evaluatetotyp(e$, t): IF Error_Happened THEN GOTO errmes

                c$ = "sub__memfill_"
                IF NoChecks THEN c$ = "sub__memfill_nochecks_"
                IF t AND ISOFFSET THEN
                    c$ = c$ + "OFFSET"
                ELSE
                    IF t AND ISFLOAT THEN
                        IF (t AND 511) = 32 THEN c$ = c$ + "SINGLE"
                        IF (t AND 511) = 64 THEN c$ = c$ + "DOUBLE"
                        IF (t AND 511) = 256 THEN c$ = c$ + "FLOAT" 'padded variable
                    ELSE
                        c$ = c$ + str2((t AND 511) \ 8)
                    END IF
                END IF
                c$ = c$ + "("
                IF NoChecks = 0 THEN c$ = c$ + "(mem_block*)" + blkoffs$ + ","
                WriteBufLine MainTxtBuf, c$ + offs$ + "," + bytes$ + "," + e$ + ");"
            END IF

            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
            GOTO finishedline

        END IF
    END IF













    'note: ABSOLUTE cannot be used without CALL
    cispecial = 0
    IF n > 1 THEN
        IF firstelement$ = "INTERRUPT" OR firstelement$ = "INTERRUPTX" THEN
            a$ = "CALL" + sp + firstelement$ + sp + "(" + sp + getelements$(a$, 2, n) + sp + ")"
            ca$ = "CALL" + sp + firstelement$ + sp + "(" + sp + getelements$(ca$, 2, n) + sp + ")"
            n = n + 3
            firstelement$ = "CALL"
            cispecial = 1
            'fall through
        END IF
    END IF

    usecall = 0
    IF firstelement$ = "CALL" THEN
        usecall = 1
        IF n = 1 THEN a$ = "Expected CALL sub-name [(...)]": GOTO errmes
        cn$ = getelement$(ca$, 2): n$ = UCASE$(cn$)

        IF n > 2 THEN

            IF n <= 4 THEN a$ = "Expected CALL sub-name (...)": GOTO errmes
            IF getelement$(a$, 3) <> "(" OR getelement$(a$, n) <> ")" THEN a$ = "Expected CALL sub-name (...)": GOTO errmes
            a$ = n$ + sp + getelements$(a$, 4, n - 1)
            ca$ = cn$ + sp + getelements$(ca$, 4, n - 1)


            IF n$ = "INTERRUPT" OR n$ = "INTERRUPTX" THEN 'assume CALL INTERRUPT[X] request
                'print "CI: call interrupt command reached":sleep 1
                IF n$ = "INTERRUPT" THEN WriteBufRawData MainTxtBuf, "call_interrupt(" ELSE WriteBufRawData MainTxtBuf, "call_interruptx("
                argn = 0
                n = numelements(a$)
                B = 0
                e$ = ""
                FOR i = 2 TO n
                    e2$ = getelement$(ca$, i)
                    IF e2$ = "(" THEN B = B + 1
                    IF e2$ = ")" THEN B = B - 1
                    IF (e2$ = "," AND B = 0) OR i = n THEN
                        IF i = n THEN
                            IF e$ = "" THEN e$ = e2$ ELSE e$ = e$ + sp + e2$
                        END IF
                        argn = argn + 1
                        IF argn = 1 THEN 'interrupt number
                            e$ = fixoperationorder$(e$)
                            IF Error_Happened THEN GOTO errmes
                            l$ = SCase$("Call") + sp + n$ + sp2 + "(" + sp2 + tlayout$
                            IF cispecial = 1 THEN l$ = n$ + sp + tlayout$
                            e$ = evaluatetotyp(e$, 64&)
                            IF Error_Happened THEN GOTO errmes
                            'print "CI: evaluated interrupt number as ["+e$+"]":sleep 1
                            WriteBufRawData MainTxtBuf, e$
                        END IF
                        IF argn = 2 OR argn = 3 THEN 'inregs, outregs
                            e$ = fixoperationorder$(e$)
                            IF Error_Happened THEN GOTO errmes
                            l$ = l$ + sp2 + "," + sp + tlayout$
                            e2$ = e$
                            e$ = evaluatetotyp(e$, -2) 'offset+size
                            IF Error_Happened THEN GOTO errmes
                            'print "CI: evaluated in/out regs ["+e2$+"] as ["+e$+"]":sleep 1
                            WriteBufRawData MainTxtBuf, "," + e$
                        END IF
                        e$ = ""
                    ELSE
                        IF e$ = "" THEN e$ = e2$ ELSE e$ = e$ + sp + e2$
                    END IF
                NEXT
                IF argn <> 3 THEN a$ = "Expected CALL INTERRUPT (interrupt-no, inregs, outregs)": GOTO errmes
                WriteBufLine MainTxtBuf, ");"
                IF cispecial = 0 THEN l$ = l$ + sp2 + ")"
                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                'print "CI: done":sleep 1
                GOTO finishedline
            END IF 'call interrupt








            'call to CALL ABSOLUTE beyond reasonable doubt
            IF n$ = "ABSOLUTE" THEN
                l$ = SCase$("Call" + sp + "Absolute" + sp2 + "(" + sp2)
                argn = 0
                n = numelements(a$)
                B = 0
                e$ = ""
                FOR i = 2 TO n
                    e2$ = getelement$(ca$, i)
                    IF e2$ = "(" THEN B = B + 1
                    IF e2$ = ")" THEN B = B - 1
                    IF (e2$ = "," AND B = 0) OR i = n THEN
                        IF i < n THEN
                            IF e$ = "" THEN a$ = "Expected expression before , or )": GOTO errmes
                            '1. variable or value?
                            e$ = fixoperationorder$(e$)
                            IF Error_Happened THEN GOTO errmes
                            l$ = l$ + tlayout$ + sp2 + "," + sp
                            ignore$ = evaluate(e$, typ)
                            IF Error_Happened THEN GOTO errmes

                            IF (typ AND ISPOINTER) <> 0 AND (typ AND ISREFERENCE) <> 0 THEN

                                'assume standard variable
                                'assume not string/array/udt/etc
                                e$ = "VARPTR" + sp + "(" + sp + e$ + sp + ")"
                                e$ = evaluatetotyp(e$, UINTEGERTYPE - ISPOINTER)
                                IF Error_Happened THEN GOTO errmes

                            ELSE

                                'assume not string
                                'single, double or integer64?
                                IF typ AND ISFLOAT THEN
                                    IF (typ AND 511) = 32 THEN
                                        e$ = evaluatetotyp(e$, SINGLETYPE - ISPOINTER)
                                        IF Error_Happened THEN GOTO errmes
                                        v$ = "pass" + str2$(uniquenumber)
                                        WriteBufLine defdatahandle, "float *" + v$ + "=NULL;"
                                        WriteBufLine DataTxtBuf, "if(" + v$ + "==NULL){"
                                        WriteBufLine DataTxtBuf, "cmem_sp-=4;"
                                        WriteBufLine DataTxtBuf, v$ + "=(float*)(dblock+cmem_sp);"
                                        WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
                                        WriteBufLine DataTxtBuf, "}"
                                        e$ = "(uint16)(((uint8*)&(*" + v$ + "=" + e$ + "))-((uint8*)dblock))"
                                    ELSE
                                        e$ = evaluatetotyp(e$, DOUBLETYPE - ISPOINTER)
                                        IF Error_Happened THEN GOTO errmes
                                        v$ = "pass" + str2$(uniquenumber)
                                        WriteBufLine defdatahandle, "double *" + v$ + "=NULL;"
                                        WriteBufLine DataTxtBuf, "if(" + v$ + "==NULL){"
                                        WriteBufLine DataTxtBuf, "cmem_sp-=8;"
                                        WriteBufLine DataTxtBuf, v$ + "=(double*)(dblock+cmem_sp);"
                                        WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
                                        WriteBufLine DataTxtBuf, "}"
                                        e$ = "(uint16)(((uint8*)&(*" + v$ + "=" + e$ + "))-((uint8*)dblock))"
                                    END IF
                                ELSE
                                    e$ = evaluatetotyp(e$, INTEGER64TYPE - ISPOINTER)
                                    IF Error_Happened THEN GOTO errmes
                                    v$ = "pass" + str2$(uniquenumber)
                                    WriteBufLine defdatahandle, "int64 *" + v$ + "=NULL;"
                                    WriteBufLine DataTxtBuf, "if(" + v$ + "==NULL){"
                                    WriteBufLine DataTxtBuf, "cmem_sp-=8;"
                                    WriteBufLine DataTxtBuf, v$ + "=(int64*)(dblock+cmem_sp);"
                                    WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
                                    WriteBufLine DataTxtBuf, "}"
                                    e$ = "(uint16)(((uint8*)&(*" + v$ + "=" + e$ + "))-((uint8*)dblock))"
                                END IF

                            END IF

                            WriteBufLine MainTxtBuf, "call_absolute_offsets[" + str2$(argn) + "]=" + e$ + ";"
                        ELSE
                            IF e$ = "" THEN e$ = e2$ ELSE e$ = e$ + sp + e2$
                            e$ = fixoperationorder(e$)
                            IF Error_Happened THEN GOTO errmes
                            l$ = l$ + tlayout$ + sp2 + ")"
                            e$ = evaluatetotyp(e$, UINTEGERTYPE - ISPOINTER)
                            IF Error_Happened THEN GOTO errmes
                            WriteBufLine MainTxtBuf, "call_absolute(" + str2$(argn) + "," + e$ + ");"
                        END IF
                        argn = argn + 1
                        e$ = ""
                    ELSE
                        IF e$ = "" THEN e$ = e2$ ELSE e$ = e$ + sp + e2$
                    END IF
                NEXT
                layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                GOTO finishedline
            END IF

        ELSE 'n>2

            a$ = n$
            ca$ = cn$
            usecall = 2

        END IF 'n>2

        n = numelements(a$)
        firstelement$ = getelement$(a$, 1)

        'valid SUB name
        validsub = 0
        findidsecondarg = "": IF n >= 2 THEN findidsecondarg = getelement$(a$, 2)
        try = findid(firstelement$)
        IF Error_Happened THEN GOTO errmes
        DO WHILE try
            IF id.subfunc = 2 THEN validsub = 1: EXIT DO
            IF try = 2 THEN
                findidsecondarg = "": IF n >= 2 THEN findidsecondarg = getelement$(a$, 2)
                findanotherid = 1
                try = findid(firstelement$)
                IF Error_Happened THEN GOTO errmes
            ELSE
                try = 0
            END IF
        LOOP
        IF validsub = 0 THEN a$ = "Expected CALL sub-name [(...)]": GOTO errmes
    END IF

    'sub?
    IF n >= 1 THEN

        IF firstelement$ = "?" THEN firstelement$ = "PRINT"

        findidsecondarg = "": IF n >= 2 THEN findidsecondarg = getelement$(a$, 2)
        try = findid(firstelement$)
        IF Error_Happened THEN GOTO errmes
        DO WHILE try
            IF id.subfunc = 2 THEN

                'check symbol
                s$ = removesymbol$(firstelement$ + "")
                IF Error_Happened THEN GOTO errmes
                IF ASC(id.musthave) = 36 THEN '="$"
                    IF s$ <> "$" THEN GOTO notsubcall 'missing musthave "$"
                ELSE
                    IF LEN(s$) THEN GOTO notsubcall 'unrequired symbol added
                END IF
                'check for variable assignment
                IF n > 1 THEN
                    IF ASC(id.specialformat) <> 61 THEN '<>"="
                        IF ASC(getelement$(a$, 2)) = 61 THEN GOTO notsubcall 'assignment, not sub call
                    END IF
                END IF
                'check for array assignment
                IF n > 2 THEN
                    IF firstelement$ <> "PRINT" AND firstelement$ <> "LPRINT" THEN
                        IF getelement$(a$, 2) = "(" THEN
                            B = 1
                            FOR i = 3 TO n
                                e$ = getelement$(a$, i)
                                IF e$ = "(" THEN B = B + 1
                                IF e$ = ")" THEN
                                    B = B - 1
                                    IF B = 0 THEN
                                        IF i = n THEN EXIT FOR
                                        IF getelement$(a$, i + 1) = "=" THEN GOTO notsubcall
                                    END IF
                                END IF
                            NEXT
                        END IF
                    END IF
                END IF


                'generate error on driect _GL call
                IF firstelement$ = "_GL" THEN
                    a$ = "Cannot call SUB _GL directly": GOTO errmes
                END IF

                IF firstelement$ = "VWATCH" THEN
                    a$ = "Cannot call SUB VWATCH directly": GOTO errmes
                END IF

                IF firstelement$ = "OPEN" THEN
                    'gwbasic or qbasic version?
                    B = 0
                    FOR x = 2 TO n
                        a2$ = getelement$(a$, x)
                        IF a2$ = "(" THEN B = B + 1
                        IF a2$ = ")" THEN B = B - 1
                        IF a2$ = "FOR" OR a2$ = "AS" THEN EXIT FOR 'qb style open verified
                        IF B = 0 AND a2$ = "," THEN 'the gwbasic version includes a comma after the first string expression
                            findanotherid = 1
                            try = findid(firstelement$) 'id of sub_open_gwbasic
                            IF Error_Happened THEN GOTO errmes
                            EXIT FOR
                        END IF
                    NEXT
                END IF


                'IF findid(firstelement$) THEN
                'IF id.subfunc = 2 THEN


                IF firstelement$ = "CLOSE" OR firstelement$ = "RESET" THEN
                    IF firstelement$ = "RESET" THEN
                        IF n > 1 THEN a$ = "Syntax error - RESET takes no parameters": GOTO errmes
                        l$ = SCase$("Reset")
                    ELSE
                        l$ = SCase$("Close")
                    END IF

                    IF n = 1 THEN
                        WriteBufLine MainTxtBuf, "sub_close(NULL,0);" 'closes all files
                    ELSE
                        l$ = l$ + sp
                        B = 0
                        s = 0
                        a3$ = ""
                        FOR x = 2 TO n
                            a2$ = getelement$(ca$, x)
                            IF a2$ = "(" THEN B = B + 1
                            IF a2$ = ")" THEN B = B - 1
                            IF a2$ = "#" AND B = 0 THEN
                                IF s = 0 THEN s = 1 ELSE a$ = "Unexpected #": GOTO errmes
                                l$ = l$ + "#" + sp2
                                GOTO closenexta
                            END IF

                            IF a2$ = "," AND B = 0 THEN
                                IF s = 2 THEN
                                    e$ = fixoperationorder$(a3$)
                                    IF Error_Happened THEN GOTO errmes
                                    l$ = l$ + tlayout$ + sp2 + "," + sp
                                    e$ = evaluatetotyp(e$, 64&)
                                    IF Error_Happened THEN GOTO errmes
                                    WriteBufLine MainTxtBuf, "sub_close(" + e$ + ",1);"
                                    a3$ = ""
                                    s = 0
                                    GOTO closenexta
                                ELSE
                                    a$ = "Expected expression before ,": GOTO errmes
                                END IF
                            END IF

                            s = 2
                            IF a3$ = "" THEN a3$ = a2$ ELSE a3$ = a3$ + sp + a2$

                            closenexta:
                        NEXT

                        IF s = 2 THEN
                            e$ = fixoperationorder$(a3$)
                            IF Error_Happened THEN GOTO errmes
                            l$ = l$ + tlayout$
                            e$ = evaluatetotyp(e$, 64&)
                            IF Error_Happened THEN GOTO errmes
                            WriteBufLine MainTxtBuf, "sub_close(" + e$ + ",1);"
                        ELSE
                            l$ = LEFT$(l$, LEN(l$) - 1)
                        END IF

                    END IF
                    layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                    GOTO finishedline
                END IF 'close
















                'data, restore, read
                IF firstelement$ = "READ" THEN 'file input
                    xread ca$, n
                    IF Error_Happened THEN GOTO errmes
                    'note: layout done in xread sub
                    GOTO finishedline
                END IF 'read





































                lineinput = 0
                IF n >= 2 THEN
                    IF firstelement$ = "LINE" AND secondelement$ = "INPUT" THEN
                        lineinput = 1
                        a$ = RIGHT$(a$, LEN(a$) - 5): ca$ = RIGHT$(ca$, LEN(ca$) - 5): n = n - 1 'remove "LINE"
                        firstelement$ = "INPUT"
                    END IF
                END IF

                IF firstelement$ = "INPUT" THEN 'file input
                    IF n > 1 THEN
                        IF getelement$(a$, 2) = "#" THEN
                            l$ = SCase$("Input") + sp + "#": IF lineinput THEN l$ = SCase$("Line") + sp + l$

                            u$ = str2$(uniquenumber)
                            'which file?
                            IF n = 2 THEN a$ = "Expected # ... , ...": GOTO errmes
                            a3$ = ""
                            B = 0
                            FOR i = 3 TO n
                                a2$ = getelement$(ca$, i)
                                IF a2$ = "(" THEN B = B + 1
                                IF a2$ = ")" THEN B = B - 1
                                IF a2$ = "," AND B = 0 THEN
                                    IF a3$ = "" THEN a$ = "Expected # ... , ...": GOTO errmes
                                    GOTO inputgotfn
                                END IF
                                IF a3$ = "" THEN a3$ = a2$ ELSE a3$ = a3$ + sp + a2$
                            NEXT
                            inputgotfn:
                            e$ = fixoperationorder$(a3$)
                            IF Error_Happened THEN GOTO errmes
                            l$ = l$ + sp2 + tlayout$
                            e$ = evaluatetotyp(e$, 64&)
                            IF Error_Happened THEN GOTO errmes
                            WriteBufLine MainTxtBuf, "tmp_fileno=" + e$ + ";"
                            WriteBufLine MainTxtBuf, "if (new_error) goto skip" + u$ + ";"
                            i = i + 1
                            IF i > n THEN a$ = "Expected , ...": GOTO errmes
                            a3$ = ""
                            B = 0
                            FOR i = i TO n
                                a2$ = getelement$(ca$, i)
                                IF a2$ = "(" THEN B = B + 1
                                IF a2$ = ")" THEN B = B - 1
                                IF i = n THEN
                                    IF a3$ = "" THEN a3$ = a2$ ELSE a3$ = a3$ + sp + a2$
                                    a2$ = ",": B = 0
                                END IF
                                IF a2$ = "," AND B = 0 THEN
                                    IF a3$ = "" THEN a$ = "Expected , ...": GOTO errmes
                                    e$ = fixoperationorder$(a3$)
                                    IF Error_Happened THEN GOTO errmes
                                    l$ = l$ + sp2 + "," + sp + tlayout$
                                    e$ = evaluate(e$, t)
                                    IF Error_Happened THEN GOTO errmes
                                    IF (t AND ISREFERENCE) = 0 THEN a$ = "Expected variable-name": GOTO errmes
                                    IF (t AND ISSTRING) THEN
                                        e$ = refer(e$, t, 0)
                                        IF Error_Happened THEN GOTO errmes
                                        IF lineinput THEN
                                            WriteBufLine MainTxtBuf, "sub_file_line_input_string(tmp_fileno," + e$ + ");"
                                            WriteBufLine MainTxtBuf, "if (new_error) goto skip" + u$ + ";"
                                        ELSE
                                            WriteBufLine MainTxtBuf, "sub_file_input_string(tmp_fileno," + e$ + ");"
                                            WriteBufLine MainTxtBuf, "if (new_error) goto skip" + u$ + ";"
                                        END IF
                                        stringprocessinghappened = 1
                                    ELSE
                                        IF lineinput THEN a$ = "Expected string-variable": GOTO errmes

                                        'numeric variable
                                        IF (t AND ISFLOAT) <> 0 OR (t AND 511) <> 64 THEN
                                            IF (t AND ISOFFSETINBITS) THEN
                                                setrefer e$, t, "((int64)func_file_input_float(tmp_fileno," + str2(t) + "))", 1
                                                IF Error_Happened THEN GOTO errmes
                                            ELSE
                                                setrefer e$, t, "func_file_input_float(tmp_fileno," + str2(t) + ")", 1
                                                IF Error_Happened THEN GOTO errmes
                                            END IF
                                        ELSE
                                            IF t AND ISUNSIGNED THEN
                                                setrefer e$, t, "func_file_input_uint64(tmp_fileno)", 1
                                                IF Error_Happened THEN GOTO errmes
                                            ELSE
                                                setrefer e$, t, "func_file_input_int64(tmp_fileno)", 1
                                                IF Error_Happened THEN GOTO errmes
                                            END IF
                                        END IF

                                        WriteBufLine MainTxtBuf, "if (new_error) goto skip" + u$ + ";"

                                    END IF
                                    IF i = n THEN EXIT FOR
                                    IF lineinput THEN a$ = "Too many variables": GOTO errmes
                                    a3$ = "": a2$ = ""
                                END IF
                                IF a3$ = "" THEN a3$ = a2$ ELSE a3$ = a3$ + sp + a2$
                            NEXT
                            WriteBufLine MainTxtBuf, "skip" + u$ + ":"
                            IF stringprocessinghappened THEN WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
                            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                            GOTO finishedline
                        END IF
                    END IF
                END IF 'input#


                IF firstelement$ = "INPUT" THEN
                    l$ = SCase$("Input"): IF lineinput THEN l$ = SCase$("Line") + sp + l$
                    commaneeded = 0
                    i = 2

                    newline = 1: IF getelement$(a$, i) = ";" THEN newline = 0: i = i + 1: l$ = l$ + sp + ";"

                    a2$ = getelement$(ca$, i)
                    IF LEFT$(a2$, 1) = CHR$(34) THEN
                        e$ = fixoperationorder$(a2$): l$ = l$ + sp + tlayout$
                        IF Error_Happened THEN GOTO errmes
                        WriteBufLine MainTxtBuf, "qbs_print(qbs_new_txt_len(" + a2$ + "),0);"
                        i = i + 1
                        'MUST be followed by a ; or ,
                        a2$ = getelement$(ca$, i)
                        i = i + 1
                        l$ = l$ + sp2 + a2$
                        IF a2$ = ";" THEN
                            IF lineinput THEN GOTO finishedpromptstring
                            WriteBufLine MainTxtBuf, "qbs_print(qbs_new_txt(" + CHR$(34) + "? " + CHR$(34) + "),0);"
                            GOTO finishedpromptstring
                        END IF
                        IF a2$ = "," THEN
                            GOTO finishedpromptstring
                        END IF
                        a$ = "Syntax error - Reference: INPUT [;] " + CHR$(34) + "[Question or statement text]" + CHR$(34) + "{,|;} variable[, ...] or INPUT ; variable[, ...]": GOTO errmes
                    END IF
                    'there was no promptstring, so print a ?
                    IF lineinput = 0 THEN WriteBufLine MainTxtBuf, "qbs_print(qbs_new_txt(" + CHR$(34) + "? " + CHR$(34) + "),0);"
                    finishedpromptstring:
                    numvar = 0
                    FOR i = i TO n
                        IF commaneeded = 1 THEN
                            a2$ = getelement$(ca$, i)
                            IF a2$ <> "," THEN a$ = "Syntax error - comma expected": GOTO errmes
                        ELSE

                            B = 0
                            e$ = ""
                            FOR i2 = i TO n
                                e2$ = getelement$(ca$, i2)
                                IF e2$ = "(" THEN B = B + 1
                                IF e2$ = ")" THEN B = B - 1
                                IF e2$ = "," AND B = 0 THEN i2 = i2 - 1: EXIT FOR
                                e$ = e$ + sp + e2$
                            NEXT
                            i = i2: IF i > n THEN i = n
                            IF e$ = "" THEN a$ = "Expected variable": GOTO errmes
                            e$ = RIGHT$(e$, LEN(e$) - 1)
                            e$ = fixoperationorder$(e$)
                            IF Error_Happened THEN GOTO errmes
                            l$ = l$ + sp + tlayout$: IF i <> n THEN l$ = l$ + sp2 + ","
                            e$ = evaluate(e$, t)
                            IF Error_Happened THEN GOTO errmes
                            IF (t AND ISREFERENCE) = 0 THEN a$ = "Expected variable": GOTO errmes

                            IF (t AND ISSTRING) THEN
                                e$ = refer(e$, t, 0)
                                IF Error_Happened THEN GOTO errmes
                                numvar = numvar + 1
                                IF lineinput THEN
                                    WriteBufLine MainTxtBuf, "qbs_input_variabletypes[" + str2(numvar) + "]=ISSTRING+512;"
                                ELSE
                                    WriteBufLine MainTxtBuf, "qbs_input_variabletypes[" + str2(numvar) + "]=ISSTRING;"
                                END IF
                                WriteBufLine MainTxtBuf, "qbs_input_variableoffsets[" + str2(numvar) + "]=" + e$ + ";"
                                GOTO gotinputvar
                            END IF

                            IF lineinput THEN a$ = "Expected string variable": GOTO errmes
                            IF (t AND ISARRAY) THEN
                                IF (t AND ISOFFSETINBITS) THEN
                                    a$ = "INPUT cannot handle BIT array elements": GOTO errmes
                                END IF
                            END IF
                            e$ = "&(" + refer(e$, t, 0) + ")"
                            IF Error_Happened THEN GOTO errmes

                            'remove assumed/unnecessary flags
                            IF (t AND ISPOINTER) THEN t = t - ISPOINTER
                            IF (t AND ISINCONVENTIONALMEMORY) THEN t = t - ISINCONVENTIONALMEMORY
                            IF (t AND ISREFERENCE) THEN t = t - ISREFERENCE

                            'IF (t AND ISOFFSETINBITS) THEN
                            'numvar = numvar + 1
                            'consider storing the bit offset in unused bits of t
                            'WriteBufLine MainTxtBuf, "qbs_input_variabletypes[" + str2(numvar) + "]=" + str2(t) + ";"
                            'WriteBufLine MainTxtBuf, "qbs_input_variableoffsets[" + str2(numvar) + "]=" + refer(ref$, typ, 1) + ";"
                            'GOTO gotinputvar
                            'END IF

                            'assume it is a regular variable
                            numvar = numvar + 1
                            WriteBufLine MainTxtBuf, "qbs_input_variabletypes[" + str2(numvar) + "]=" + str2$(t) + ";"
                            WriteBufLine MainTxtBuf, "qbs_input_variableoffsets[" + str2(numvar) + "]=" + e$ + ";"
                            GOTO gotinputvar

                        END IF
                        gotinputvar:
                        commaneeded = commaneeded + 1: IF commaneeded = 2 THEN commaneeded = 0
                    NEXT
                    IF numvar = 0 THEN a$ = "Syntax error - Reference: INPUT [;] " + CHR$(34) + "[Question or statement text]" + CHR$(34) + "{,|;} variable[, ...] or INPUT ; variable[, ...]": GOTO errmes
                    IF lineinput = 1 AND numvar > 1 THEN a$ = "Too many variables": GOTO errmes
                    IF vWatchOn = 1 THEN
                        WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= -4; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars);"
                    END IF
                    WriteBufLine MainTxtBuf, "qbs_input(" + str2(numvar) + "," + str2$(newline) + ");"
                    WriteBufLine MainTxtBuf, "if (stop_program) end();"
                    IF vWatchOn = 1 THEN
                        WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= -5; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars);"
                    END IF
                    WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
                    layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                    GOTO finishedline
                END IF



                IF firstelement$ = "WRITE" THEN 'file write
                    IF n > 1 THEN
                        IF getelement$(a$, 2) = "#" THEN
                            xfilewrite ca$, n
                            IF Error_Happened THEN GOTO errmes
                            GOTO finishedline
                        END IF '#
                    END IF 'n>1
                END IF '"write"

                IF firstelement$ = "WRITE" THEN 'write
                    xwrite ca$, n
                    IF Error_Happened THEN GOTO errmes
                    GOTO finishedline
                END IF '"write"

                IF firstelement$ = "PRINT" THEN 'file print
                    IF n > 1 THEN
                        IF getelement$(a$, 2) = "#" THEN
                            xfileprint a$, ca$, n
                            IF Error_Happened THEN GOTO errmes
                            l$ = tlayout$
                            layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                            GOTO finishedline
                        END IF '#
                    END IF 'n>1
                END IF '"print"

                IF firstelement$ = "PRINT" OR firstelement$ = "LPRINT" THEN
                    IF secondelement$ <> "USING" THEN 'check to see if we need to auto-add semicolons
                        elementon = 2
                        redosemi:
                        FOR i = elementon TO n - 1
                            nextchar$ = getelement$(a$, i + 1)
                            IF nextchar$ <> ";" AND nextchar$ <> "," AND nextchar$ <> "+" AND nextchar$ <> ")" THEN
                                temp1$ = getelement$(a$, i)
                                beginpoint = INSTR(beginpoint, temp1$, CHR$(34))
                                endpoint = INSTR(beginpoint + 1, temp1$, CHR$(34) + ",")
                                IF beginpoint <> 0 AND endpoint <> 0 THEN 'if we have both positions
                                    'Quote without semicolon check (like PRINT "abc"123)
                                    textlength = endpoint - beginpoint - 1
                                    textvalue$ = MID$(temp1$, endpoint + 2, LEN(LTRIM$(STR$(textlength))))
                                    IF VAL(textvalue$) = textlength THEN
                                        insertelements a$, i, ";"
                                        insertelements ca$, i, ";"
                                        n = n + 1
                                        elementon = i + 2 'just a easy way to reduce redundant calls to the routine
                                        GOTO redosemi
                                    END IF
                                END IF
                                IF temp1$ <> "USING" THEN
                                    IF LEFT$(LTRIM$(nextchar$), 1) = CHR$(34) THEN
                                        IF temp1$ <> ";" AND temp1$ <> "," AND temp1$ <> "+" AND temp1$ <> "(" THEN
                                            insertelements a$, i, ";"
                                            insertelements ca$, i, ";"
                                            n = n + 1
                                            elementon = i + 2 'just a easy way to reduce redundant calls to the routine
                                            GOTO redosemi
                                        END IF
                                    END IF
                                END IF
                            END IF
                        NEXT
                    END IF

                    xprint a$, ca$, n
                    IF Error_Happened THEN GOTO errmes
                    l$ = tlayout$
                    layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                    GOTO finishedline
                END IF



                IF firstelement$ = "CLEAR" THEN
                    IF subfunc$ <> "" THEN a$ = "CLEAR cannot be used inside a SUB/FUNCTION": GOTO errmes
                END IF

                'LSET/RSET
                IF firstelement$ = "LSET" OR firstelement$ = "RSET" THEN
                    IF n = 1 THEN a$ = "Expected " + firstelement$ + " ...": GOTO errmes
                    IF firstelement$ = "LSET" THEN l$ = SCase$("LSet") ELSE l$ = SCase$("RSet")
                    dest$ = ""
                    source$ = ""
                    part = 1
                    i = 2
                    a3$ = ""
                    B = 0
                    DO
                        IF i > n THEN
                            IF part <> 2 OR a3$ = "" THEN a$ = "Expected LSET/RSET stringvariable=string": GOTO errmes
                            source$ = a3$
                            EXIT DO
                        END IF
                        a2$ = getelement$(ca$, i)
                        IF a2$ = "(" THEN B = B + 1
                        IF a2$ = ")" THEN B = B - 1
                        IF a2$ = "=" AND B = 0 THEN
                            IF part = 1 THEN dest$ = a3$: part = 2: a3$ = "": GOTO lrsetgotpart
                        END IF
                        IF LEN(a3$) THEN a3$ = a3$ + sp + a2$ ELSE a3$ = a2$
                        lrsetgotpart:
                        i = i + 1
                    LOOP
                    IF dest$ = "" THEN a$ = "Expected LSET/RSET stringvariable=string": GOTO errmes
                    'check if it is a valid source string
                    f$ = fixoperationorder$(dest$)
                    IF Error_Happened THEN GOTO errmes
                    l$ = l$ + sp + tlayout$ + sp + "="
                    e$ = evaluate(f$, sourcetyp)
                    IF Error_Happened THEN GOTO errmes
                    IF (sourcetyp AND ISREFERENCE) = 0 OR (sourcetyp AND ISSTRING) = 0 THEN a$ = "LSET/RSET expects a string variable/array-element as its first argument": GOTO errmes
                    dest$ = evaluatetotyp(f$, ISSTRING)
                    IF Error_Happened THEN GOTO errmes
                    source$ = fixoperationorder$(source$)
                    IF Error_Happened THEN GOTO errmes
                    l$ = l$ + sp + tlayout$
                    layoutdone = 1: IF LEN(layout$) THEN layout$ = layout$ + sp + l$ ELSE layout$ = l$
                    source$ = evaluatetotyp(source$, ISSTRING)
                    IF Error_Happened THEN GOTO errmes
                    IF firstelement$ = "LSET" THEN
                        WriteBufLine MainTxtBuf, "sub_lset(" + dest$ + "," + source$ + ");"
                    ELSE
                        WriteBufLine MainTxtBuf, "sub_rset(" + dest$ + "," + source$ + ");"
                    END IF
                    GOTO finishedline
                END IF

                'SWAP
                IF firstelement$ = "SWAP" THEN
                    IF n < 4 THEN a$ = "Expected SWAP ... , ...": GOTO errmes
                    B = 0
                    ele = 1
                    e1$ = ""
                    e2$ = ""
                    FOR i = 2 TO n
                        e$ = getelement$(ca$, i)
                        IF e$ = "(" THEN B = B + 1
                        IF e$ = ")" THEN B = B - 1
                        IF e$ = "," AND B = 0 THEN
                            IF ele = 2 THEN a$ = "Expected SWAP ... , ...": GOTO errmes
                            ele = 2
                        ELSE
                            IF ele = 1 THEN e1$ = e1$ + sp + e$ ELSE e2$ = e2$ + sp + e$
                        END IF
                    NEXT
                    IF e2$ = "" THEN a$ = "Expected SWAP ... , ...": GOTO errmes
                    e1$ = RIGHT$(e1$, LEN(e1$) - 1): e2$ = RIGHT$(e2$, LEN(e2$) - 1)

                    e1$ = fixoperationorder(e1$)
                    IF Error_Happened THEN GOTO errmes
                    e1l$ = tlayout$
                    e2$ = fixoperationorder(e2$)
                    IF Error_Happened THEN GOTO errmes
                    e2l$ = tlayout$
                    e1$ = evaluate(e1$, e1typ): e2$ = evaluate(e2$, e2typ)
                    IF Error_Happened THEN GOTO errmes
                    IF (e1typ AND ISREFERENCE) = 0 OR (e2typ AND ISREFERENCE) = 0 THEN a$ = "Expected variable": GOTO errmes

                    layoutdone = 1
                    l$ = SCase$("Swap") + sp + e1l$ + sp2 + "," + sp + e2l$
                    IF LEN(layout$) = 0 THEN layout$ = l$ ELSE layout$ = layout$ + sp + l$

                    'swap strings?
                    IF (e1typ AND ISSTRING) THEN
                        IF (e2typ AND ISSTRING) = 0 THEN a$ = "Type mismatch": GOTO errmes
                        e1$ = refer(e1$, e1typ, 0): e2$ = refer(e2$, e2typ, 0)
                        IF Error_Happened THEN GOTO errmes
                        WriteBufLine MainTxtBuf, "swap_string(" + e1$ + "," + e2$ + ");"
                        GOTO finishedline
                    END IF

                    'swap UDT?
                    'note: entire UDTs, unlike thier elements cannot be swapped like standard variables
                    '      as UDT sizes may vary, and to avoid a malloc operation, QB64 should allocate a buffer
                    '      in global.txt for the purpose of swapping each UDT type

                    IF e1typ AND ISUDT THEN
                        a$ = e1$
                        'retrieve ID
                        i = INSTR(a$, sp3)
                        IF i THEN
                            idnumber = VAL(LEFT$(a$, i - 1)): a$ = RIGHT$(a$, LEN(a$) - i)
                            getid idnumber
                            IF Error_Happened THEN GOTO errmes
                            u = VAL(a$)
                            i = INSTR(a$, sp3): a$ = RIGHT$(a$, LEN(a$) - i): E = VAL(a$)
                            i = INSTR(a$, sp3): o$ = RIGHT$(a$, LEN(a$) - i)
                            n$ = "UDT_" + RTRIM$(id.n): IF id.t = 0 THEN n$ = "ARRAY_" + n$ + "[0]"
                            IF E = 0 THEN 'not an element of UDT u
                                lhsscope$ = scope$
                                e$ = e2$: t2 = e2typ
                                IF (t2 AND ISUDT) = 0 THEN a$ = "Expected SWAP with similar user defined type": GOTO errmes
                                idnumber2 = VAL(e$)
                                getid idnumber2
                                IF Error_Happened THEN GOTO errmes
                                n2$ = "UDT_" + RTRIM$(id.n): IF id.t = 0 THEN n2$ = "ARRAY_" + n2$ + "[0]"
                                i = INSTR(e$, sp3): e$ = RIGHT$(e$, LEN(e$) - i): u2 = VAL(e$)
                                i = INSTR(e$, sp3): e$ = RIGHT$(e$, LEN(e$) - i): e2 = VAL(e$)

                                i = InStr(e$, sp3): o2$ = Right$(e$, Len(e$) - i)
                                'WARNING: u2 may need minor modifications based on e to see if they are the same
                                If u <> u2 Or e2 <> 0 Then a$ = "Expected SWAP with similar user defined type": GoTo errmes
                                dst$ = "(((char*)" + lhsscope$ + n$ + ")+(" + o$ + "))"
                                src$ = "(((char*)" + scope$ + n2$ + ")+(" + o2$ + "))"
                                B = udtxsize(u) \ 8
                                siz$ = str2$(B)
                                If B = 1 Then WriteBufLine MainTxtBuf, "swap_8(" + src$ + "," + dst$ + ");"
                                If B = 2 Then WriteBufLine MainTxtBuf, "swap_16(" + src$ + "," + dst$ + ");"
                                If B = 4 Then WriteBufLine MainTxtBuf, "swap_32(" + src$ + "," + dst$ + ");"
                                If B = 8 Then WriteBufLine MainTxtBuf, "swap_64(" + src$ + "," + dst$ + ");"
                                If B <> 1 And B <> 2 And B <> 4 And B <> 8 Then WriteBufLine MainTxtBuf, "swap_block(" + src$ + "," + dst$ + "," + siz$ + ");"
                                GoTo finishedline
                            End If 'e=0
                        End If 'i
                    End If 'isudt

                    'cull irrelavent flags to make comparison possible
                    e1typc = e1typ
                    If e1typc And ISPOINTER Then e1typc = e1typc - ISPOINTER
                    If e1typc And ISINCONVENTIONALMEMORY Then e1typc = e1typc - ISINCONVENTIONALMEMORY
                    If e1typc And ISARRAY Then e1typc = e1typc - ISARRAY
                    If e1typc And ISUNSIGNED Then e1typc = e1typc - ISUNSIGNED
                    If e1typc And ISUDT Then e1typc = e1typc - ISUDT
                    e2typc = e2typ
                    If e2typc And ISPOINTER Then e2typc = e2typc - ISPOINTER
                    If e2typc And ISINCONVENTIONALMEMORY Then e2typc = e2typc - ISINCONVENTIONALMEMORY
                    If e2typc And ISARRAY Then e2typc = e2typc - ISARRAY
                    If e2typc And ISUNSIGNED Then e2typc = e2typc - ISUNSIGNED
                    If e2typc And ISUDT Then e2typc = e2typc - ISUDT
                    If e1typc <> e2typc Then a$ = "Type mismatch": GoTo errmes
                    t = e1typ
                    If t And ISOFFSETINBITS Then a$ = "Cannot SWAP bit-length variables": GoTo errmes
                    B = t And 511
                    t$ = str2$(B): If B > 64 Then t$ = "longdouble"
                    WriteBufLine MainTxtBuf, "swap_" + t$ + "(&" + refer(e1$, e1typ, 0) + ",&" + refer(e2$, e2typ, 0) + ");"
                    If Error_Happened Then GoTo errmes
                    GoTo finishedline
                End If

                If firstelement$ = "OPTION" Then
                    If optionexplicit = 0 Then e$ = " or OPTION " + qb64prefix$ + "EXPLICIT" Else e$ = ""
                    If optionexplicitarray = 0 Then e$ = e$ + " or OPTION " + qb64prefix$ + "EXPLICITARRAY"
                    If n = 1 Then a$ = "Expected OPTION BASE" + e$: GoTo errmes
                    e$ = getelement$(a$, 2)
                    Select Case e$
                        Case "BASE"
                            l$ = getelement$(a$, 3)
                            If l$ <> "0" And l$ <> "1" Then a$ = "Expected OPTION BASE 0 or 1": GoTo errmes
                            If l$ = "1" Then optionbase = 1 Else optionbase = 0
                            l$ = SCase$("Option" + sp + "Base") + sp + l$
                            layoutdone = 1: If Len(layout$) Then layout$ = layout$ + sp + l$ Else layout$ = l$
                            GoTo finishedline
                        Case "EXPLICIT", "_EXPLICIT"
                            If e$ = "EXPLICIT" And qb64prefix$ = "_" Then
                                If optionexplicit = 0 Then e$ = " or OPTION " + qb64prefix$ + "EXPLICIT" Else e$ = ""
                                If optionexplicitarray = 0 Then e$ = e$ + " or OPTION " + qb64prefix$ + "EXPLICITARRAY"
                                a$ = "Expected OPTION BASE" + e$: GoTo errmes
                            End If

                            opex_desiredState = -1
                            If optionexplicit = 0 Then
                                If opex_recompileAttempts = 0 Then
                                    opex_recompileAttempts = opex_recompileAttempts + 1
                                    GoTo do_recompile
                                End If
                            End If

                            l$ = SCase$("Option") + sp
                            If e$ = "EXPLICIT" Then l$ = l$ + SCase$("Explicit") Else l$ = l$ + SCase$("_Explicit")
                            layoutdone = 1: If Len(layout$) Then layout$ = layout$ + sp + l$ Else layout$ = l$
                            GoTo finishedline
                        Case "EXPLICITARRAY", "_EXPLICITARRAY"
                            If e$ = "EXPLICITARRAY" And qb64prefix$ = "_" Then
                                If optionexplicit = 0 Then e$ = " or OPTION " + qb64prefix$ + "EXPLICIT" Else e$ = ""
                                If optionexplicitarray = 0 Then e$ = e$ + " or OPTION " + qb64prefix$ + "EXPLICITARRAY"
                                a$ = "Expected OPTION BASE" + e$: GoTo errmes
                            End If

                            opexarray_desiredState = -1
                            If optionexplicitarray = 0 Then
                                If opexarray_recompileAttempts = 0 Then
                                    opexarray_recompileAttempts = opexarray_recompileAttempts + 1
                                    GoTo do_recompile
                                End If
                            End If

                            l$ = SCase$("Option") + sp
                            If e$ = "EXPLICITARRAY" Then l$ = l$ + SCase$("ExplicitArray") Else l$ = l$ + SCase$("_ExplicitArray")
                            layoutdone = 1: If Len(layout$) Then layout$ = layout$ + sp + l$ Else layout$ = l$
                            GoTo finishedline
                        Case Else
                            If optionexplicit = 0 Then e$ = " or OPTION " + qb64prefix$ + "EXPLICIT" Else e$ = ""
                            If optionexplicitarray = 0 Then e$ = e$ + " or OPTION " + qb64prefix$ + "EXPLICITARRAY"
                            a$ = "Expected OPTION BASE" + e$: GoTo errmes
                    End Select
                End If

                'any other "unique" subs can be processed above

                id2 = id

                targetid = currentid

                If RTrim$(id2.callname) = "sub_stub" Then a$ = "Command not implemented": GoTo errmes

                If n > 1 Then
                    If id2.args = 0 Then a$ = "SUB does not require any arguments": GoTo errmes
                End If

                SetDependency id2.Dependency

                seperateargs_error = 0
                passedneeded = seperateargs(getelements(a$, 2, n), getelements(ca$, 2, n), passed&)
                If seperateargs_error Then a$ = seperateargs_error_message: GoTo errmes

                'backup args to local string array space before calling evaluate
                For i = 1 To OptMax: separgs2(i) = "": Next 'save space!
                For i = 1 To OptMax + 1: separgslayout2(i) = "": Next
                For i = 1 To id2.args: separgs2(i) = separgs(i): Next
                For i = 1 To id2.args + 1: separgslayout2(i) = separgslayout(i): Next



                If Debug Then
                    Print #9, "separgs:": For i = 1 To id2.args: Print #9, i, separgs2(i): Next
                    Print #9, "separgslayout:": For i = 1 To id2.args + 1: Print #9, i, separgslayout2(i): Next
                End If



                'note: seperateargs finds the arguments to pass and sets passed& as necessary
                '      FIXOPERTIONORDER is not called on these args yet
                '      what we need it to do is build a second array of layout info at the same time
                '   ref:DIM SHARED separgslayout(100) AS STRING
                '   the above array stores what layout info (if any) goes BEFORE the arg in question
                '       it has one extra index which is the arg after

                If usecall Then
                    If id.internal_subfunc Then
                        If usecall = 1 Then l$ = SCase$("Call") + sp + SCase$(RTrim$(id.cn)) + RTrim$(id.musthave) + sp2 + "(" + sp2
                        If usecall = 2 Then l$ = SCase$("Call") + sp + SCase$(RTrim$(id.cn)) + RTrim$(id.musthave) + sp 'sp at end for easy parsing
                    Else
                        If usecall = 1 Then l$ = SCase$("Call") + sp + RTrim$(id.cn) + RTrim$(id.musthave) + sp2 + "(" + sp2
                        If usecall = 2 Then l$ = SCase$("Call") + sp + RTrim$(id.cn) + RTrim$(id.musthave) + sp 'sp at end for easy parsing
                    End If
                Else
                    If id.internal_subfunc Then
                        l$ = SCase$(RTrim$(id.cn)) + RTrim$(id.musthave) + sp
                    Else
                        l$ = RTrim$(id.cn) + RTrim$(id.musthave) + sp
                    End If
                End If

                subcall$ = RTrim$(id.callname) + "("
                addedlayout = 0

                fieldcall = 0
                'GET/PUT field exception
                If RTrim$(id2.callname) = "sub_get" Or RTrim$(id2.callname) = "sub_put" Then
                    If passed And 2 Then
                        'regular GET/PUT call with variable provided
                        passed = passed - 2 'for complience with existing methods, remove 'passed' flag for the passing of a variable
                    Else
                        'FIELD GET/PUT call with variable omited
                        If RTrim$(id2.callname) = "sub_get" Then
                            fieldcall = 1
                            subcall$ = "field_get("
                        Else
                            fieldcall = 2
                            subcall$ = "field_put("
                        End If
                    End If
                End If 'field exception

                If RTrim$(id2.callname) = "sub_timer" Or RTrim$(id2.callname) = "sub_key" Then 'spacing exception
                    If usecall = 0 Then
                        l$ = Left$(l$, Len(l$) - 1) + sp2
                    End If
                End If

                For i = 1 To id2.args
                    targettyp = CVL(Mid$(id2.arg, -3 + i * 4, 4))
                    nele = Asc(Mid$(id2.nele, i, 1))
                    nelereq = Asc(Mid$(id2.nelereq, i, 1))

                    addlayout = 1 'omits option values in layout (eg. BINARY="2")
                    convertspacing = 0 'if an 'equation' is next, it will be preceeded by a space
                    x$ = separgslayout2$(i)
                    Do While Len(x$)
                        x = Asc(x$)
                        If x Then
                            convertspacing = 0
                            x2$ = Mid$(x$, 2, x)
                            x$ = Right$(x$, Len(x$) - x - 1)

                            s = 0
                            an = 0
                            x3$ = Right$(l$, 1)
                            If x3$ = sp Then s = 1
                            If x3$ = sp2 Then
                                s = 2
                                If alphanumeric(Asc(Right$(l$, 2))) Then an = 1
                            Else
                                If alphanumeric(Asc(x3$)) Then an = 1
                            End If
                            s1 = s

                            If alphanumeric(Asc(x2$)) Then convertspacing = 1


                            If x2$ = "LPRINT" Then

                                'x2$="LPRINT"
                                'x$=CHR$(0)
                                'x3$=[sp] from WIDTH[sp]
                                'therefore...
                                's=1
                                'an=0
                                'convertspacing=1


                                'if debug=1 then
                                'print #9,"LPRINT:"
                                'print #9,s
                                'print #9,an
                                'print #9,l$
                                'print #9,x2$
                                'end if

                            End If




                            If (an = 1 Or addedlayout = 1) And alphanumeric(Asc(x2$)) <> 0 Then



                                s = 1 'force space
                                x2$ = x2$ + sp2
                                GoTo customlaychar
                            End If

                            If x2$ = "=" Then
                                s = 1
                                x2$ = x2$ + sp
                                GoTo customlaychar
                            End If

                            If x2$ = "#" Then
                                s = 1
                                x2$ = x2$ + sp2
                                GoTo customlaychar
                            End If

                            If x2$ = "," Then x2$ = x2$ + sp: GoTo customlaychar


                            If x$ = Chr$(0) Then 'substitution
                                If x2$ = "STEP" Then x2$ = x2$ + sp2: GoTo customlaychar
                                x2$ = x2$ + sp: GoTo customlaychar
                            End If

                            'default solution sp2+?+sp2
                            x2$ = x2$ + sp2





                            customlaychar:
                            If s = 0 Then s = 2
                            If s <> s1 Then
                                If s1 Then l$ = Left$(l$, Len(l$) - 1)
                                If s = 1 Then l$ = l$ + sp
                                If s = 2 Then l$ = l$ + sp2
                            End If

                            If (RTrim$(id2.callname) = "sub_timer" Or RTrim$(id2.callname) = "sub_key") And i = id2.args Then 'spacing exception
                                If x2$ <> ")" + sp2 Then
                                    l$ = Left$(l$, Len(l$) - 1) + sp
                                End If
                            End If

                            l$ = l$ + x2$

                        Else
                            addlayout = 0
                            x$ = Right$(x$, Len(x$) - 1)
                        End If
                        addedlayout = 0
                    Loop



                    '---better sub syntax checking begins here---



                    If targettyp = -3 Then
                        If separgs2(i) = "N-LL" Then a$ = "Expected array name": GoTo errmes
                        'names of numeric arrays have ( ) automatically appended (nothing else)
                        e$ = separgs2(i)

                        If InStr(e$, sp) = 0 Then 'one element only
                            try_string$ = e$
                            try = findid(try_string$)
                            If Error_Happened Then GoTo errmes
                            Do
                                If try Then
                                    If id.arraytype Then
                                        If (id.arraytype And ISSTRING) = 0 Then
                                            e$ = e$ + sp + "(" + sp + ")"
                                            Exit Do
                                        End If
                                    End If
                                    '---
                                    If try = 2 Then findanotherid = 1: try = findid(try_string$) Else try = 0
                                    If Error_Happened Then GoTo errmes
                                End If 'if try
                                If try = 0 Then 'add symbol?
                                    If Len(removesymbol$(try_string$)) = 0 Then
                                        If Error_Happened Then GoTo errmes
                                        a = Asc(try_string$)
                                        If a >= 97 And a <= 122 Then a = a - 32
                                        If a = 95 Then a = 91
                                        a = a - 64
                                        If Len(defineextaz(a)) Then try_string$ = try_string$ + defineextaz(a): try = findid(try_string$)
                                        If Error_Happened Then GoTo errmes
                                    End If
                                End If 'try=0
                            Loop Until try = 0
                        End If 'one element only



                        e$ = fixoperationorder$(e$)
                        If Error_Happened Then GoTo errmes
                        If convertspacing = 1 And addlayout = 1 Then l$ = Left$(l$, Len(l$) - 1) + sp
                        If addlayout Then l$ = l$ + tlayout$: addedlayout = 1
                        e$ = evaluatetotyp(e$, -2)
                        If Error_Happened Then GoTo errmes
                        GoTo sete
                    End If '-3


                    If targettyp = -2 Then
                        e$ = fixoperationorder$(e$)
                        If Error_Happened Then GoTo errmes
                        If convertspacing = 1 And addlayout = 1 Then l$ = Left$(l$, Len(l$) - 1) + sp
                        If addlayout Then l$ = l$ + tlayout$: addedlayout = 1
                        e$ = evaluatetotyp(e$, -2)
                        If Error_Happened Then GoTo errmes
                        GoTo sete
                    End If '-2

                    If targettyp = -4 Then

                        If fieldcall Then
                            i = id2.args + 1
                            Exit For
                        End If

                        If separgs2(i) = "N-LL" Then a$ = "Expected variable name/array element": GoTo errmes
                        e$ = fixoperationorder$(separgs2(i))
                        If Error_Happened Then GoTo errmes
                        If convertspacing = 1 And addlayout = 1 Then l$ = Left$(l$, Len(l$) - 1) + sp
                        If addlayout Then l$ = l$ + tlayout$: addedlayout = 1

                        'GET/PUT RANDOM-ACCESS override
                        If firstelement$ = "GET" Or firstelement$ = "PUT" Then
                            e2$ = e$ 'backup
                            e$ = evaluate(e$, sourcetyp)
                            If Error_Happened Then GoTo errmes
                            If (sourcetyp And ISSTRING) Then
                                If (sourcetyp And ISFIXEDLENGTH) = 0 Then
                                    'replace name of sub to call
                                    subcall$ = Right$(subcall$, Len(subcall$) - 7) 'delete original name
                                    'note: GET2 & PUT2 take differing input, following code is correct
                                    If firstelement$ = "GET" Then
                                        subcall$ = "sub_get2" + subcall$
                                        e$ = refer(e$, sourcetyp, 0) 'pass a qbs pointer instead
                                        If Error_Happened Then GoTo errmes
                                        GoTo sete
                                    Else
                                        subcall$ = "sub_put2" + subcall$
                                        'no goto sete required, fall through
                                    End If
                                End If
                            End If
                            e$ = e2$ 'restore
                        End If 'override

                        e$ = evaluatetotyp(e$, -4)
                        If Error_Happened Then GoTo errmes
                        GoTo sete
                    End If '-4

                    If separgs2(i) = "N-LL" Then
                        e$ = "NULL"
                    Else

                        e2$ = fixoperationorder$(separgs2(i))
                        If Error_Happened Then GoTo errmes
                        If convertspacing = 1 And addlayout = 1 Then l$ = Left$(l$, Len(l$) - 1) + sp
                        If addlayout Then l$ = l$ + tlayout$: addedlayout = 1

                        e$ = evaluate(e2$, sourcetyp)
                        If Error_Happened Then GoTo errmes

                        If sourcetyp And ISOFFSET Then
                            If (targettyp And ISOFFSET) = 0 Then
                                If id2.internal_subfunc = 0 Then a$ = "Cannot convert _OFFSET type to other types": GoTo errmes
                            End If
                        End If

                        If RTrim$(id2.callname) = "sub_paint" Then
                            If i = 3 Then
                                If (sourcetyp And ISSTRING) Then
                                    targettyp = ISSTRING
                                End If
                            End If
                        End If

                        If Left$(separgs2(i), 2) = "(" + sp Then dereference = 1 Else dereference = 0

                        'pass by reference
                        If (targettyp And ISPOINTER) Then
                            If dereference = 0 Then 'check deferencing wasn't used

                                'note: array pointer
                                If (targettyp And ISARRAY) Then
                                    If (sourcetyp And ISREFERENCE) = 0 Then a$ = "Expected arrayname()": GoTo errmes
                                    If (sourcetyp And ISARRAY) = 0 Then a$ = "Expected arrayname()": GoTo errmes
                                    If Debug Then Print #9, "sub:array reference:[" + e$ + "]"

                                    'check arrays are of same type
                                    targettyp2 = targettyp: sourcetyp2 = sourcetyp
                                    targettyp2 = targettyp2 And (511 + ISOFFSETINBITS + ISUDT + ISSTRING + ISFIXEDLENGTH + ISFLOAT)
                                    sourcetyp2 = sourcetyp2 And (511 + ISOFFSETINBITS + ISUDT + ISSTRING + ISFIXEDLENGTH + ISFLOAT)
                                    If sourcetyp2 <> targettyp2 Then a$ = "Incorrect array type passed to sub": GoTo errmes

                                    'check arrayname was followed by '()'
                                    If targettyp And ISUDT Then
                                        If Debug Then Print #9, "sub:array reference:udt reference:[" + e$ + "]"
                                        'get UDT info
                                        udtrefid = Val(e$)
                                        getid udtrefid
                                        If Error_Happened Then GoTo errmes
                                        udtrefi = InStr(e$, sp3) 'end of id
                                        udtrefi2 = InStr(udtrefi + 1, e$, sp3) 'end of u
                                        udtrefu = Val(Mid$(e$, udtrefi + 1, udtrefi2 - udtrefi - 1))
                                        udtrefi3 = InStr(udtrefi2 + 1, e$, sp3) 'skip e
                                        udtrefe = Val(Mid$(e$, udtrefi2 + 1, udtrefi3 - udtrefi2 - 1))
                                        o$ = Right$(e$, Len(e$) - udtrefi3)
                                        'note: most of the UDT info above is not required
                                        If Left$(o$, 4) <> "(0)*" Then a$ = "Expected arrayname()": GoTo errmes
                                    Else
                                        If Right$(e$, 2) <> sp3 + "0" Then a$ = "Expected arrayname()": GoTo errmes
                                    End If

                                    idnum = Val(Left$(e$, InStr(e$, sp3) - 1))
                                    getid idnum
                                    If Error_Happened Then GoTo errmes

                                    If targettyp And ISFIXEDLENGTH Then
                                        targettypsize = CVL(Mid$(id2.argsize, i * 4 - 4 + 1, 4))
                                        If id.tsize <> targettypsize Then a$ = "Incorrect array type passed to sub": GoTo errmes
                                    End If

                                    If Mid$(sfcmemargs(targetid), i, 1) = Chr$(1) Then 'cmem required?
                                        If cmemlist(idnum) = 0 Then
                                            cmemlist(idnum) = 1
                                            recompile = 1
                                        End If
                                    End If

                                    If id.linkid = 0 Then
                                        'if id.linkid is 0, it means the number of array elements is definietly
                                        'known of the array being passed, this is not some "fake"/unknown array.
                                        'using the numer of array elements of a fake array would be dangerous!


                                        If nelereq = 0 Then
                                            'only continue if the number of array elements required is unknown
                                            'and it needs to be set

                                            If id.arrayelements > 0 Then '2009

                                                nelereq = id.arrayelements
                                                Mid$(id2.nelereq, i, 1) = Chr$(nelereq)

                                            End If

                                            'print rtrim$(id2.n)+">nelereq=";nelereq

                                            ids(targetid) = id2

                                        Else

                                            'the number of array elements required is known AND
                                            'the number of elements in the array to be passed is known

                                            If id.arrayelements <> nelereq Then a$ = "Passing arrays with a differing number of elements to a SUB/FUNCTION is not supported": GoTo errmes


                                        End If
                                    End If

                                    e$ = refer(e$, sourcetyp, 1)
                                    If Error_Happened Then GoTo errmes
                                    GoTo sete

                                End If 'target is an array

                                'note: not an array...
                                'target is not an array

                                If (targettyp And ISSTRING) = 0 Then
                                    If (sourcetyp And ISREFERENCE) Then
                                        idnum = Val(Left$(e$, InStr(e$, sp3) - 1)) 'id# of sourcetyp

                                        targettyp2 = targettyp: sourcetyp2 = sourcetyp

                                        'get info about source/target
                                        arr = 0: If (sourcetyp2 And ISARRAY) Then arr = 1
                                        passudtelement = 0: If (targettyp2 And ISUDT) = 0 And (sourcetyp2 And ISUDT) <> 0 Then passudtelement = 1: sourcetyp2 = sourcetyp2 - ISUDT

                                        'remove flags irrelevant for comparison... ISPOINTER,ISREFERENCE,ISINCONVENTIONALMEMORY,ISARRAY
                                        targettyp2 = targettyp2 And (511 + ISOFFSETINBITS + ISUDT + ISFLOAT + ISSTRING)
                                        sourcetyp2 = sourcetyp2 And (511 + ISOFFSETINBITS + ISUDT + ISFLOAT + ISSTRING)

                                        'compare types
                                        If sourcetyp2 = targettyp2 Then

                                            If sourcetyp And ISUDT Then
                                                'udt/udt array

                                                'get info
                                                udtrefid = Val(e$)
                                                getid udtrefid
                                                If Error_Happened Then GoTo errmes
                                                udtrefi = InStr(e$, sp3) 'end of id
                                                udtrefi2 = InStr(udtrefi + 1, e$, sp3) 'end of u
                                                udtrefu = Val(Mid$(e$, udtrefi + 1, udtrefi2 - udtrefi - 1))
                                                udtrefi3 = InStr(udtrefi2 + 1, e$, sp3) 'skip e
                                                udtrefe = Val(Mid$(e$, udtrefi2 + 1, udtrefi3 - udtrefi2 - 1))
                                                o$ = Right$(e$, Len(e$) - udtrefi3)
                                                'note: most of the UDT info above is not required

                                                If arr Then
                                                    n$ = scope$ + "ARRAY_UDT_" + RTrim$(id.n) + "[0]"
                                                Else
                                                    n$ = scope$ + "UDT_" + RTrim$(id.n)
                                                End If

                                                e$ = "(void*)( ((char*)(" + n$ + ")) + (" + o$ + ") )"

                                                'convert void* to target type*
                                                If passudtelement Then e$ = "(" + typ2ctyp$(targettyp2 + (targettyp And ISUNSIGNED), "") + "*)" + e$
                                                If Error_Happened Then GoTo errmes

                                            Else
                                                'not a udt
                                                If arr Then
                                                    If (sourcetyp2 And ISOFFSETINBITS) Then a$ = "Cannot pass BIT array offsets": GoTo errmes
                                                    e$ = "(&(" + refer(e$, sourcetyp, 0) + "))"
                                                    If Error_Happened Then GoTo errmes
                                                Else
                                                    e$ = refer(e$, sourcetyp, 1)
                                                    If Error_Happened Then GoTo errmes
                                                End If

                                                'note: signed/unsigned mismatch requires casting
                                                If (sourcetyp And ISUNSIGNED) <> (targettyp And ISUNSIGNED) Then
                                                    e$ = "(" + typ2ctyp$(targettyp2 + (targettyp And ISUNSIGNED), "") + "*)" + e$
                                                    If Error_Happened Then GoTo errmes
                                                End If

                                            End If 'udt?

                                            If Mid$(sfcmemargs(targetid), i, 1) = Chr$(1) Then 'cmem required?
                                                If cmemlist(idnum) = 0 Then
                                                    cmemlist(idnum) = 1
                                                    recompile = 1
                                                End If
                                            End If

                                            GoTo sete
                                        End If 'similar
                                    End If 'reference
                                Else 'not a string
                                    'its a string
                                    If (sourcetyp And ISREFERENCE) Then
                                        idnum = Val(Left$(e$, InStr(e$, sp3) - 1)) 'id# of sourcetyp
                                        If Mid$(sfcmemargs(targetid), i, 1) = Chr$(1) Then 'cmem required?
                                            If cmemlist(idnum) = 0 Then
                                                cmemlist(idnum) = 1
                                                recompile = 1
                                            End If
                                        End If
                                    End If 'reference
                                End If 'its a string

                            End If 'dereference check
                        End If 'target is a pointer

                        'note: Target is not a pointer...

                        'String-numeric mismatch?
                        If targettyp And ISSTRING Then
                            If (sourcetyp And ISSTRING) = 0 Then
                                nth = i
                                If ids(targetid).args = 1 Then a$ = "String required for sub": GoTo errmes
                                a$ = str_nth$(nth) + " sub argument requires a string": GoTo errmes
                            End If
                        End If
                        If (targettyp And ISSTRING) = 0 Then
                            If sourcetyp And ISSTRING Then
                                nth = i
                                If ids(targetid).args = 1 Then a$ = "Number required for sub": GoTo errmes
                                a$ = str_nth$(nth) + " sub argument requires a number": GoTo errmes
                            End If
                        End If

                        'change to "non-pointer" value
                        If (sourcetyp And ISREFERENCE) Then
                            e$ = refer(e$, sourcetyp, 0)
                            If Error_Happened Then GoTo errmes
                        End If

                        If explicitreference = 0 Then
                            If targettyp And ISUDT Then
                                nth = i
                                If qb64prefix_set And udtxcname(targettyp And 511) = "_MEM" Then
                                    x$ = "'" + Mid$(RTrim$(udtxcname(targettyp And 511)), 2) + "'"
                                Else
                                    x$ = "'" + RTrim$(udtxcname(targettyp And 511)) + "'"
                                End If
                                If ids(targetid).args = 1 Then a$ = "TYPE " + x$ + " required for sub": GoTo errmes
                                a$ = str_nth$(nth) + " sub argument requires TYPE " + x$: GoTo errmes
                            End If
                        Else
                            If sourcetyp And ISUDT Then a$ = "Number required for sub": GoTo errmes
                        End If

                        'round to integer if required
                        If (sourcetyp And ISFLOAT) Then
                            If (targettyp And ISFLOAT) = 0 Then
                                '**32 rounding fix
                                bits = targettyp And 511
                                If bits <= 16 Then e$ = "qbr_float_to_long(" + e$ + ")"
                                If bits > 16 And bits < 32 Then e$ = "qbr_double_to_long(" + e$ + ")"
                                If bits >= 32 Then e$ = "qbr(" + e$ + ")"
                            End If
                        End If

                        If (targettyp And ISPOINTER) Then 'pointer required
                            If (targettyp And ISSTRING) Then GoTo sete 'no changes required
                            t$ = typ2ctyp$(targettyp, "")
                            If Error_Happened Then GoTo errmes
                            v$ = "pass" + str2$(uniquenumber)
                            'assume numeric type
                            If Mid$(sfcmemargs(targetid), i, 1) = Chr$(1) Then 'cmem required?
                                bytesreq = ((targettyp And 511) + 7) \ 8
                                WriteBufLine defdatahandle, t$ + " *" + v$ + "=NULL;"
                                WriteBufLine DataTxtBuf, "if(" + v$ + "==NULL){"
                                WriteBufLine DataTxtBuf, "cmem_sp-=" + str2(bytesreq) + ";"
                                WriteBufLine DataTxtBuf, v$ + "=(" + t$ + "*)(dblock+cmem_sp);"
                                WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
                                WriteBufLine DataTxtBuf, "}"
                                e$ = "&(*" + v$ + "=" + e$ + ")"
                            Else
                                WriteBufLine DataTxtBuf, t$ + " " + v$ + ";"
                                e$ = "&(" + v$ + "=" + e$ + ")"
                            End If
                            GoTo sete
                        End If

                    End If 'not "NULL"

                    sete:

                    If RTrim$(id2.callname) = "sub_paint" Then
                        If i = 3 Then
                            If (sourcetyp And ISSTRING) Then
                                e$ = "(qbs*)" + e$
                            Else
                                e$ = "(uint32)" + e$
                            End If
                        End If
                    End If

                    If id2.ccall Then

                        'if a forced cast from a returned ccall function is in e$, remove it
                        If Left$(e$, 3) = "(  " Then
                            e$ = removecast$(e$)
                        End If

                        If targettyp And ISSTRING Then
                            e$ = "(char*)(" + e$ + ")->chr"
                        End If

                        If LTrim$(RTrim$(e$)) = "0" Then e$ = "NULL"

                    End If

                    If i <> 1 Then subcall$ = subcall$ + ","
                    subcall$ = subcall$ + e$
                Next

                'note: i=id.args+1
                x$ = separgslayout2$(i)
                Do While Len(x$)
                    x = Asc(x$)
                    If x Then
                        x2$ = Mid$(x$, 2, x)
                        x$ = Right$(x$, Len(x$) - x - 1)

                        s = 0
                        an = 0
                        x3$ = Right$(l$, 1)
                        If x3$ = sp Then s = 1
                        If x3$ = sp2 Then
                            s = 2
                            If alphanumeric(Asc(Right$(l$, 2))) Then an = 1
                            'if asc(right$(l$,2))=34 then an=1
                        Else
                            If alphanumeric(Asc(x3$)) Then an = 1
                            'if asc(x3$)=34 then an=1
                        End If
                        s1 = s

                        If (an = 1 Or addedlayout = 1) And alphanumeric(Asc(x2$)) <> 0 Then
                            s = 1 'force space
                            x2$ = x2$ + sp2
                            GoTo customlaychar2
                        End If

                        If x2$ = "=" Then
                            s = 1
                            x2$ = x2$ + sp
                            GoTo customlaychar2
                        End If

                        If x2$ = "#" Then
                            s = 1
                            x2$ = x2$ + sp2
                            GoTo customlaychar2
                        End If

                        If x2$ = "," Then x2$ = x2$ + sp: GoTo customlaychar2

                        If x$ = Chr$(0) Then 'substitution
                            If x2$ = "STEP" Then x2$ = SCase$("Step") + sp2: GoTo customlaychar2
                            x2$ = x2$ + sp: GoTo customlaychar2
                        End If

                        'default solution sp2+?+sp2
                        x2$ = x2$ + sp2
                        customlaychar2:
                        If s = 0 Then s = 2
                        If s <> s1 Then
                            If s1 Then l$ = Left$(l$, Len(l$) - 1)
                            If s = 1 Then l$ = l$ + sp
                            If s = 2 Then l$ = l$ + sp2
                        End If
                        l$ = l$ + x2$

                    Else
                        addlayout = 0
                        x$ = Right$(x$, Len(x$) - 1)
                    End If
                    addedlayout = 0
                Loop






                If passedneeded Then
                    subcall$ = subcall$ + "," + str2$(passed&)
                End If
                subcall$ = subcall$ + ");"

                If firstelement$ = "SLEEP" Then
                    If vWatchOn = 1 Then
                        WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= -4; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars);"
                    End If
                End If

                WriteBufLine MainTxtBuf, subcall$

                If firstelement$ = "SLEEP" Then
                    If vWatchOn = 1 Then
                        WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= -5; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars);"
                    End If
                End If

                subcall$ = ""
                If stringprocessinghappened Then WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"

                layoutdone = 1
                x$ = Right$(l$, 1): If x$ = sp Or x$ = sp2 Then l$ = Left$(l$, Len(l$) - 1)
                If usecall = 1 Then l$ = l$ + sp2 + ")"
                If Debug Then Print #9, "SUB layout:[" + l$ + "]"
                If Len(layout$) = 0 Then layout$ = l$ Else layout$ = layout$ + sp + l$
                GoTo finishedline


            End If

            If try = 2 Then
                findidsecondarg = "": If n >= 2 Then findidsecondarg = getelement$(a$, 2)
                findanotherid = 1
                try = findid(firstelement$)
                If Error_Happened Then GoTo errmes
            Else
                try = 0
            End If
        Loop

    End If

    notsubcall:

    If n >= 1 Then
        If firstelement$ = "LET" Then
            If n = 1 Then a$ = "Syntax error - Reference: LET variable = expression (tip: LET is entirely optional)": GoTo errmes
            ca$ = Right$(ca$, Len(ca$) - 4)
            n = n - 1
            l$ = SCase$("Let")
            If Len(layout$) Then layout$ = layout$ + sp + l$ Else layout$ = l$
            'note: layoutdone=1 will be set later
            GoTo letused
        End If
    End If

    'LET ???=???
    If n >= 3 Then
        If InStr(a$, sp + "=" + sp) Then
            letused:
            assign ca$, n
            If Error_Happened Then GoTo errmes
            layoutdone = 1
            If Len(layout$) = 0 Then layout$ = tlayout$ Else layout$ = layout$ + sp + tlayout$
            GoTo finishedline
        End If
    End If '>=3
    If Right$(a$, 2) = sp + "=" Then a$ = "Expected ... = expression": GoTo errmes

    'Syntax error
    a$ = "Syntax error": GoTo errmes

    finishedline:
    THENGOTO = 0
    finishedline2:

    If inputfunctioncalled Then
        inputfunctioncalled = 0
        If vWatchOn = 1 Then
            WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= -5; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars);"
        End If
    End If

    If arrayprocessinghappened = 1 Then arrayprocessinghappened = 0

    inclinenump$ = ""
    If inclinenumber(inclevel) Then
        inclinenump$ = "," + str2$(inclinenumber(inclevel))
        thisincname$ = getfilepath$(incname$(inclevel))
        thisincname$ = Mid$(incname$(inclevel), Len(thisincname$) + 1)
        inclinenump$ = inclinenump$ + "," + Chr$(34) + thisincname$ + Chr$(34)
    End If
    If NoChecks = 0 Then
        If vWatchOn And inclinenumber(inclevel) = 0 Then temp$ = vWatchErrorCall$ Else temp$ = ""
        If dynscope Then
            dynscope = 0
            WriteBufLine MainTxtBuf, "if(qbevent){" + temp$ + "evnt(" + str2$(linenumber) + inclinenump$ + ");if(r)goto S_" + str2$(statementn) + ";}"
        Else
            WriteBufLine MainTxtBuf, "if(!qbevent)break;" + temp$ + "evnt(" + str2$(linenumber) + inclinenump$ + ");}while(r);"
        End If
    End If

    finishednonexec:

    firstLine = 0

    If layoutdone = 0 Then layoutok = 0 'invalidate layout if not handled

    If continuelinefrom = 0 Then 'note: manager #2 requires this condition

        'Include Manager #2 '***
        If Len(addmetainclude$) Then

            If inclevel = 0 Then
                'backup line formatting
                layoutcomment_backup$ = layoutcomment$
                layoutok_backup = layoutok
                layout_backup$ = layout$
            End If

            a$ = addmetainclude$: addmetainclude$ = "" 'read/clear message

            If inclevel = 0 Then
                includingFromRoot = 0
                forceIncludingFile = 0
                forceInclude:
                If forceIncludeFromRoot$ <> "" Then
                    a$ = forceIncludeFromRoot$
                    forceIncludeFromRoot$ = ""
                    forceIncludingFile = 1
                    includingFromRoot = 1
                End If
            End If

            If inclevel = 100 Then a$ = "Too many indwelling INCLUDE files": GoTo errmes
            '1. Verify file exists (location is either (a)relative to source file or (b)absolute)
            fh = 99 + inclevel + 1

            firstTryMethod = 1
            If includingFromRoot <> 0 And inclevel = 0 Then firstTryMethod = 2
            For try = firstTryMethod To 2 'if including file from root, do not attempt including from relative location
                If try = 1 Then
                    If inclevel = 0 Then
                        If idemode Then p$ = idepath$ + pathsep$ Else p$ = getfilepath$(sourcefile$)
                    Else
                        p$ = getfilepath$(incname(inclevel))
                    End If
                    f$ = p$ + a$
                End If
                If try = 2 Then f$ = a$
                If _FileExists(f$) Then
                    qberrorhappened = -2 '***
                    Open f$ For Binary As #fh
                    qberrorhappened2: '***
                    If qberrorhappened = -2 Then Exit For '***
                End If
                qberrorhappened = 0
            Next
            If qberrorhappened <> -2 Then qberrorhappened = 0: a$ = "File " + a$ + " not found": GoTo errmes
            inclevel = inclevel + 1: incname$(inclevel) = f$: inclinenumber(inclevel) = 0
        End If 'fall through to next section...
        '--------------------
        Do While inclevel
            fh = 99 + inclevel
            '2. Feed next line
            If EOF(fh) = 0 Then
                Line Input #fh, x$
                a3$ = x$
                continuelinefrom = 0
                inclinenumber(inclevel) = inclinenumber(inclevel) + 1
                'create extended error string 'incerror$'
                errorLineInInclude = inclinenumber(inclevel)
                e$ = " in line " + str2(inclinenumber(inclevel)) + " of " + incname$(inclevel) + " included"
                If inclevel > 1 Then
                    e$ = e$ + " (through "
                    For x = 1 To inclevel - 1 Step 1
                        e$ = e$ + incname$(x)
                        If x < inclevel - 1 Then 'a sep is req
                            If x = inclevel - 2 Then
                                e$ = e$ + " then "
                            Else
                                e$ = e$ + ", "
                            End If
                        End If
                    Next
                    e$ = e$ + ")"
                End If
                incerror$ = e$
                linenumber = linenumber - 1 'lower official linenumber to counter later increment
                If idemode Then sendc$ = Chr$(10) + a3$: GoTo sendcommand 'passback
                GoTo includeline
            End If
            '3. Close & return control
            Close #fh
            inclevel = inclevel - 1
            If inclevel = 0 Then
                If forceIncludingFile = 1 Then
                    forceIncludingFile = 0
                    GoTo forceIncludeCompleted
                End If
                'restore line formatting
                layoutok = layoutok_backup
                layout$ = layout_backup$
                layoutcomment$ = layoutcomment_backup$
            End If
        Loop 'fall through to next section...
        '(end manager)



    End If 'continuelinefrom=0


    If Debug Then
        Print #9, "[layout check]"
        Print #9, "[" + layoutoriginal$ + "]"
        Print #9, "[" + layout$ + "]"
        Print #9, layoutok
        Print #9, "[end layout check]"
    End If




    If idemode Then
        If continuelinefrom <> 0 Then GoTo ide4 'continue processing other commands on line

        If Len(layoutcomment$) Then
            If Len(layout$) Then layout$ = layout$ + sp + layoutcomment$ Else layout$ = layoutcomment$
        End If

        If layoutok = 0 Then
            layout$ = layoutoriginal$
        Else

            'reverse '046' changes present in autolayout
            'replace fix046$ with .
            i = InStr(layout$, fix046$)
            Do While i
                layout$ = Left$(layout$, i - 1) + "." + Right$(layout$, Len(layout$) - (i + Len(fix046$) - 1))
                i = InStr(layout$, fix046$)
            Loop

        End If
        x = lhscontrollevel: If controllevel < lhscontrollevel Then x = controllevel
        If definingtype = 2 Then x = x + 1
        If definingtype > 0 Then definingtype = 2
        If declaringlibrary = 2 Then x = x + 1
        If declaringlibrary > 0 Then declaringlibrary = 2
        layout$ = Space$(x) + layout$
        If linecontinuation Then layout$ = ""

        GoTo ideret4 'return control to IDE
    End If

    'layout is not currently used by the compiler (as appose to the IDE), if it was it would be used here
    skipide4:
Loop

'add final line
If lastLineReturn = 0 Then
    lastLineReturn = 1
    lastLine = 1
    wholeline$ = ""
    GoTo mainpassLastLine
End If

ide5:
linenumber = 0

If closedmain = 0 Then closemain

If definingtype Then linenumber = definingtypeerror: a$ = "TYPE without END TYPE": GoTo errmes

'check for open controls (copy #1)
If controllevel Then
    a$ = "Unidentified open control block"
    Select Case controltype(controllevel)
        Case 1: a$ = "IF without END IF"
        Case 2: a$ = "FOR without NEXT"
        Case 3, 4: a$ = "DO without LOOP"
        Case 5: a$ = "WHILE without WEND"
        Case 6: a$ = "$IF without $END IF"
        Case 10 To 19: a$ = "SELECT CASE without END SELECT"
        Case 32: a$ = "SUB/FUNCTION without END SUB/FUNCTION"
    End Select
    linenumber = controlref(controllevel)
    GoTo errmes
End If

If ideindentsubs = 0 Then
    If Len(subfunc) Then a$ = "SUB/FUNCTION without END SUB/FUNCTION": GoTo errmes
End If

'close the error handler (cannot be put in 'closemain' because subs/functions can also add error jumps to this file)
WriteBufLine ErrTxtBuf, "exit(99);" 'in theory this line should never be run!
WriteBufLine ErrTxtBuf, "}" 'close error jump handler

'create CLEAR method "CLEAR"
MainTxtBuf = OpenBuffer%("O", tmpdir$ + "clear.txt")

For i = 1 To idn

    If ids(i).staticscope Then 'static scope?
        subfunc = RTrim$(ids(i).insubfunc) 'set static scope
        GoTo clearstaticscope
    End If

    a = Asc(ids(i).insubfunc)
    If a = 0 Or a = 32 Then 'global scope?
        subfunc = "" 'set global scope
        clearstaticscope:

        If ids(i).arraytype Then 'an array
            getid i
            If Error_Happened Then GoTo errmes
            If id.arrayelements = -1 Then GoTo clearerasereturned 'cannot erase non-existant array
            If InStr(vWatchVariableExclusions$, "@" + RTrim$(id.callname) + "@") > 0 Then
                GoTo clearerasereturned
            End If
            clearerasereturn = 1: GoTo clearerase
        End If 'array

        If ids(i).t Then 'non-array variable
            getid i
            If Error_Happened Then GoTo errmes
            bytes$ = variablesize$(-1)
            If Error_Happened Then GoTo errmes
            'create a reference
            typ = id.t + ISREFERENCE
            If typ And ISUDT Then
                e$ = str2(i) + sp3 + str2(typ And 511) + sp3 + "0" + sp3 + "0"
            Else
                e$ = str2(i)
            End If
            e$ = refer$(e$, typ, 1)
            If Error_Happened Then GoTo errmes
            If typ And ISSTRING Then
                If typ And ISFIXEDLENGTH Then
                    WriteBufLine MainTxtBuf, "memset((void*)(" + e$ + "->chr),0," + bytes$ + ");"
                    GoTo cleared
                Else
                    If InStr(vWatchVariableExclusions$, "@" + e$ + "@") = 0 And Left$(e$, 12) <> "_SUB_VWATCH_" Then
                        WriteBufLine MainTxtBuf, e$ + "->len=0;"
                    End If
                    GoTo cleared
                End If
            End If
            If typ And ISUDT Then
                If udtxvariable(typ And 511) Then
                    'this next procedure resets values of UDT variables with variable-length strings
                    clear_udt_with_varstrings e$, typ And 511, MainTxtBuf, 0
                Else
                    WriteBufLine MainTxtBuf, "memset((void*)" + e$ + ",0," + bytes$ + ");"
                End If
            Else
                If InStr(vWatchVariableExclusions$, "@" + e$ + "@") = 0 And Left$(e$, 12) <> "_SUB_VWATCH_" Then
                    WriteBufLine MainTxtBuf, "*" + e$ + "=0;"
                End If
            End If
            GoTo cleared
        End If 'non-array variable

    End If 'scope

    cleared:
    clearerasereturned:
Next

If Debug Then
    Print #9, "finished making program!"
    Print #9, "recompile="; recompile
End If

'Set cmem flags for subs/functions requiring data passed in cmem
For i = 1 To idn
    If cmemlist(i) Then 'must be in cmem

        getid i
        If Error_Happened Then GoTo errmes

        If Debug Then Print #9, "recompiling cmem sf! checking:"; RTrim$(id.n)

        If id.sfid Then 'it is an argument of a sub/function

            If Debug Then Print #9, "recompiling cmem sf! It's a sub/func arg!"

            i2 = id.sfid
            x = id.sfarg

            If Debug Then Print #9, "recompiling cmem sf! values:"; i2; x

            'check if cmem flag is set, if not then set it & force recompile
            If Mid$(sfcmemargs(i2), x, 1) <> Chr$(1) Then
                Mid$(sfcmemargs(i2), x, 1) = Chr$(1)


                If Debug Then Print #9, "recompiling cmem sf! setting:"; i2; x


                recompile = 1
            End If
        End If
    End If
Next i

unresolved = 0
For i = 1 To idn
    getid i
    If Error_Happened Then GoTo errmes

    If Debug Then Print #9, "checking id named:"; id.n

    If id.subfunc Then
        For i2 = 1 To id.args
            t = CVL(Mid$(id.arg, i2 * 4 - 3, 4))
            If t > 0 Then
                If (t And ISPOINTER) Then
                    If (t And ISARRAY) Then

                        If Debug Then Print #9, "checking argument "; i2; " of "; id.args

                        nele = Asc(Mid$(id.nele, i2, 1))
                        nelereq = Asc(Mid$(id.nelereq, i2, 1))

                        If Debug Then Print #9, "nele="; nele
                        If Debug Then Print #9, "nelereq="; nelereq

                        If nele <> nelereq Then

                            If Debug Then Print #9, "mismatch detected!"

                            unresolved = unresolved + 1
                            sflistn = sflistn + 1
                            sfidlist(sflistn) = i
                            sfarglist(sflistn) = i2
                            sfelelist(sflistn) = nelereq '0 means still unknown
                        End If
                    End If
                End If
            End If
        Next
    End If
Next

'is recompilation required to resolve this?
If unresolved > 0 Then
    If lastunresolved = -1 Then
        'first pass
        recompile = 1
        If Debug Then
            Print #9, "recompiling to resolve array elements (first time)"
            Print #9, "sflistn="; sflistn
            Print #9, "oldsflistn="; oldsflistn
        End If
    Else
        'not first pass
        If unresolved < lastunresolved Then
            recompile = 1
            If Debug Then
                Print #9, "recompiling to resolve array elements (not first time)"
                Print #9, "sflistn="; sflistn
                Print #9, "oldsflistn="; oldsflistn
            End If
        End If
    End If
End If 'unresolved
lastunresolved = unresolved

'IDEA!
'have a flag to record if anything gets resolved in a pass
'if not then it's time to stop
'the problem is the same amount of new problems may be created by a
'resolve as those that get fixed
'also/or.. could it be that previous fixes are overridden in a recompile
'          by a new fix? if so, it would give these effects



'could recompilation resolve this?
'IF sflistn <> -1 THEN
'IF sflistn <> oldsflistn THEN
'recompile = 1
'
'if debug then
'print #9,"recompile set to 1 to resolve array elements"
'print #9,"sflistn=";sflistn
'print #9,"oldsflistn=";oldsflistn
'end if
'
'END IF
'END IF

If Debug Then Print #9, "Beginning COMMON array list check..."
xi = 1
For x = 1 To commonarraylistn
    varname$ = getelement$(commonarraylist, xi): xi = xi + 1
    typ$ = getelement$(commonarraylist, xi): xi = xi + 1
    dimmethod2 = Val(getelement$(commonarraylist, xi)): xi = xi + 1
    dimshared2 = Val(getelement$(commonarraylist, xi)): xi = xi + 1
    'find the array ID (try method)
    t = typname2typ(typ$)
    If Error_Happened Then GoTo errmes
    If (t And ISUDT) = 0 Then varname$ = varname$ + type2symbol$(typ$)
    If Error_Happened Then GoTo errmes

    If Debug Then Print #9, "Checking for array '" + varname$ + "'..."

    try = findid(varname$)
    If Error_Happened Then GoTo errmes
    Do While try
        If id.arraytype Then GoTo foundcommonarray2
        If try = 2 Then findanotherid = 1: try = findid(varname$) Else try = 0
        If Error_Happened Then GoTo errmes
    Loop
    foundcommonarray2:

    If Debug Then Print #9, "Found array '" + varname$ + "!"

    If id.arrayelements = -1 Then
        If arrayelementslist(currentid) <> 0 Then recompile = 1
        If Debug Then Print #9, "Recompiling to resolve elements of:" + varname$
    End If
Next
If Debug Then Print #9, "Finished COMMON array list check!"

If vWatchDesiredState <> vWatchOn Then
    vWatchRecompileAttempts = vWatchRecompileAttempts + 1
    recompile = 1
End If

If recompile Then
    do_recompile:
    If Debug Then Print #9, "Recompile required!"
    recompile = 0
    If idemode Then iderecompile = 1
    For closeall = 1 To 255: Close closeall: Next
    Open tmpdir$ + "temp.bin" For Output Lock Write As #26 'relock
    GoTo recompile
End If

If Debug Then Print #9, "Beginning label check..."
For r = 1 To nLabels

    If Labels(r).Scope_Restriction Then
        a$ = RTrim$(Labels(r).cn)
        ignore = validlabel(a$)
        v = HashFind(a$, HASHFLAG_LABEL, ignore, r2)
        addlabchk7:
        If v Then
            If Labels(r2).Scope = Labels(r).Scope_Restriction Then
                linenumber = Labels(r).Error_Line: a$ = "Common label within a SUB/FUNCTION": GoTo errmes
            End If
            If v = 2 Then v = HashFindCont(ignore, r2): GoTo addlabchk7
        End If 'v
    End If 'restriction

    'check for undefined labels
    If Labels(r).State = 0 Then

        If InStr(PossibleSubNameLabels$, sp + UCase$(RTrim$(Labels(r).cn)) + sp) Then
            If InStr(SubNameLabels$, sp + UCase$(RTrim$(Labels(r).cn)) + sp) = 0 Then 'not already added
                SubNameLabels$ = SubNameLabels$ + UCase$(RTrim$(Labels(r).cn)) + sp
                If Debug Then Print #9, "Recompiling to resolve label:"; RTrim$(Labels(r).cn)
                GoTo do_recompile
            End If
        End If

        linenumber = Labels(r).Error_Line: a$ = "Label '" + RTrim$(Labels(r).cn) + "' not defined": GoTo errmes
    End If


    If Labels(r).Data_Referenced Then

        'check for ambiguous RESTORE reference
        x = 0
        a$ = RTrim$(Labels(r).cn)
        ignore = validlabel(a$)
        v = HashFind(a$, HASHFLAG_LABEL, ignore, r2)
        addlabchk4:
        If v Then
            x = x + 1
            If v = 2 Then v = HashFindCont(ignore, r2): GoTo addlabchk4
        End If 'v
        If x <> 1 Then linenumber = Labels(r).Error_Line: a$ = "Ambiguous DATA label": GoTo errmes

        'add global data offset variable
        WriteBufLine GlobTxtBuf, "ptrszint data_at_LABEL_" + a$ + "=" + str2(Labels(r).Data_Offset) + ";"

    End If 'data referenced

Next
If Debug Then Print #9, "Finished check!"


'if targettyp=-4 or targettyp=-5 then '? -> byte_element(offset,element size in bytes)
' IF (sourcetyp AND ISREFERENCE) = 0 THEN a$ = "Expected variable name/array element": GOTO errmes


'create include files for COMMON arrays

'return to 'main'
subfunc$ = ""
defdatahandle = GlobTxtBuf
DataTxtBuf = OpenBuffer%("A", tmpdir$ + "maindata.txt")
FreeTxtBuf = OpenBuffer%("A", tmpdir$ + "mainfree.txt")

If Console Then
    WriteBufLine GlobTxtBuf, "int32 console=1;"
Else
    WriteBufLine GlobTxtBuf, "int32 console=0;"
End If

If ScreenHide Then
    WriteBufLine GlobTxtBuf, "int32 screen_hide_startup=1;"
Else
    WriteBufLine GlobTxtBuf, "int32 screen_hide_startup=0;"
End If

If Asserts Then
    WriteBufLine GlobTxtBuf, "int32 asserts=1;"
Else
    WriteBufLine GlobTxtBuf, "int32 asserts=0;"
End If

If vWatchOn Then
    WriteBufLine GlobTxtBuf, "int32 vwatch=-1;"
Else
    WriteBufLine GlobTxtBuf, "int32 vwatch=0;"
End If

bh = OpenBuffer%("A", tmpdir$ + "dyninfo.txt")
If Resize Then
    WriteBufLine bh, "ScreenResize=1;"
End If
If Resize_Scale Then
    WriteBufLine bh, "ScreenResizeScale=" + str2(Resize_Scale) + ";"
End If

If vWatchOn = 1 Then
    vWatchVariable "", 1
End If


'DATA_finalize
WriteBufLine GlobTxtBuf, "ptrszint data_size=" + str2(DataOffset) + ";"
If DataOffset = 0 Then

    WriteBufLine GlobTxtBuf, "uint8 *data=(uint8*)calloc(1,1);"

Else

    If inline_DATA = 0 Then
        If os$ = "WIN" Then
            If OS_BITS = 32 Then
                x$ = Chr$(0): WriteBufRawData DataBinBuf, x$
                WriteBufLine GlobTxtBuf, "extern " + Chr$(34) + "C" + Chr$(34) + "{"
                WriteBufLine GlobTxtBuf, "extern char *binary_internal_temp" + tempfolderindexstr2$ + "_data_bin_start;"
                WriteBufLine GlobTxtBuf, "}"
                WriteBufLine GlobTxtBuf, "uint8 *data=(uint8*)&binary_internal_temp" + tempfolderindexstr2$ + "_data_bin_start;"
            Else
                x$ = Chr$(0): WriteBufRawData DataBinBuf, x$
                WriteBufLine GlobTxtBuf, "extern " + Chr$(34) + "C" + Chr$(34) + "{"
                WriteBufLine GlobTxtBuf, "extern char *_binary_internal_temp" + tempfolderindexstr2$ + "_data_bin_start;"
                WriteBufLine GlobTxtBuf, "}"
                WriteBufLine GlobTxtBuf, "uint8 *data=(uint8*)&_binary_internal_temp" + tempfolderindexstr2$ + "_data_bin_start;"
            End If
        End If
        If os$ = "LNX" Then
            x$ = Chr$(0): WriteBufRawData DataBinBuf, x$
            WriteBufLine GlobTxtBuf, "extern " + Chr$(34) + "C" + Chr$(34) + "{"
            WriteBufLine GlobTxtBuf, "extern char *_binary_internal_temp" + tempfolderindexstr2$ + "_data_bin_start;"
            WriteBufLine GlobTxtBuf, "}"
            WriteBufLine GlobTxtBuf, "uint8 *data=(uint8*)&_binary_internal_temp" + tempfolderindexstr2$ + "_data_bin_start;"
        End If
    Else
        'inline data
        ff = OpenBuffer%("B", tmpdir$ + "data.bin")
        x$ = ReadBufRawData$(ff, GetBufLen&(ff))
        x2$ = "uint8 inline_data[]={"
        For i = 1 To Len(x$)
            x2$ = x2$ + inlinedatastr$(Asc(x$, i))
        Next
        x2$ = x2$ + "0};"
        WriteBufLine GlobTxtBuf, x2$
        WriteBufLine GlobTxtBuf, "uint8 *data=&inline_data[0];"
        x$ = "": x2$ = ""
    End If
End If

If Debug Then Print #9, "Beginning generation of code for saving/sharing common array data..."
use_global_byte_elements = 1
ncommontmp = 0
xi = 1
For x = 1 To commonarraylistn
    varname$ = getelement$(commonarraylist, xi): xi = xi + 1
    typ$ = getelement$(commonarraylist, xi): xi = xi + 1
    dimmethod2 = Val(getelement$(commonarraylist, xi)): xi = xi + 1
    dimshared2 = Val(getelement$(commonarraylist, xi)): xi = xi + 1

    'find the array ID (try method)
    purevarname$ = varname$
    t = typname2typ(typ$)
    If Error_Happened Then GoTo errmes
    If (t And ISUDT) = 0 Then varname$ = varname$ + type2symbol$(typ$)
    If Error_Happened Then GoTo errmes
    try = findid(varname$)
    If Error_Happened Then GoTo errmes
    Do While try
        If id.arraytype Then GoTo foundcommonarray
        If try = 2 Then findanotherid = 1: try = findid(varname$) Else try = 0
        If Error_Happened Then GoTo errmes
    Loop
    a$ = "COMMON array unlocatable": GoTo errmes 'should never happen
    foundcommonarray:
    If Debug Then Print #9, "Found common array '" + varname$ + "'!"

    i = currentid
    arraytype = id.arraytype
    arrayelements = id.arrayelements
    e$ = RTrim$(id.n)
    If (t And ISUDT) = 0 Then e$ = e$ + typevalue2symbol$(t)
    If Error_Happened Then GoTo errmes
    n$ = e$
    n2$ = RTrim$(id.callname)
    tsize = id.tsize

    'select command
    command = 3 'fixed length elements
    If t And ISSTRING Then
        If (t And ISFIXEDLENGTH) = 0 Then
            command = 4 'var-len elements
        End If
    End If


    'if...
    'i) array elements are still undefined (ie. arrayelements=-1) pass the input content along
    '   if any existed or an array-placeholder
    'ii) if the array's elements were defined, any input content would have been loaded so the
    '    array (in whatever state it currently is) should be passed. If it is currently erased
    '    then it should be passed as a placeholder

    If arrayelements = -1 Then

        'load array (copies the array, if any, into a buffer for later)



        MainTxtBuf = OpenBuffer%("O", tmpdir$ + "inpchain" + str2$(i) + ".txt")
        WriteBufLine MainTxtBuf, "if (int32val==2){" 'array place-holder
        'create buffer to store array as-is in global.txt
        x$ = str2$(uniquenumber)
        x1$ = "chainarraybuf" + x$
        x2$ = "chainarraybufsiz" + x$
        WriteBufLine GlobTxtBuf, "static uint8 *" + x1$ + "=(uint8*)malloc(1);"
        WriteBufLine GlobTxtBuf, "static int64 " + x2$ + "=0;"
        'read next command
        WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int32val,4," + NewByteElement$ + "),0);"

        If command = 3 Then WriteBufLine MainTxtBuf, "if (int32val==3){" 'fixed-length-element array
        If command = 4 Then WriteBufLine MainTxtBuf, "if (int32val==4){" 'var-length-element array
        WriteBufLine MainTxtBuf, x2$ + "+=4; " + x1$ + "=(uint8*)realloc(" + x1$ + "," + x2$ + "); *(int32*)(" + x1$ + "+" + x2$ + "-4)=int32val;"

        If command = 3 Then
            'read size in bits of one element, convert it to bytes
            WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int64val,8," + NewByteElement$ + "),0);"
            WriteBufLine MainTxtBuf, x2$ + "+=8; " + x1$ + "=(uint8*)realloc(" + x1$ + "," + x2$ + "); *(int64*)(" + x1$ + "+" + x2$ + "-8)=int64val;"
            WriteBufLine MainTxtBuf, "bytes=int64val>>3;"
        End If 'com=3

        If command = 4 Then WriteBufLine MainTxtBuf, "bytes=1;" 'bytes used to calculate number of elements

        'read number of dimensions
        WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int32val,4," + NewByteElement$ + "),0);"
        WriteBufLine MainTxtBuf, x2$ + "+=4; " + x1$ + "=(uint8*)realloc(" + x1$ + "," + x2$ + "); *(int32*)(" + x1$ + "+" + x2$ + "-4)=int32val;"

        'read size of dimensions & calculate the size of the array in bytes
        WriteBufLine MainTxtBuf, "while(int32val--){"
        WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int64val,8," + NewByteElement$ + "),0);" 'lbound
        WriteBufLine MainTxtBuf, x2$ + "+=8; " + x1$ + "=(uint8*)realloc(" + x1$ + "," + x2$ + "); *(int64*)(" + x1$ + "+" + x2$ + "-8)=int64val;"
        WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int64val2,8," + NewByteElement$ + "),0);" 'ubound
        WriteBufLine MainTxtBuf, x2$ + "+=8; " + x1$ + "=(uint8*)realloc(" + x1$ + "," + x2$ + "); *(int64*)(" + x1$ + "+" + x2$ + "-8)=int64val2;"
        WriteBufLine MainTxtBuf, "bytes*=(int64val2-int64val+1);"
        WriteBufLine MainTxtBuf, "}"

        If command = 3 Then
            'read the array data
            WriteBufLine MainTxtBuf, x2$ + "+=bytes; " + x1$ + "=(uint8*)realloc(" + x1$ + "," + x2$ + ");"
            WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)(" + x1$ + "+" + x2$ + "-bytes),bytes," + NewByteElement$ + "),0);"
        End If 'com=3

        If command = 4 Then
            WriteBufLine MainTxtBuf, "bytei=0;"
            WriteBufLine MainTxtBuf, "while(bytei<bytes){"
            WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int64val,8," + NewByteElement$ + "),0);" 'get size
            WriteBufLine MainTxtBuf, x2$ + "+=8; " + x1$ + "=(uint8*)realloc(" + x1$ + "," + x2$ + "); *(int64*)(" + x1$ + "+" + x2$ + "-8)=int64val;"
            WriteBufLine MainTxtBuf, x2$ + "+=(int64val>>3); " + x1$ + "=(uint8*)realloc(" + x1$ + "," + x2$ + ");"
            WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)(" + x1$ + "+" + x2$ + "-(int64val>>3)),(int64val>>3)," + NewByteElement$ + "),0);"
            WriteBufLine MainTxtBuf, "bytei++;"
            WriteBufLine MainTxtBuf, "}"
        End If

        'get next command
        WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int32val,4," + NewByteElement$ + "),0);"
        WriteBufLine MainTxtBuf, "}" 'command=3 or 4

        WriteBufLine MainTxtBuf, "}" 'array place-holder


        'save array (saves the buffered data, if any, for later)

        MainTxtBuf = OpenBuffer%("O", tmpdir$ + "chain" + str2$(i) + ".txt")
        WriteBufLine MainTxtBuf, "int32val=2;" 'placeholder
        WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)&int32val,4," + NewByteElement$ + "),0);"

        WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)" + x1$ + "," + x2$ + "," + NewByteElement$ + "),0);"




    Else
        'note: arrayelements<>-1

        'load array

        MainTxtBuf = OpenBuffer%("O", tmpdir$ + "inpchain" + str2$(i) + ".txt")

        WriteBufLine MainTxtBuf, "if (int32val==2){" 'array place-holder
        WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int32val,4," + NewByteElement$ + "),0);"

        If command = 3 Then WriteBufLine MainTxtBuf, "if (int32val==3){" 'fixed-length-element array
        If command = 4 Then WriteBufLine MainTxtBuf, "if (int32val==4){" 'var-length-element array

        If command = 3 Then
            'get size in bits
            WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int64val,8," + NewByteElement$ + "),0);"
            '***assume correct***
        End If

        'get number of elements
        WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int32val,4," + NewByteElement$ + "),0);"
        '***assume correct***

        e$ = ""
        If command = 4 Then WriteBufLine MainTxtBuf, "bytes=1;" 'bytes counts the number of total elements
        For x2 = 1 To arrayelements

            'create 'secret' variables to assist in passing common arrays
            If x2 > ncommontmp Then
                ncommontmp = ncommontmp + 1

                If Debug Then Print #9, "Calling DIM2(...)..."
                If Error_Happened Then GoTo errmes
                retval = dim2("___RESERVED_COMMON_LBOUND" + str2$(ncommontmp), "_INTEGER64", 0, "")
                If Error_Happened Then GoTo errmes
                retval = dim2("___RESERVED_COMMON_UBOUND" + str2$(ncommontmp), "_INTEGER64", 0, "")
                If Error_Happened Then GoTo errmes
                If Debug Then Print #9, "Finished calling DIM2(...)!"
                If Error_Happened Then GoTo errmes


            End If

            WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int64val,8," + NewByteElement$ + "),0);"
            WriteBufLine MainTxtBuf, "*__INTEGER64____RESERVED_COMMON_LBOUND" + str2$(x2) + "=int64val;"
            WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int64val2,8," + NewByteElement$ + "),0);"
            WriteBufLine MainTxtBuf, "*__INTEGER64____RESERVED_COMMON_UBOUND" + str2$(x2) + "=int64val2;"
            If command = 4 Then WriteBufLine MainTxtBuf, "bytes*=(int64val2-int64val+1);"
            If x2 > 1 Then e$ = e$ + sp + "," + sp
            e$ = e$ + "___RESERVED_COMMON_LBOUND" + str2$(x2) + sp + "TO" + sp + "___RESERVED_COMMON_UBOUND" + str2$(x2)
        Next

        If Debug Then Print #9, "Calling DIM2(" + purevarname$ + "," + typ$ + ",0," + e$ + ")..."
        If Error_Happened Then GoTo errmes
        'Note: purevarname$ is simply varname$ without the type symbol after it
        redimoption = 1
        retval = dim2(purevarname$, typ$, 0, e$)
        If Error_Happened Then GoTo errmes
        redimoption = 0
        If Debug Then Print #9, "Finished calling DIM2(" + purevarname$ + "," + typ$ + ",0," + e$ + ")!"
        If Error_Happened Then GoTo errmes

        If command = 3 Then
            'use get to load in the array data
            varname$ = varname$ + sp + "(" + sp + ")"
            e$ = evaluatetotyp(fixoperationorder$(varname$), -4)
            If Error_Happened Then GoTo errmes
            WriteBufLine MainTxtBuf, "sub_get(FF,NULL," + e$ + ",0);"
        End If

        If command = 4 Then
            WriteBufLine MainTxtBuf, "bytei=0;"
            WriteBufLine MainTxtBuf, "while(bytei<bytes){"
            WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int64val,8," + NewByteElement$ + "),0);" 'get size
            WriteBufLine MainTxtBuf, "tqbs=((qbs*)(((uint64*)(" + n2$ + "[0]))[bytei]));" 'get element
            WriteBufLine MainTxtBuf, "qbs_set(tqbs,qbs_new(int64val>>3,1));" 'change string size
            WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)tqbs->chr,int64val>>3," + NewByteElement$ + "),0);" 'get size
            WriteBufLine MainTxtBuf, "bytei++;"
            WriteBufLine MainTxtBuf, "}"
        End If

        'get next command
        WriteBufLine MainTxtBuf, "sub_get(FF,NULL,byte_element((uint64)&int32val,4," + NewByteElement$ + "),0);"
        WriteBufLine MainTxtBuf, "}"
        WriteBufLine MainTxtBuf, "}"

        'save array

        MainTxtBuf = OpenBuffer%("O", tmpdir$ + "chain" + str2$(i) + ".txt")

        WriteBufLine MainTxtBuf, "int32val=2;" 'placeholder
        WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)&int32val,4," + NewByteElement$ + "),0);"

        WriteBufLine MainTxtBuf, "if (" + n2$ + "[2]&1){" 'don't add unless defined

        If command = 3 Then WriteBufLine MainTxtBuf, "int32val=3;"
        If command = 4 Then WriteBufLine MainTxtBuf, "int32val=4;"
        WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)&int32val,4," + NewByteElement$ + "),0);"

        If command = 3 Then
            'size of each element in bits
            bits = t And 511
            If t And ISUDT Then bits = udtxsize(t And 511)
            If t And ISSTRING Then bits = tsize * 8
            WriteBufLine MainTxtBuf, "int64val=" + str2$(bits) + ";" 'size in bits
            WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)&int64val,8," + NewByteElement$ + "),0);"
        End If 'com=3

        WriteBufLine MainTxtBuf, "int32val=" + str2$(arrayelements) + ";" 'number of dimensions
        WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)&int32val,4," + NewByteElement$ + "),0);"

        If command = 3 Then

            For x2 = 1 To arrayelements
                'simulate calls to lbound/ubound
                e$ = "LBOUND" + sp + "(" + sp + n$ + sp + "," + sp + str2$(x2) + sp + ")"
                e$ = evaluatetotyp(fixoperationorder$(e$), 64)
                If Error_Happened Then GoTo errmes
                WriteBufLine MainTxtBuf, "int64val=" + e$ + ";"
                WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)&int64val,8," + NewByteElement$ + "),0);"
                e$ = "UBOUND" + sp + "(" + sp + n$ + sp + "," + sp + str2$(x2) + sp + ")"
                e$ = evaluatetotyp(fixoperationorder$(e$), 64)
                If Error_Happened Then GoTo errmes
                WriteBufLine MainTxtBuf, "int64val=" + e$ + ";"
                WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)&int64val,8," + NewByteElement$ + "),0);"
            Next

            'array data
            e$ = evaluatetotyp(fixoperationorder$(n$ + sp + "(" + sp + ")"), -4)
            If Error_Happened Then GoTo errmes
            WriteBufLine MainTxtBuf, "sub_put(FF,NULL," + e$ + ",0);"

        End If 'com=3

        If command = 4 Then

            'store LBOUND/UBOUND values and calculate number of total elements/strings
            WriteBufLine MainTxtBuf, "bytes=1;" 'note: bytes is actually the total number of elements
            For x2 = 1 To arrayelements
                e$ = "LBOUND" + sp + "(" + sp + n$ + sp + "," + sp + str2$(x2) + sp + ")"
                e$ = evaluatetotyp(fixoperationorder$(e$), 64)
                If Error_Happened Then GoTo errmes
                WriteBufLine MainTxtBuf, "int64val=" + e$ + ";"
                WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)&int64val,8," + NewByteElement$ + "),0);"
                e$ = "UBOUND" + sp + "(" + sp + n$ + sp + "," + sp + str2$(x2) + sp + ")"
                e$ = evaluatetotyp(fixoperationorder$(e$), 64)
                If Error_Happened Then GoTo errmes
                WriteBufLine MainTxtBuf, "int64val2=" + e$ + ";"
                WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)&int64val2,8," + NewByteElement$ + "),0);"
                WriteBufLine MainTxtBuf, "bytes*=(int64val2-int64val+1);"
            Next

            WriteBufLine MainTxtBuf, "bytei=0;"
            WriteBufLine MainTxtBuf, "while(bytei<bytes){"
            WriteBufLine MainTxtBuf, "tqbs=((qbs*)(((uint64*)(" + n2$ + "[0]))[bytei]));" 'get element
            WriteBufLine MainTxtBuf, "int64val=tqbs->len; int64val<<=3;"
            WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)&int64val,8," + NewByteElement$ + "),0);" 'size of element
            WriteBufLine MainTxtBuf, "sub_put(FF,NULL,byte_element((uint64)tqbs->chr,tqbs->len," + NewByteElement$ + "),0);" 'element data
            WriteBufLine MainTxtBuf, "bytei++;"
            WriteBufLine MainTxtBuf, "}"

        End If 'com=4

        WriteBufLine MainTxtBuf, "}" 'don't add unless defined



    End If 'id.arrayelements=-1

Next
use_global_byte_elements = 0
If Debug Then Print #9, "Finished generation of code for saving/sharing common array data!"


For closeall = 1 To 255: Close closeall: Next
Open tmpdir$ + "temp.bin" For Output Lock Write As #26 'relock

compilelog$ = tmpdir$ + "compilelog.txt"

Open compilelog$ For Output As #1: Close #1 'Clear log

If idemode = 0 And Not QuietMode Then
    If ConsoleMode Then
        Print "[" + String$(maxprogresswidth, ".") + "] 100%"
    Else
        Locate , 1
        Print String$(maxprogresswidth, 219) + " 100%"
    End If
End If

If Not IgnoreWarnings Then
    totalUnusedVariables = 0
    For i = 1 To totalVariablesCreated
        If usedVariableList(i).used = 0 Then
            totalUnusedVariables = totalUnusedVariables + 1
        End If
    Next

    If totalUnusedVariables > 0 Then
        maxVarNameLen = 0
        For i = 1 To totalVariablesCreated
            If usedVariableList(i).used = 0 Then
                If Len(usedVariableList(i).name) > maxVarNameLen Then maxVarNameLen = Len(usedVariableList(i).name)
            End If
        Next

        header$ = "unused variable" 's (" + LTRIM$(STR$(totalUnusedVariables)) + ")"
        For i = 1 To totalVariablesCreated
            If usedVariableList(i).used = 0 Then
                addWarning usedVariableList(i).linenumber, usedVariableList(i).includeLevel, usedVariableList(i).includedLine, usedVariableList(i).includedFile, header$, usedVariableList(i).name + Space$((maxVarNameLen + 1) - Len(usedVariableList(i).name)) + "  " + usedVariableList(i).varType
            End If
        Next
    End If
End If

If idemode Then GoTo ideret5
ide6:

If idemode = 0 And No_C_Compile_Mode = 0 Then
    If Not QuietMode Then
        Print
        If os$ = "LNX" Then
            Print "Compiling C++ code into executable..."
        Else
            Print "Compiling C++ code into EXE..."
        End If
    End If
    If Len(outputfile_cmd$) Then
        'resolve relative path for output file
        path.out$ = getfilepath$(outputfile_cmd$)
        f$ = Mid$(outputfile_cmd$, Len(path.out$) + 1)
        file$ = RemoveFileExtension$(f$)

        If Len(path.out$) Or OutputIsRelativeToStartDir Then
            currentdir$ = _CWD$

            If OutputIsRelativeToStartDir Then
                ' This CHDIR makes the next CHDIR relative to _STARTDIR$
                ' We do this if the provided source file was also relative to _STARTDIR$
                ChDir _StartDir$

                ' If there was no provided path then that is the same as the
                ' output file being directly in _STARTDIR$. Assigning it here
                ' is perfectly fine and avoids failing the error check below
                ' with a blank string.
                If Len(path.out$) = 0 Then
                    path.out$ = _StartDir$
                End If
            End If

            If _DirExists(path.out$) = 0 Then
                Print
                Print "Can't create output executable - path not found: " + path.out$
                If ConsoleMode Then System 1
                End 1
            End If

            ChDir path.out$
            path.out$ = _CWD$
            ChDir currentdir$

            If Right$(path.out$, 1) <> pathsep$ Then path.out$ = path.out$ + pathsep$
            path.exe$ = path.out$

            SaveExeWithSource = -1 'Override the global setting if an output file was specified
        End If
    End If
    t.path.exe$ = path.exe$
    If _FileExists(path.exe$ + file$ + extension$) Then
        E = 0
        On Error GoTo qberror_test
        Kill path.exe$ + file$ + extension$
        On Error GoTo qberror
        If E = 1 Then
            a$ = "CANNOT CREATE " + Chr$(34) + file$ + extension$ + Chr$(34) + " BECAUSE THE FILE IS ALREADY IN USE!": GoTo errmes
        End If
    End If
    path.exe$ = t.path.exe$
End If

If ExeIconSet Then
    linenumber = ExeIconSet 'on error, this allows reporting the linenumber where $EXEICON was used
    wholeline = " $EXEICON:'" + ExeIconFile$ + "'"

    ' Copy icon file into temp directory with known name
    ' This solves the problem of the resource file needing an absolute path
    On Error GoTo qberror_test

    Dim errNo As Long
    errNo = CopyFile&(ExeIconFile$, tmpdir$ + "icon.ico")
    If errNo <> 0 Then a$ = "Error copying " + QuotedFilename$(ExeIconFile$) + " to temp directory": GoTo errmes

    On Error GoTo qberror
End If

If VersionInfoSet Then
    ManiBuf = OpenBuffer%("O", tmpdir$ + file$ + extension$ + ".manifest")
    WriteBufLine ManiBuf, "<?xml version=" + AddQuotes$("1.0") + " encoding=" + AddQuotes$("UTF-8") + " standalone=" + AddQuotes$("yes") + "?>"
    WriteBufLine ManiBuf, "<assembly xmlns=" + AddQuotes$("urn:schemas-microsoft-com:asm.v1") + " manifestVersion=" + AddQuotes$("1.0") + ">"
    WriteBufLine ManiBuf, "<assemblyIdentity"
    WriteBufLine ManiBuf, "    version=" + AddQuotes$("1.0.0.0")
    WriteBufLine ManiBuf, "    processorArchitecture=" + AddQuotes$("*")
    WriteBufLine ManiBuf, "    name=" + AddQuotes$(viCompanyName$ + "." + viProductName$ + "." + viProductName$)
    WriteBufLine ManiBuf, "    type=" + AddQuotes$("win32")
    WriteBufLine ManiBuf, "/>"
    WriteBufLine ManiBuf, "<description>" + viFileDescription$ + "</description>"
    WriteBufLine ManiBuf, "<dependency>"
    WriteBufLine ManiBuf, "    <dependentAssembly>"
    WriteBufLine ManiBuf, "        <assemblyIdentity"
    WriteBufLine ManiBuf, "            type=" + AddQuotes$("win32")
    WriteBufLine ManiBuf, "            name=" + AddQuotes$("Microsoft.Windows.Common-Controls")
    WriteBufLine ManiBuf, "            version=" + AddQuotes$("6.0.0.0")
    WriteBufLine ManiBuf, "            processorArchitecture=" + AddQuotes$("*")
    WriteBufLine ManiBuf, "            publicKeyToken=" + AddQuotes$("6595b64144ccf1df")
    WriteBufLine ManiBuf, "            language=" + AddQuotes$("*")
    WriteBufLine ManiBuf, "        />"
    WriteBufLine ManiBuf, "    </dependentAssembly>"
    WriteBufLine ManiBuf, "</dependency>"
    WriteBufLine ManiBuf, "</assembly>"

    ManiBuf = OpenBuffer%("O", tmpdir$ + "manifest.h")
    WriteBufLine ManiBuf, "#ifndef RESOURCE_H"
    WriteBufLine ManiBuf, "#define   RESOURCE_H"
    WriteBufLine ManiBuf, "#ifdef    __cplusplus"
    WriteBufLine ManiBuf, "extern " + AddQuotes$("C") + " {"
    WriteBufLine ManiBuf, "#endif"
    WriteBufLine ManiBuf, "#ifdef    __cplusplus"
    WriteBufLine ManiBuf, "}"
    WriteBufLine ManiBuf, "#endif"
    WriteBufLine ManiBuf, "#endif    /* RESOURCE_H */"
    WriteBufLine ManiBuf, "#define CREATEPROCESS_MANIFEST_RESOURCE_ID 1 /*Defined manifest file*/"
    WriteBufLine ManiBuf, "#define RT_MANIFEST                       24"
End If

If VersionInfoSet Or ExeIconSet Then
    IconRcBuf = OpenBuffer%("O", tmpdir$ + "icon.rc")

    If ExeIconSet Then
        WriteBufLine IconRcBuf, "0 ICON " + AddQuotes$("icon.ico")
    End If

    If VersionInfoSet Then
        WriteBufLine IconRcBuf, ""
        WriteBufLine IconRcBuf, "#include " + AddQuotes$("manifest.h")
        WriteBufLine IconRcBuf, ""
        WriteBufLine IconRcBuf, "CREATEPROCESS_MANIFEST_RESOURCE_ID RT_MANIFEST " + AddQuotes$(file$ + extension$ + ".manifest")
        WriteBufLine IconRcBuf, ""
        WriteBufLine IconRcBuf, "1 VERSIONINFO"
        If Len(viFileVersionNum$) Then WriteBufLine IconRcBuf, "FILEVERSION     " + viFileVersionNum$
        If Len(viProductVersionNum$) Then WriteBufLine IconRcBuf, "PRODUCTVERSION  " + viProductVersionNum$
        WriteBufLine IconRcBuf, "BEGIN"
        WriteBufLine IconRcBuf, "    BLOCK " + AddQuotes$("StringFileInfo")
        WriteBufLine IconRcBuf, "    BEGIN"
        WriteBufLine IconRcBuf, "        BLOCK " + AddQuotes$("040904E4")
        WriteBufLine IconRcBuf, "        BEGIN"
        WriteBufLine IconRcBuf, "            VALUE " + AddQuotes$("CompanyName") + "," + AddQuotes$(viCompanyName$ + "\0")
        WriteBufLine IconRcBuf, "            VALUE " + AddQuotes$("FileDescription") + "," + AddQuotes$(viFileDescription$ + "\0")
        WriteBufLine IconRcBuf, "            VALUE " + AddQuotes$("FileVersion") + "," + AddQuotes$(viFileVersion$ + "\0")
        WriteBufLine IconRcBuf, "            VALUE " + AddQuotes$("InternalName") + "," + AddQuotes$(viInternalName$ + "\0")
        WriteBufLine IconRcBuf, "            VALUE " + AddQuotes$("LegalCopyright") + "," + AddQuotes$(viLegalCopyright$ + "\0")
        WriteBufLine IconRcBuf, "            VALUE " + AddQuotes$("LegalTrademarks") + "," + AddQuotes$(viLegalTrademarks$ + "\0")
        WriteBufLine IconRcBuf, "            VALUE " + AddQuotes$("OriginalFilename") + "," + AddQuotes$(viOriginalFilename$ + "\0")
        WriteBufLine IconRcBuf, "            VALUE " + AddQuotes$("ProductName") + "," + AddQuotes$(viProductName$ + "\0")
        WriteBufLine IconRcBuf, "            VALUE " + AddQuotes$("ProductVersion") + "," + AddQuotes$(viProductVersion$ + "\0")
        WriteBufLine IconRcBuf, "            VALUE " + AddQuotes$("Comments") + "," + AddQuotes$(viComments$ + "\0")
        WriteBufLine IconRcBuf, "            VALUE " + AddQuotes$("Web") + "," + AddQuotes$(viWeb$ + "\0")
        WriteBufLine IconRcBuf, "        END"
        WriteBufLine IconRcBuf, "    END"
        WriteBufLine IconRcBuf, "    BLOCK " + AddQuotes$("VarFileInfo")
        WriteBufLine IconRcBuf, "    BEGIN"
        WriteBufLine IconRcBuf, "            VALUE " + AddQuotes$("Translation") + ", 0x409, 0x04E4"
        WriteBufLine IconRcBuf, "    END"
        WriteBufLine IconRcBuf, "END"
    End If
End If

'Write out all buffered files, all remaining
'actions are performed on the disk based files
WriteBuffers ""

If MidiSoundFontSet Then
    linenumber = MidiSoundFontSet
    wholeline = MidiSoundFontLine$

    If MidiSoundFont$ = "" Then
        MidiSoundFont$ = "internal/support/default_soundfont.sf2"
    End If

    On Error GoTo qberror_test

    errNo = CopyFile&(MidiSoundFont$, tmpdir$ + "soundfont.sf2")
    If errNo <> 0 Then a$ = "Error copying " + QuotedFilename$(MidiSoundFont$) + " to temp directory": GoTo errmes

    On Error GoTo qberror
End If

'Update dependencies

o$ = LCase$(os$)
win = 0: If os$ = "WIN" Then win = 1
lnx = 0: If os$ = "LNX" Then lnx = 1
mac = 0: If MacOSX Then mac = 1: o$ = "osx"
ver$ = Version$ 'eg. "0.123"
libs$ = ""
makedeps$ = ""
make$ = GetMakeExecutable$

localpath$ = "internal\c\"


If DEPENDENCY(DEPENDENCY_GL) Then makedeps$ = makedeps$ + " DEP_GL=y"
If DEPENDENCY(DEPENDENCY_SCREENIMAGE) Then makedeps$ = makedeps$ + " DEP_SCREENIMAGE=y"
If DEPENDENCY(DEPENDENCY_IMAGE_CODEC) Then makedeps$ = makedeps$ + " DEP_IMAGE_CODEC=y"
If DEPENDENCY(DEPENDENCY_CONSOLE_ONLY) Then makedeps$ = makedeps$ + " DEP_CONSOLE_ONLY=y"
If DEPENDENCY(DEPENDENCY_SOCKETS) Then makedeps$ = makedeps$ + " DEP_SOCKETS=y"
If DEPENDENCY(DEPENDENCY_PRINTER) Then makedeps$ = makedeps$ + " DEP_PRINTER=y"
If DEPENDENCY(DEPENDENCY_ICON) Then makedeps$ = makedeps$ + " DEP_ICON=y"
If DEPENDENCY(DEPENDENCY_SCREENIMAGE) Then makedeps$ = makedeps$ + " DEP_SCREENIMAGE=y"
If DEPENDENCY(DEPENDENCY_LOADFONT) Then makedeps$ = makedeps$ + " DEP_FONT=y"
If DEPENDENCY(DEPENDENCY_DEVICEINPUT) Then makedeps$ = makedeps$ + " DEP_DEVICEINPUT=y"
If DEPENDENCY(DEPENDENCY_ZLIB) Then makedeps$ = makedeps$ + " DEP_ZLIB=y"
If inline_DATA = 0 And DataOffset Then makedeps$ = makedeps$ + " DEP_DATA=y"
If Console Then makedeps$ = makedeps$ + " DEP_CONSOLE=y"
If ExeIconSet Or VersionInfoSet Then makedeps$ = makedeps$ + " DEP_ICON_RC=y"

If Not UseMiniaudioBackend Then
    If DEPENDENCY(DEPENDENCY_AUDIO_DECODE) Then makedeps$ = makedeps$ + " DEP_AUDIO_DECODE=y"
    If DEPENDENCY(DEPENDENCY_AUDIO_CONVERSION) Then makedeps$ = makedeps$ + " DEP_AUDIO_CONVERSION=y"
    If DEPENDENCY(DEPENDENCY_AUDIO_OUT) Then makedeps$ = makedeps$ + " DEP_AUDIO_OUT=y"
Else
    If DEPENDENCY(DEPENDENCY_AUDIO_DECODE) Or DEPENDENCY(DEPENDENCY_AUDIO_CONVERSION) Or DEPENDENCY(DEPENDENCY_AUDIO_OUT) Then
        makedeps$ = makedeps$ + " DEP_AUDIO_MINIAUDIO=y"
    End If
End If

If MidiSoundFontSet Then makedeps$ = makedeps$ + " DEP_AUDIO_DECODE_MIDI=y"

If tempfolderindex > 1 Then makedeps$ = makedeps$ + " TEMP_ID=" + str2$(tempfolderindex)

CxxFlagsExtra$ = ExtraCppFlags
CxxLibsExtra$ = ExtraLinkerFlags

' If debugging then use `-Og` rather than `-O2`
If OptimizeCppProgram Then
    If Include_GDB_Debugging_Info Then
        CxxFlagsExtra$ = CxxFlagsExtra$ + " -Og"
    Else
        CxxFlagsExtra$ = CxxFlagsExtra$ + " -O2"
    End If
Else
    If Include_GDB_Debugging_Info Then
        CxxFlagsExtra$ = CxxFlagsExtra$ + " -g"
    End If
End If

CxxLibsExtra$ = CxxLibsExtra$ + " " + mylib$ + " " + mylibopt$

' Make and the shell don't like certain characters in the file name, so we
' escape them to get them to handle them properly
escapedExe$ = StrReplace$(path.exe$ + file$ + extension$, " ", "\ ")
escapedExe$ = StrReplace$(escapedExe$, Chr$(34), "\" + Chr$(34))
escapedExe$ = StrReplace$(escapedExe$, "$", "$$")

makeline$ = make$ + makedeps$ + " EXE=" + AddQuotes$(escapedExe$)
makeline$ = makeline$ + " " + AddQuotes$("CXXFLAGS_EXTRA=" + CxxFlagsExtra$)
makeline$ = makeline$ + " " + AddQuotes$("CFLAGS_EXTRA=" + CxxFlagsExtra$)
makeline$ = makeline$ + " " + AddQuotes$("CXXLIBS_EXTRA=" + CxxLibsExtra$)
makeline$ = makeline$ + " -j" + AddQuotes$(str2$(MaxParallelProcesses))

If Not StripDebugSymbols Then
    makeline$ = makeline$ + " STRIP_SYMBOLS=n"
End If

' We avoid generating the license file if the user picked the "No Exe" option
If GenerateLicenseFile And Not NoExeSaved Then
    makeline$ = makeline$ + " GENERATE_LICENSE=y"
End If

If os$ = "WIN" Then

    makeline$ = makeline$ + " OS=win"

    'resolve static function definitions and add to global.txt
    For x = 1 To ResolveStaticFunctions
        If Len(ResolveStaticFunction_File(x)) Then

            n = 0
            Shell _Hide "cmd /c internal\c\c_compiler\bin\nm.exe " + Chr$(34) + ResolveStaticFunction_File(x) + Chr$(34) + " --demangle -g >internal\temp\nm_output.txt"
            fh = FreeFile
            s$ = " " + ResolveStaticFunction_Name(x) + "("
            Open "internal\temp\nm_output.txt" For Binary As #fh
            Do Until EOF(fh)
                Line Input #fh, a$
                If Len(a$) Then
                    'search for SPACE+functionname+LEFTBRACKET
                    x1 = InStr(a$, s$)
                    If x1 Then
                        If ResolveStaticFunction_Method(x) = 1 Then
                            x1 = x1 + 1
                            x2 = InStr(x1, a$, ")")
                            fh2 = FreeFile
                            Open tmpdir$ + "global.txt" For Append As #fh2
                            Print #fh2, "extern void " + Mid$(a$, x1, x2 - x1 + 1) + ";"
                            Close #fh2
                        End If
                        n = n + 1
                    End If 'x1
                End If '<>""
            Loop
            Close #fh
            If n > 1 Then a$ = "Unable to resolve multiple instances of sub/function '" + ResolveStaticFunction_Name(x) + "' in '" + ResolveStaticFunction_File(x) + "'": GoTo errmes

            If n = 0 Then 'attempt to locate simple function name without brackets
                fh = FreeFile
                s$ = " " + ResolveStaticFunction_Name(x)
                Open "internal\temp\nm_output.txt" For Binary As #fh
                Do Until EOF(fh)
                    Line Input #fh, a$
                    If Len(a$) Then
                        'search for SPACE+functionname
                        x1 = InStr(a$, s$)
                        If Right$(a$, Len(s$)) = s$ Then
                            fh2 = FreeFile
                            If ResolveStaticFunction_Method(x) = 1 Then
                                Open tmpdir$ + "global.txt" For Append As #fh2
                                Print #fh2, "extern " + Chr$(34) + "C" + Chr$(34) + "{"
                                Print #fh2, "extern void " + s$ + "(void);"
                                Print #fh2, "}"
                            Else
                                Open tmpdir$ + "externtype" + str2(x) + ".txt" For Output As #fh2
                                Print #fh2, "extern " + Chr$(34) + "C" + Chr$(34) + " "
                            End If
                            Close #fh2
                            n = n + 1
                            Exit Do
                        End If 'x1
                    End If '<>""
                Loop
                Close #fh
            End If

            If n = 0 Then 'a C++ dynamic object library?
                Shell _Hide "cmd /c internal\c\c_compiler\bin\nm.exe " + Chr$(34) + ResolveStaticFunction_File(x) + Chr$(34) + " -D --demangle -g >.\internal\temp\nm_output_dynamic.txt"
                fh = FreeFile
                s$ = " " + ResolveStaticFunction_Name(x) + "("
                Open "internal\temp\nm_output_dynamic.txt" For Binary As #fh
                Do Until EOF(fh)
                    Line Input #fh, a$
                    If Len(a$) Then
                        'search for SPACE+functionname+LEFTBRACKET
                        x1 = InStr(a$, s$)
                        If x1 Then
                            If ResolveStaticFunction_Method(x) = 1 Then
                                x1 = x1 + 1
                                x2 = InStr(x1, a$, ")")
                                fh2 = FreeFile
                                Open tmpdir$ + "global.txt" For Append As #fh2
                                Print #fh2, "extern void " + Mid$(a$, x1, x2 - x1 + 1) + ";"
                                Close #fh2
                            End If
                            n = n + 1
                        End If 'x1
                    End If '<>""
                Loop
                Close #fh
                If n > 1 Then a$ = "Unable to resolve multiple instances of sub/function '" + ResolveStaticFunction_Name(x) + "' in '" + ResolveStaticFunction_File(x) + "'": GoTo errmes
            End If

            If n = 0 Then 'a C dynamic object library?
                fh = FreeFile
                s$ = " " + ResolveStaticFunction_Name(x)
                Open "internal\temp\nm_output_dynamic.txt" For Binary As #fh
                Do Until EOF(fh)
                    Line Input #fh, a$
                    If Len(a$) Then
                        'search for SPACE+functionname
                        x1 = InStr(a$, s$)
                        If Right$(a$, Len(s$)) = s$ Then
                            fh2 = FreeFile
                            If ResolveStaticFunction_Method(x) = 1 Then
                                Open tmpdir$ + "global.txt" For Append As #fh2
                                Print #fh2, "extern " + Chr$(34) + "C" + Chr$(34) + "{"
                                Print #fh2, "extern void " + s$ + "(void);"
                                Print #fh2, "}"
                            Else
                                Open tmpdir$ + "externtype" + str2(x) + ".txt" For Output As #fh2
                                Print #fh2, "extern " + Chr$(34) + "C" + Chr$(34) + " "
                            End If
                            Close #fh2
                            n = n + 1
                            Exit Do
                        End If 'x1
                    End If '<>""
                Loop
                Close #fh
                If n = 0 Then a$ = "Could not find sub/function '" + ResolveStaticFunction_Name(x) + "' in '" + ResolveStaticFunction_File(x) + "'": GoTo errmes
            End If

        End If
    Next

    If No_C_Compile_Mode = 0 Then
        Shell _Hide "cmd /c " + makeline$ + " 1>> " + compilelog$ + " 2>&1"

        If idemode Then
            'Restore fg/bg colors
            dummy = DarkenFGBG(0)
        End If
    End If

    ffh = FreeFile
    Open tmpdir$ + "debug_win.bat" For Output As #ffh
    Print #ffh, "@echo off"
    Print #ffh, "cd %0\..\"
    Print #ffh, "cd ../.."
    Print #ffh, "echo C++ Debugging: " + file$ + extension$ + " using gdb.exe"
    Print #ffh, "echo Debugger commands:"
    Print #ffh, "echo After the debugger launches type 'run' to start your program"
    Print #ffh, "echo After your program crashes type 'list' to find where the problem is and fix/report it"
    Print #ffh, "echo Type 'quit' to exit"
    Print #ffh, "echo (the GDB debugger has many other useful commands, this advice is for beginners)"
    Print #ffh, "pause"
    Print #ffh, "internal\c\c_compiler\bin\gdb.exe " + Chr$(34) + path.exe$ + file$ + extension$ + Chr$(34)
    Print #ffh, "pause"
    Close ffh
End If

If os$ = "LNX" Then

    If InStr(_OS$, "[MACOSX]") Then
        makeline$ = makeline$ + " OS=osx"
    Else
        makeline$ = makeline$ + " OS=lnx"
    End If

    For x = 1 To ResolveStaticFunctions
        If Len(ResolveStaticFunction_File(x)) Then

            n = 0
            If MacOSX = 0 Then Shell _Hide "nm " + Chr$(34) + ResolveStaticFunction_File(x) + Chr$(34) + " --demangle -g >./internal/temp/nm_output.txt 2>./internal/temp/nm_error.txt"
            If MacOSX Then Shell _Hide "nm " + Chr$(34) + ResolveStaticFunction_File(x) + Chr$(34) + " >./internal/temp/nm_output.txt 2>./internal/temp/nm_error.txt"

            If MacOSX = 0 Then 'C++ name demangling not supported in MacOSX
                fh = FreeFile
                s$ = " " + ResolveStaticFunction_Name(x) + "("
                Open "internal\temp\nm_output.txt" For Binary As #fh
                Do Until EOF(fh)
                    Line Input #fh, a$
                    If Len(a$) Then
                        'search for SPACE+functionname+LEFTBRACKET
                        x1 = InStr(a$, s$)
                        If x1 Then
                            If ResolveStaticFunction_Method(x) = 1 Then
                                x1 = x1 + 1
                                x2 = InStr(x1, a$, ")")
                                fh2 = FreeFile
                                Open tmpdir$ + "global.txt" For Append As #fh2
                                Print #fh2, "extern void " + Mid$(a$, x1, x2 - x1 + 1) + ";"
                                Close #fh2
                            End If
                            n = n + 1
                        End If 'x1
                    End If '<>""
                Loop
                Close #fh
                If n > 1 Then a$ = "Unable to resolve multiple instances of sub/function '" + ResolveStaticFunction_Name(x) + "' in '" + ResolveStaticFunction_File(x) + "'": GoTo errmes
            End If 'macosx=0

            If n = 0 Then 'attempt to locate simple function name without brackets
                fh = FreeFile
                s$ = " " + ResolveStaticFunction_Name(x): s2$ = s$
                If MacOSX Then s$ = " _" + ResolveStaticFunction_Name(x) 'search for C mangled name
                Open "internal\temp\nm_output.txt" For Binary As #fh
                Do Until EOF(fh)
                    Line Input #fh, a$
                    If Len(a$) Then
                        'search for SPACE+functionname
                        x1 = InStr(a$, s$)
                        If Right$(a$, Len(s$)) = s$ Then
                            fh2 = FreeFile
                            If ResolveStaticFunction_Method(x) = 1 Then
                                Open tmpdir$ + "global.txt" For Append As #fh2
                                Print #fh2, "extern " + Chr$(34) + "C" + Chr$(34) + "{"
                                Print #fh2, "extern void " + s2$ + "(void);"
                                Print #fh2, "}"
                            Else
                                Open tmpdir$ + "externtype" + str2(x) + ".txt" For Output As #fh2
                                Print #fh2, "extern " + Chr$(34) + "C" + Chr$(34) + " "
                            End If
                            Close #fh2
                            n = n + 1
                            Exit Do
                        End If 'x1
                    End If '<>""
                Loop
                Close #fh
            End If

            If n = 0 Then 'a C++ dynamic object library?
                If MacOSX Then GoTo macosx_libfind_failed
                Shell _Hide "nm " + Chr$(34) + ResolveStaticFunction_File(x) + Chr$(34) + " -D --demangle -g >./internal/temp/nm_output_dynamic.txt 2>./internal/temp/nm_error.txt"
                fh = FreeFile
                s$ = " " + ResolveStaticFunction_Name(x) + "("
                Open "internal\temp\nm_output_dynamic.txt" For Binary As #fh
                Do Until EOF(fh)
                    Line Input #fh, a$
                    If Len(a$) Then
                        'search for SPACE+functionname+LEFTBRACKET
                        x1 = InStr(a$, s$)
                        If x1 Then
                            If ResolveStaticFunction_Method(x) = 1 Then
                                x1 = x1 + 1
                                x2 = InStr(x1, a$, ")")
                                fh2 = FreeFile
                                Open tmpdir$ + "global.txt" For Append As #fh2
                                Print #fh2, "extern void " + Mid$(a$, x1, x2 - x1 + 1) + ";"
                                Close #fh2
                            End If
                            n = n + 1
                        End If 'x1
                    End If '<>""
                Loop
                Close #fh
                If n > 1 Then a$ = "Unable to resolve multiple instances of sub/function '" + ResolveStaticFunction_Name(x) + "' in '" + ResolveStaticFunction_File(x) + "'": GoTo errmes
            End If

            If n = 0 Then 'a C dynamic object library?
                fh = FreeFile
                s$ = " " + ResolveStaticFunction_Name(x)
                Open "internal\temp\nm_output_dynamic.txt" For Binary As #fh
                Do Until EOF(fh)
                    Line Input #fh, a$
                    If Len(a$) Then
                        'search for SPACE+functionname
                        x1 = InStr(a$, s$)
                        If Right$(a$, Len(s$)) = s$ Then
                            fh2 = FreeFile
                            If ResolveStaticFunction_Method(x) = 1 Then
                                Open tmpdir$ + "global.txt" For Append As #fh2
                                Print #fh2, "extern " + Chr$(34) + "C" + Chr$(34) + "{"
                                Print #fh2, "extern void " + s$ + "(void);"
                                Print #fh2, "}"
                            Else
                                Open tmpdir$ + "externtype" + str2(x) + ".txt" For Output As #fh2
                                Print #fh2, "extern " + Chr$(34) + "C" + Chr$(34) + " "
                            End If
                            Close #fh2
                            n = n + 1
                            Exit Do
                        End If 'x1
                    End If '<>""
                Loop
                Close #fh
                macosx_libfind_failed:
                If n = 0 Then a$ = "Could not find sub/function '" + ResolveStaticFunction_Name(x) + "' in '" + ResolveStaticFunction_File(x) + "'": GoTo errmes
            End If

        End If
    Next

    If InStr(_OS$, "[MACOSX]") Then

        ffh = FreeFile
        Open tmpdir$ + "recompile_osx.command" For Output As #ffh
        Print #ffh, "cd " + CHR_QUOTE + "$(dirname " + CHR_QUOTE + "$0" + CHR_QUOTE + ")" + CHR_QUOTE + Chr$(10);
        Print #ffh, "echo " + CHR_QUOTE + "Recompiling..." + CHR_QUOTE + Chr$(10);
        Print #ffh, "cd ../c" + Chr$(10);
        Print #ffh, makeline$ + Chr$(10);
        Print #ffh, "read -p " + CHR_QUOTE + "Press ENTER to exit..." + CHR_QUOTE + Chr$(10);
        Close ffh
        Shell _Hide "chmod +x " + AddQuotes$(tmpdir$ + "recompile_osx.command")

        ffh = FreeFile
        Open tmpdir$ + "debug_osx.command" For Output As #ffh
        Print #ffh, "cd " + CHR_QUOTE + "$(dirname " + CHR_QUOTE + "$0" + CHR_QUOTE + ")" + CHR_QUOTE + Chr$(10);
        Print #ffh, "Pause()" + Chr$(10);
        Print #ffh, "{" + Chr$(10);
        Print #ffh, "OLDCONFIG=`stty -g`" + Chr$(10);
        Print #ffh, "stty -icanon -echo min 1 time 0" + Chr$(10);
        Print #ffh, "dd count=1 2>/dev/null" + Chr$(10);
        Print #ffh, "stty $OLDCONFIG" + Chr$(10);
        Print #ffh, "}" + Chr$(10);
        Print #ffh, "echo " + CHR_QUOTE + "C++ Debugging: " + file$ + extension$ + " using GDB" + CHR_QUOTE + Chr$(10);
        Print #ffh, "echo " + CHR_QUOTE + "Debugger commands:" + CHR_QUOTE + Chr$(10);
        Print #ffh, "echo " + CHR_QUOTE + "After the debugger launches type 'run' to start your program" + CHR_QUOTE + Chr$(10);
        Print #ffh, "echo " + CHR_QUOTE + "After your program crashes type 'list' to find where the problem is and fix/report it" + CHR_QUOTE + Chr$(10);
        Print #ffh, "echo " + CHR_QUOTE + "(the GDB debugger has many other useful commands, this advice is for beginners)" + CHR_QUOTE + Chr$(10);
        Print #ffh, "gdb " + Chr$(34) + path.exe$ + file$ + extension$ + Chr$(34) + Chr$(10);
        Print #ffh, "Pause" + Chr$(10);
        Close ffh
        Shell _Hide "chmod +x " + AddQuotes$(tmpdir$ + "debug_osx.command")

    Else

        ffh = FreeFile
        Open tmpdir$ + "recompile_lnx.sh" For Output As #ffh
        Print #ffh, "#!/bin/sh" + Chr$(10);
        Print #ffh, "Pause()" + Chr$(10);
        Print #ffh, "{" + Chr$(10);
        Print #ffh, "OLDCONFIG=`stty -g`" + Chr$(10);
        Print #ffh, "stty -icanon -echo min 1 time 0" + Chr$(10);
        Print #ffh, "dd count=1 2>/dev/null" + Chr$(10);
        Print #ffh, "stty $OLDCONFIG" + Chr$(10);
        Print #ffh, "}" + Chr$(10);
        Print #ffh, "echo " + CHR_QUOTE + "Recompiling..." + CHR_QUOTE + Chr$(10);
        Print #ffh, "cd ../c" + Chr$(10);
        Print #ffh, makeline$ + Chr$(10);
        Print #ffh, "echo " + CHR_QUOTE + "Press ENTER to exit..." + CHR_QUOTE + Chr$(10);
        Print #ffh, "Pause" + Chr$(10);
        Close ffh
        Shell _Hide "chmod +x " + AddQuotes$(tmpdir$ + "recompile_lnx.sh")

        ffh = FreeFile
        Open tmpdir$ + "debug_lnx.sh" For Output As #ffh
        Print #ffh, "#!/bin/sh" + Chr$(10);
        Print #ffh, "Pause()" + Chr$(10);
        Print #ffh, "{" + Chr$(10);
        Print #ffh, "OLDCONFIG=`stty -g`" + Chr$(10);
        Print #ffh, "stty -icanon -echo min 1 time 0" + Chr$(10);
        Print #ffh, "dd count=1 2>/dev/null" + Chr$(10);
        Print #ffh, "stty $OLDCONFIG" + Chr$(10);
        Print #ffh, "}" + Chr$(10);
        Print #ffh, "echo " + CHR_QUOTE + "C++ Debugging: " + file$ + extension$ + " using GDB" + CHR_QUOTE + Chr$(10);
        Print #ffh, "echo " + CHR_QUOTE + "Debugger commands:" + CHR_QUOTE + Chr$(10);
        Print #ffh, "echo " + CHR_QUOTE + "After the debugger launches type 'run' to start your program" + CHR_QUOTE + Chr$(10);
        Print #ffh, "echo " + CHR_QUOTE + "After your program crashes type 'list' to find where the problem is and fix/report it" + CHR_QUOTE + Chr$(10);
        Print #ffh, "echo " + CHR_QUOTE + "(the GDB debugger has many other useful commands, this advice is for beginners)" + CHR_QUOTE + Chr$(10);
        Print #ffh, "gdb " + Chr$(34) + path.exe$ + file$ + extension$ + Chr$(34) + Chr$(10);
        Print #ffh, "Pause" + Chr$(10);
        Close ffh
        Shell _Hide "chmod +x " + AddQuotes$(tmpdir$ + "debug_lnx.sh")

    End If

    If No_C_Compile_Mode = 0 Then
        Shell _Hide makeline$ + " 1>> " + compilelog$ + " 2>&1"
        If idemode Then
            'Restore fg/bg colors
            dummy = DarkenFGBG(0)
        End If
    End If

    If InStr(_OS$, "[MACOSX]") Then
        ff = FreeFile
        If path.exe$ = "./" Or path.exe$ = "../../" Or path.exe$ = "..\..\" Then path.exe$ = ""
        Open path.exe$ + file$ + extension$ + "_start.command" For Output As #ff
        Print #ff, "cd " + Chr$(34) + "$(dirname " + Chr$(34) + "$0" + Chr$(34) + ")" + Chr$(34);
        Print #ff, Chr$(10);
        Print #ff, "./" + file$ + extension$ + " &";
        Print #ff, Chr$(10);
        Print #ff, "osascript -e 'tell application " + Chr$(34) + "Terminal" + Chr$(34) + " to close (every window whose name contains " + Chr$(34) + file$ + extension$ + "_start.command" + Chr$(34) + ")' &";
        Print #ff, Chr$(10);
        Print #ff, "osascript -e 'if (count the windows of application " + Chr$(34) + "Terminal" + Chr$(34) + ") is 0 then tell application " + Chr$(34) + "Terminal" + Chr$(34) + " to quit' &";
        Print #ff, Chr$(10);
        Print #ff, "exit";
        Print #ff, Chr$(10);
        Close #ff
        Shell _Hide "chmod +x " + AddQuotes$(path.exe$ + file$ + extension$ + "_start.command")
    End If

End If

If No_C_Compile_Mode Then compfailed = 0: GoTo No_C_Compile
If path.exe$ = "../../" Or path.exe$ = "..\..\" Then path.exe$ = ""
If _FileExists(path.exe$ + file$ + extension$) Then
    compfailed = 0
    lastBinaryGenerated$ = path.exe$ + file$ + extension$
Else
    compfailed = 1 'detect compilation failure
End If

If compfailed Then
    If idemode Then
        idemessage$ = "C++ Compilation failed " + Chr$(0) + "(Check " + _Trim$(compilelog$) + ")"
        GoTo ideerror
    End If
    If compfailed Then
        Print "ERROR: C++ compilation failed."
        Print "Check " + compilelog$ + " for details."
    End If
Else
    If idemode = 0 And Not QuietMode Then Print "Output: "; lastBinaryGenerated$
End If

Skip_Build:



If idemode Then GoTo ideret6

No_C_Compile:

If (compfailed <> 0 Or warningsissued <> 0) And ConsoleMode = 0 Then End 1
If compfailed <> 0 Then System 1
System 0

qberror_test:
E = 1
Resume Next

qberror:
'_CONSOLE ON
'_ECHO "A QB error has occurred (and you have compiled in debugging support)."
'_ECHO "Some key information (qb64pe.bas):"
'_ECHO "Error" + STR$(ERR)
'_ECHO "Description: " + _ERRORMESSAGE$
'_ECHO "Line" + STR$(_ERRORLINE)
'IF _INCLERRORLINE THEN
'    _ECHO "Included line" + STR$(_INCLERRORLINE)
'    _ECHO "Included file " + _INCLERRORFILE$
'END IF
'_ECHO ""
'_ECHO "Loaded source file details:"
'_ECHO "ideerror =" + STR$(ideerror) + "; qberrorhappened =" + STR$(qberrorhappened) + "; qberrorhappenedvalue =" + STR$(qberrorhappenedvalue) + "; linenumber =" + STR$(linenumber)
'_ECHO "ca$ = {" + ca$ + "}, idecommand$ = {" + idecommand$ + "}"
'_ECHO "linefragment = {" + linefragment+ "}"

If Debug Then 'A more in-your-face error handler
    If ConsoleMode Then
        Print
    Else
        _AutoDisplay
        Screen _NewImage(80, 25, 0), , 0, 0
        Color 7, 0
    End If
    _ControlChr Off
    Print "A QB error has occurred (and you have compiled in debugging support)."
    Print "Some key information (qb64pe.bas):"
    Print "Error"; Err
    Print "Description: "; _ErrorMessage$
    Print "Line"; _ErrorLine
    If _InclErrorLine Then
        Print "Included line"; _InclErrorLine
        Print "Included file "; _InclErrorFile$
    End If
    Print
    Print "Loaded source file details:"
    Print "ideerror ="; ideerror; "qberrorhappened ="; qberrorhappened; "qberrorhappenedvalue ="; qberrorhappenedvalue; "linenumber ="; linenumber
    Print "ca$ = {"; ca$; "}, idecommand$ = {"; idecommand$; "}"
    Print "linefragment = {"; linefragment; "}"
    End
End If

If ideerror Then 'error happened inside the IDE
    fh = FreeFile
    Open "internal\temp\ideerror.txt" For Append As #fh
    Print #fh, Date$; Time$; "--------------------"
    Print #fh, Err
    Print #fh, _ErrorMessage$
    Print #fh, _ErrorLine
    Print #fh, _InclErrorLine
    Print #fh, _InclErrorFile$
    Close #fh
    sendc$ = Chr$(255) 'a runtime error has occurred
    Resume sendcommand 'allow IDE to handle error recovery
End If

qberrorhappenedvalue = qberrorhappened
qberrorhappened = 1

If Debug Then Print #9, "QB ERROR!"
If Debug Then Print #9, "ERR="; Err
If Debug Then Print #9, "ERL="; Erl

If idemode And qberrorhappenedvalue >= 0 Then
    'real qb error occurred
    ideerrorline = linenumber
    idemessage$ = "Compiler error (check for syntax errors) (" + _ErrorMessage$ + ":"
    If Err Then idemessage$ = idemessage$ + str2$(Err) + "-"
    If _ErrorLine Then idemessage$ = idemessage$ + str2$(_ErrorLine)
    If _InclErrorLine Then idemessage$ = idemessage$ + "-" + _InclErrorFile$ + "-" + str2$(_InclErrorLine)
    idemessage$ = idemessage$ + ")"
    If inclevel > 0 Then idemessage$ = idemessage$ + incerror$
    Resume ideerror
End If

If qberrorhappenedvalue >= 0 Then
    a$ = "UNEXPECTED INTERNAL COMPILER ERROR!": GoTo errmes 'internal comiler error
End If


qberrorcode = Err
qberrorline = Erl
If qberrorhappenedvalue = -1 Then Resume qberrorhappened1
If qberrorhappenedvalue = -2 Then Resume qberrorhappened2
If qberrorhappenedvalue = -3 Then Resume qberrorhappened3
End

errmes: 'set a$ to message
If Error_Happened Then a$ = Error_Message: Error_Happened = 0
layout$ = "": layoutok = 0 'invalidate layout

If forceIncludingFile Then 'If we're to the point where we're adding the automatic QB64 includes, we don't need to report the $INCLUDE information
    If InStr(a$, "END SUB/FUNCTION before") Then a$ = "SUB without END SUB" 'Just a simple rewrite of the error message to be less confusing for SUB/FUNCTIONs
Else 'We want to let the user know which module the error occurred in
    If inclevel > 0 Then a$ = a$ + incerror$
End If

If idemode Then
    ideerrorline = linenumber
    idemessage$ = a$
    GoTo ideerror 'infinitely preferable to RESUME
End If
'non-ide mode output
Print
If Not MonochromeLoggingMode Then
    If InStr(_OS$, "WIN") Then
        Color 4
    Else
        Color 9
    End If
End If
Print a$
If Not MonochromeLoggingMode Then Color 7
For i = 1 To Len(linefragment)
    If Mid$(linefragment, i, 1) = sp$ Then Mid$(linefragment, i, 1) = " "
Next
For i = 1 To Len(wholeline)
    If Mid$(wholeline, i, 1) = sp$ Then Mid$(wholeline, i, 1) = " "
Next
Print "Caused by (or after):" + linefragment
If Not MonochromeLoggingMode Then Color 8
Print "LINE ";
If Not MonochromeLoggingMode Then Color 15
Print str2(linenumber) + ":";
If Not MonochromeLoggingMode Then Color 7
Print wholeline

If ConsoleMode Then System 1
End 1

Function ParseCMDLineArgs$ ()
    'Recall that COMMAND$ is a concatenation of argv[] elements, so we don't have
    'to worry about more than one space between things (unless they used quotes,
    'in which case they're simply asking for trouble).
    For i = 1 To _CommandCount
        token$ = Command$(i)
        If LCase$(token$) = "/?" Or LCase$(token$) = "--help" Or LCase$(token$) = "/help" Then token$ = "-?"
        Select Case LCase$(Left$(token$, 2))
            Case "-?" 'Command-line help
                _Dest _Console
                If qb64versionprinted = 0 Then qb64versionprinted = -1: Print "QB64-PE Compiler V" + Version$
                Print
                Print "Usage: qb64pe [switches] <file>"
                Print
                Print "Options:"
                Print "  <file>                  Source file to load" '                                '80 columns
                Print "  -v                      Print version"
                Print "  -c                      Compile instead of edit"
                Print "  -o <output file>        Write output executable to <output file>"
                Print "  -x                      Compile instead of edit and output the result to the"
                Print "                             console"
                Print "  -w                      Show warnings"
                Print "  -q                      Quiet mode (does not inhibit warnings or errors)"
                Print "  -m                      Do not colorize compiler output (monochrome mode)"
                Print "  -e                      Enable OPTION _EXPLICIT, making variable declaration"
                Print "                             mandatory (per-compilation; doesn't affect the"
                Print "                             source file or global settings)"
                Print "  -s[:switch=true/false]  View/edit compiler settings"
                Print "  -l:<line number>        Start the IDE at the specified line number"
                Print "  -p                      Purge all pre-compiled content first"
                Print "  -z                      Generate C code without compiling to executable"
                Print "  -f[:setting=value]      compiler settings to use"
                Print
                System

            Case "-v" ' Print version
                _Dest _Console
                If qb64versionprinted = 0 Then qb64versionprinted = -1: Print "QB64-PE Compiler V" + Version$
                System

            Case "-u" 'Invoke "Update all pages" to populate internal/help files (hidden build option)
                Help_Recaching = 2: Help_IgnoreCache = 1
                If ideupdatehelpbox Then
                    _Dest _Console
                    Print "Update failed: curl not found"
                    System 1
                End If
                System
            Case "-c" 'Compile instead of edit
                NoIDEMode = 1
                cmdlineswitch = -1
            Case "-o" 'Specify an output file
                If Len(Command$(i + 1)) > 0 Then outputfile_cmd$ = Command$(i + 1): i = i + 1
                cmdlineswitch = -1
            Case "-x" 'Use the console
                ConsoleMode = 1
                NoIDEMode = 1 'Implies -c
                cmdlineswitch = -1
            Case "-w" 'Show warnings
                ShowWarnings = -1
                cmdlineswitch = -1
            Case "-q" 'Quiet mode
                QuietMode = -1
                cmdlineswitch = -1
            Case "-m" 'Monochrome mode
                MonochromeLoggingMode = -1
                cmdlineswitch = -1
            Case "-e" 'Option Explicit
                optionexplicit_cmd = -1
                cmdlineswitch = -1
            Case "-s" 'Settings
                settingsMode = -1
                _Dest _Console
                If qb64versionprinted = 0 Then qb64versionprinted = -1: Print "QB64-PE Compiler V" + Version$
                Select Case LCase$(Mid$(token$, 3))
                    Case ""
                        Print "debuginfo     = ";
                        If idedebuginfo Then Print "true" Else Print "false"
                        Print "exewithsource = ";
                        If SaveExeWithSource Then Print "true" Else Print "false"
                        System
                    Case ":exewithsource"
                        Print "exewithsource = ";
                        If SaveExeWithSource Then Print "true" Else Print "false"
                        System
                    Case ":exewithsource=true"
                        WriteConfigSetting generalSettingsSection$, "SaveExeWithSource", "True"
                        Print "exewithsource = true"
                        SaveExeWithSource = -1
                    Case ":exewithsource=false"
                        WriteConfigSetting generalSettingsSection$, "SaveExeWithSource", "False"
                        Print "exewithsource = false"
                        SaveExeWithSource = 0
                    Case ":debuginfo"
                        Print "debuginfo = ";
                        If idedebuginfo Then Print "true" Else Print "false"
                        System
                    Case ":debuginfo=true"
                        Print "debuginfo = true"
                        WriteConfigSetting generalSettingsSection$, "DebugInfo", "True" + DebugInfoIniWarning$
                        idedebuginfo = -1
                        Include_GDB_Debugging_Info = idedebuginfo
                        PurgeTemporaryBuildFiles (os$), (MacOSX)
                    Case ":debuginfo=false"
                        Print "debuginfo = false"
                        WriteConfigSetting generalSettingsSection$, "DebugInfo", "False" + DebugInfoIniWarning$
                        idedebuginfo = 0
                        Include_GDB_Debugging_Info = idedebuginfo
                        PurgeTemporaryBuildFiles (os$), (MacOSX)
                    Case Else
                        Print "Invalid settings switch: "; token$
                        Print
                        Print "Valid switches:"
                        Print "    -s:debuginfo=true/false     (Embed C++ debug info into .EXE)"
                        Print "    -s:exewithsource=true/false (Save .EXE in the source folder)"
                        System 1
                End Select
                _Dest 0
            Case "-l" 'goto line (ide mode only); -l:<line number>
                If Mid$(token$, 3, 1) = ":" Then ideStartAtLine = Val(Mid$(token$, 4))
                cmdlineswitch = -1
            Case "-p" 'Purge
                PurgeTemporaryBuildFiles (os$), (MacOSX)
                cmdlineswitch = -1
            Case "-z" 'Not compiling C code
                No_C_Compile_Mode = 1
                ConsoleMode = 1 'Implies -x
                NoIDEMode = 1 'Implies -c
                cmdlineswitch = -1

            Case "-f" 'temporary setting
                token$ = Mid$(token$, 3)

                Select Case LCase$(Left$(token$, InStr(token$, "=") - 1))
                    Case ":useminiaudio"
                        If Not ParseBooleanSetting&(token$, UseMiniaudioBackend) Then PrintTemporarySettingsHelpAndExit InvalidSettingError$(token$)

                    Case ":optimizecppprogram"
                        If Not ParseBooleanSetting&(token$, OptimizeCppProgram) Then PrintTemporarySettingsHelpAndExit InvalidSettingError$(token$)

                    Case ":stripdebugsymbols"
                        If Not ParseBooleanSetting&(token$, StripDebugSymbols) Then PrintTemporarySettingsHelpAndExit InvalidSettingError$(token$)

                    Case ":extracppflags"
                        If Not ParseStringSetting&(token$, ExtraCppFlags) Then PrintTemporarySettingsHelpAndExit InvalidSettingError$(token$)

                    Case ":extralinkerflags"
                        If Not ParseStringSetting&(token$, ExtraLinkerFlags) Then PrintTemporarySettingsHelpAndExit InvalidSettingError$(token$)

                    Case ":maxcompilerprocesses"
                        If Not ParseLongSetting&(token$, MaxParallelProcesses) Then PrintTemporarySettingsHelpAndExit InvalidSettingError$(token$)
                        If MaxParallelProcesses = 0 Then PrintTemporarySettingsHelpAndExit "MaxCompilerProcesses must be more than zero"

                    Case ":generatelicensefile"
                        If Not ParseBooleanSetting&(token$, GenerateLicenseFile) Then PrintTemporarySettingsHelpAndExit InvalidSettingError$(token$)

                    Case Else
                        PrintTemporarySettingsHelpAndExit ""
                End Select

            Case Else 'Something we don't recognise, assume it's a filename
                If PassedFileName$ = "" Then PassedFileName$ = token$
        End Select
    Next i

    If Len(PassedFileName$) Then
        ParseCMDLineArgs$ = PassedFileName$
    Else
        If cmdlineswitch = 0 And settingsMode = -1 Then System
    End If
End Function

Function InvalidSettingError$ (token$)
    InvalidSettingError$ = "Invalid temporary setting switch: " + AddQuotes$(token$)
End Function

Sub PrintTemporarySettingsHelpAndExit (errstr$)
    _Dest _Console

    Print "QB64-PE Compiler V" + Version$

    If errstr$ <> "" Then
        Print "Error: "; errstr$
    End If

    Print
    Print "Note: Defaults can be changed by IDE settings"
    Print
    Print "Valid settings:"
    Print "    -f:UseMiniAudio=[true|false]         (Use Miniaudio Audio backend, default true)"
    Print "    -f:OptimizeCppProgram=[true|false]   (Use C++ Optimization flag, default false)"
    Print "    -f:StripDebugSymbols=[true|false]    (Stirp C++ debug symbols, default true)"
    Print "    -f:ExtraCppFlags=[string]            (Extra flags to pass to the C++ compiler)"
    Print "    -f:ExtraLinkerFlags=[string]         (Extra flags to pass at link time)"
    Print "    -f:MaxCompilerProcesses=[integer]    (Max C++ compiler processes to start in parallel)"
    Print "    -f:GenerateLicenseFile=[true|false]  (Produce a license.txt file for the program)"

    System
End Sub

Function ParseBooleanSetting& (token$, setting As _Unsigned Long)
    Dim equals As Long
    Dim value As String

    equals = InStr(token$, "=")
    If equals = -1 Then ParseBooleanSetting& = 0: Exit Function

    value = LCase$(Mid$(token$, equals + 1))

    Select Case value
        Case "true", "on", "yes"
            setting = -1
            ParseBooleanSetting& = -1

        Case "false", "off", "no"
            setting = 0
            ParseBooleanSetting& = -1

        Case Else
            ParseBooleanSetting& = 0
    End Select
End Function

Function ParseLongSetting& (token$, setting As _Unsigned Long)
    Dim equals As Long

    equals = InStr(token$, "=")
    If equals = -1 Then ParseLongSetting& = 0: Exit Function

    setting = Val(Mid$(token$, equals + 1))

    ParseLongSetting& = -1
End Function

Function ParseStringSetting& (token$, setting As String)
    Dim equals As Long

    equals = InStr(token$, "=")
    If equals = -1 Then ParseStringSetting& = 0: Exit Function

    setting = Mid$(token$, equals + 1)

    ParseStringSetting& = -1
End Function

Function Type2MemTypeValue (t1)
    t = 0
    If t1 And ISARRAY Then t = t + 65536
    If t1 And ISUDT Then
        If (t1 And 511) = 1 Then
            t = t + 4096 '_MEM type
        Else
            t = t + 32768
        End If
    Else
        If t1 And ISSTRING Then
            t = t + 512 'string
        Else
            If t1 And ISFLOAT Then
                t = t + 256 'float
            Else
                t = t + 128 'integer
                If t1 And ISUNSIGNED Then t = t + 1024
                If t1 And ISOFFSET Then t = t + 8192 'offset type
            End If
            t1s = (t1 And 511) \ 8
            If t1s = 1 Then t = t + t1s
            If t1s = 2 Then t = t + t1s
            If t1s = 4 Then t = t + t1s
            If t1s = 8 Then t = t + t1s
            If t1s = 16 Then t = t + t1s
            If t1s = 32 Then t = t + t1s
            If t1s = 64 Then t = t + t1s
        End If
    End If
    Type2MemTypeValue = t
End Function

'udt is non-zero if this is an array of udt's, to allow examining each udt element
Function allocarray (n2$, elements$, elementsize, udt)
    dimsharedlast = dimshared: dimshared = 0

    If autoarray = 1 Then autoarray = 0: autoary = 1 'clear global value & set local value

    f12$ = ""

    'changelog:
    'added 4 to [2] to indicate cmem array where appropriate

    e$ = elements$: n$ = n2$
    If elementsize = -2147483647 Then stringarray = 1: elementsize = 8

    If Asc(e$) = 63 Then '?
        l$ = "(" + sp2 + ")"
        undefined = -1
        nume = 1
        If Len(e$) = 1 Then GoTo undefinedarray
        undefined = 1
        nume = Val(Right$(e$, Len(e$) - 1))
        GoTo undefinedarray
    End If


    'work out how many elements there are (critical to later calculations)
    nume = 1
    n = numelements(e$)
    For i = 1 To n
        e2$ = getelement(e$, i)
        If e2$ = "(" Then b = b + 1
        If b = 0 And e2$ = "," Then nume = nume + 1
        If e2$ = ")" Then b = b - 1
    Next
    If Debug Then Print #9, "numelements count:"; nume

    descstatic = 0
    If arraydesc Then
        If id.arrayelements <> nume Then

            If id.arrayelements = -1 Then 'unknown
                If arrayelementslist(currentid) <> 0 And nume <> arrayelementslist(currentid) Then Give_Error "Cannot change the number of elements an array has!": Exit Function
                If nume = 1 Then id.arrayelements = 1: ids(currentid).arrayelements = 1 'lucky guess!
                arrayelementslist(currentid) = nume
            Else
                Give_Error "Cannot change the number of elements an array has!": Exit Function
            End If

        End If
        If id.staticarray Then descstatic = 1
    End If

    l$ = "(" + sp2

    cr$ = Chr$(13) + Chr$(10)
    sd$ = ""
    constdimensions = 1
    ei = 4 + nume * 4 - 4
    cure = 1
    e3$ = "": e3base$ = ""
    For i = 1 To n
        e2$ = getelement(e$, i)
        If e2$ = "(" Then b = b + 1
        If (e2$ = "," And b = 0) Or i = n Then
            If i = n Then e3$ = e3$ + sp + e2$
            e3$ = Right$(e3$, Len(e3$) - 1)
            If e3base$ <> "" Then e3base$ = Right$(e3base$, Len(e3base$) - 1)
            'PRINT e3base$ + "[TO]" + e3$
            'set the base

            basegiven = 1
            If e3base$ = "" Then e3base$ = str2$(optionbase + 0): basegiven = 0
            constequation = 1

            e3base$ = fixoperationorder$(e3base$)
            If Error_Happened Then Exit Function
            If basegiven Then l$ = l$ + tlayout$ + sp + SCase$("To") + sp
            e3base$ = evaluatetotyp$(e3base$, 64&)
            If Error_Happened Then Exit Function

            If constequation = 0 Then constdimensions = 0
            sd$ = sd$ + n$ + "[" + str2(ei) + "]=" + e3base$ + ";" + cr$
            'set the number of indexes
            constequation = 1

            e3$ = fixoperationorder$(e3$)
            If Error_Happened Then Exit Function
            l$ = l$ + tlayout$ + sp2
            If i = n Then l$ = l$ + ")" Else l$ = l$ + "," + sp
            e3$ = evaluatetotyp$(e3$, 64&)
            If Error_Happened Then Exit Function

            If constequation = 0 Then constdimensions = 0
            ei = ei + 1
            sd$ = sd$ + n$ + "[" + str2(ei) + "]=(" + e3$ + ")-" + n$ + "[" + str2(ei - 1) + "]+1;" + cr$
            ei = ei + 1
            'calc muliplier
            If cure = 1 Then
                'set only for the purpose of the calculating correct multipliers
                sd$ = sd$ + n$ + "[" + str2(ei) + "]=1;" + cr$
            Else
                sd$ = sd$ + n$ + "[" + str2(ei) + "]=" + n$ + "[" + str2(ei + 4) + "]*" + n$ + "[" + str2(ei + 3) + "];" + cr$
            End If
            ei = ei + 1
            ei = ei + 1 'skip reserved
            ei = ei - 8
            cure = cure + 1
            e3$ = "": e3base$ = ""
            GoTo aanexte
        End If
        If e2$ = ")" Then b = b - 1
        If UCase$(e2$) = "TO" And b = 0 Then
            e3base$ = e3$
            e3$ = ""
        Else
            e3$ = e3$ + sp + e2$
        End If
        aanexte:
    Next
    sd$ = Left$(sd$, Len(sd$) - 2)

    undefinedarray:

    'calc cmem
    cmem = 0
    If arraydesc = 0 Then
        If cmemlist(idn + 1) Then cmem = 1
    Else
        If cmemlist(arraydesc) Then cmem = 1
    End If

    staticarray = constdimensions
    If subfuncn <> 0 And dimstatic = 0 Then staticarray = 0 'arrays in SUBS/FUNCTIONS are DYNAMIC
    If dimstatic = 3 Then staticarray = 0 'STATIC arrayname() listed arrays keep thier values but are dynamic in memory
    If DynamicMode Then staticarray = 0
    If redimoption Then staticarray = 0
    If dimoption = 3 Then staticarray = 0 'STATIC a(100) arrays are still dynamic

    If arraydesc Then
        If staticarray = 1 Then
            If descstatic Then Give_Error "Cannot redefine a static array!": Exit Function
            staticarray = 0
        End If
    End If






    bytesperelement$ = str2(elementsize)
    If elementsize < 0 Then
        elementsize = -elementsize
        bytesperelement$ = str2(elementsize) + "/8+1"
    End If


    'Begin creation of array descriptor (if array has not been defined yet)
    If arraydesc = 0 Then
        WriteBufLine defdatahandle, "ptrszint *" + n$ + "=NULL;"
        WriteBufLine DataTxtBuf, "if (!" + n$ + "){"
        WriteBufLine DataTxtBuf, n$ + "=(ptrszint*)mem_static_malloc(" + str2(4 * nume + 4 + 1) + "*ptrsz);" '+1 is for the lock
        'create _MEM lock
        WriteBufLine DataTxtBuf, "new_mem_lock();"
        WriteBufLine DataTxtBuf, "mem_lock_tmp->type=4;"
        WriteBufLine DataTxtBuf, "((ptrszint*)" + n$ + ")[" + str2(4 * nume + 4 + 1 - 1) + "]=(ptrszint)mem_lock_tmp;"
    End If

    'generate sizestr$ & elesizestr$ (both are used in various places in following code)
    sizestr$ = ""
    For i = 1 To nume
        If i <> 1 Then sizestr$ = sizestr$ + "*"
        sizestr$ = sizestr$ + n$ + "[" + str2(i * 4 - 4 + 5) + "]"
    Next
    elesizestr$ = sizestr$ 'elements in entire array
    sizestr$ = sizestr$ + "*" + bytesperelement$ 'bytes in entire array



    '------------------STATIC ARRAY CREATION--------------------------------
    If staticarray Then
        'STATIC memory
        WriteBufLine DataTxtBuf, sd$ 'setup new array dimension ranges
        'Example of sd$ for DIM a(10):
        '__ARRAY_SINGLE_A[4]= 0 ;
        '__ARRAY_SINGLE_A[5]=( 10 )-__ARRAY_SINGLE_A[4]+1;
        '__ARRAY_SINGLE_A[6]=1;
        If cmem And stringarray = 0 Then
            'Note: A string array's pointers are always stored in 64bit memory
            '(static)CONVENTINAL memory
            WriteBufLine DataTxtBuf, n$ + "[0]=(ptrszint)cmem_static_pointer;"
            'alloc mem & check if static memory boundry has oversteped dynamic memory boundry
            WriteBufLine DataTxtBuf, "if ((cmem_static_pointer+=((" + sizestr$ + ")+15)&-16)>cmem_dynamic_base) error(257);"
            '64K check
            WriteBufLine DataTxtBuf, "if ((" + sizestr$ + ")>65536) error(257);"
            'clear array
            WriteBufLine DataTxtBuf, "memset((void*)(" + n$ + "[0]),0," + sizestr$ + ");"
            'set flags
            WriteBufLine DataTxtBuf, n$ + "[2]=1+2+4;" 'init+static+cmem
        Else
            '64BIT MEMORY
            WriteBufLine DataTxtBuf, n$ + "[0]=(ptrszint)mem_static_malloc(" + sizestr$ + ");"
            If stringarray Then
                'Init string pointers in the array
                WriteBufLine DataTxtBuf, "tmp_long=" + elesizestr$ + ";"
                WriteBufLine DataTxtBuf, "while(tmp_long--){"
                If cmem Then
                    WriteBufLine DataTxtBuf, "((uint64*)(" + n$ + "[0]))[tmp_long]=(uint64)qbs_new_cmem(0,0);"
                Else
                    WriteBufLine DataTxtBuf, "((uint64*)(" + n$ + "[0]))[tmp_long]=(uint64)qbs_new(0,0);"
                End If
                WriteBufLine DataTxtBuf, "}"
            Else
                'clear array
                WriteBufLine DataTxtBuf, "memset((void*)(" + n$ + "[0]),0," + sizestr$ + ");"
            End If
            WriteBufLine DataTxtBuf, n$ + "[2]=1+2;" 'init+static
        End If

        If udt > 0 And udtxvariable(udt) Then
            WriteBufLine DataTxtBuf, "tmp_long=" + elesizestr$ + ";"
            WriteBufLine DataTxtBuf, "while(tmp_long--){"
            initialise_array_udt_varstrings n$, udt, 0, bytesperelement$, acc$
            WriteBufLine DataTxtBuf, acc$
            WriteBufLine DataTxtBuf, "}"
        End If

        'Close static array desc
        WriteBufLine DataTxtBuf, "}"
        allocarray = nume + 65536
    End If
    '------------------END OF STATIC ARRAY CREATION-------------------------

    '------------------DYNAMIC ARRAY CREATION-------------------------------
    If staticarray = 0 Then

        If undefined = 0 Then



            'Generate error if array is static
            f12$ = f12$ + CRLF + "if (" + n$ + "[2]&2){" 'static array
            f12$ = f12$ + CRLF + "error(10);" 'cannot redefine a static array!
            f12$ = f12$ + CRLF + "}else{"
            'Note: Array is either undefined or dynamically defined at this point


            'REDIM (not DIM) must be used to redefine an array
            If redimoption = 0 Then
                f12$ = f12$ + CRLF + "if (" + n$ + "[2]&1){" 'array is defined
                f12$ = f12$ + CRLF + "if (!error_occurred) error(10);" 'cannot redefine an array without using REDIM!
                f12$ = f12$ + CRLF + "}else{"
            Else
                '--------ERASE EXISTING ARRAY IF NECESSARY--------

                'IMPORTANT: If array is not going to be preserved, it should be cleared before
                '           creating the new array for memory considerations

                'refresh lock ID (_MEM)
                f12$ = f12$ + CRLF + "((mem_lock*)((ptrszint*)" + n$ + ")[" + str2(4 * nume + 4 + 1 - 1) + "])->id=(++mem_lock_id);"

                If redimoption = 2 Then
                    f12$ = f12$ + CRLF + "static int32 preserved_elements;" 'must be put here for scope considerations
                End If

                'If array is defined, it must be destroyed first
                f12$ = f12$ + CRLF + "if (" + n$ + "[2]&1){" 'array is defined

                If redimoption = 2 Then
                    f12$ = f12$ + CRLF + "preserved_elements=" + elesizestr$ + ";"
                    GoTo skiperase
                End If

                'Note: pointers to strings must be freed before array can be freed
                If stringarray Then
                    f12$ = f12$ + CRLF + "tmp_long=" + elesizestr$ + ";"
                    f12$ = f12$ + CRLF + "while(tmp_long--) qbs_free((qbs*)((uint64*)(" + n$ + "[0]))[tmp_long]);"
                End If
                'As must any variable length strings in UDT's
                If udt > 0 And udtxvariable(udt) Then
                    f12$ = f12$ + CRLF + "tmp_long=" + elesizestr$ + ";"
                    f12$ = f12$ + CRLF + "while(tmp_long--) {"
                    free_array_udt_varstrings n$, udt, 0, bytesperelement$, acc$
                    f12$ = f12$ + acc$ + "}"
                End If

                'Free array's memory
                If stringarray Then
                    'Note: String arrays are never in cmem
                    f12$ = f12$ + CRLF + "free((void*)(" + n$ + "[0]));"
                Else
                    'Note: Array may be in cmem!
                    f12$ = f12$ + CRLF + "if (" + n$ + "[2]&4){" 'array is in cmem
                    f12$ = f12$ + CRLF + "cmem_dynamic_free((uint8*)(" + n$ + "[0]));"
                    f12$ = f12$ + CRLF + "}else{" 'not in cmem
                    f12$ = f12$ + CRLF + "free((void*)(" + n$ + "[0]));"
                    f12$ = f12$ + CRLF + "}"
                End If

                skiperase:

                f12$ = f12$ + CRLF + "}" 'array was defined
                If redimoption = 2 Then
                    f12$ = f12$ + CRLF + "else preserved_elements=0;" 'if array wasn't defined, no elements are preserved
                End If


                '--------ERASED ARRAY AS NECESSARY--------
            End If 'redim specified


            '--------CREATE ARRAY & CLEAN-UP CODE--------
            'Overwrite existing array dimension sizes/ranges
            f12$ = f12$ + CRLF + sd$
            If stringarray Or ((udt > 0) And udtxvariable(udt)) Then

                'Note: String and variable-length udt arrays are always created in 64bit memory

                If redimoption = 2 Then
                    f12$ = f12$ + CRLF + "if (preserved_elements){"

                    f12$ = f12$ + CRLF + "static ptrszint tmp_long2;"

                    'free any qbs strings which will be lost in the realloc
                    f12$ = f12$ + CRLF + "tmp_long2=" + elesizestr$ + ";"
                    f12$ = f12$ + CRLF + "if (tmp_long2<preserved_elements){"
                    f12$ = f12$ + CRLF + "for(tmp_long=tmp_long2;tmp_long<preserved_elements;tmp_long++) {"
                    If stringarray Then
                        f12$ = f12$ + CRLF + "qbs_free((qbs*)((uint64*)(" + n$ + "[0]))[tmp_long]);"
                    Else
                        acc$ = ""
                        free_array_udt_varstrings n$, udt, 0, bytesperelement$, acc$
                        f12$ = f12$ + acc$
                    End If
                    f12$ = f12$ + CRLF + "}}"
                    'reallocate the array
                    f12$ = f12$ + CRLF + n$ + "[0]=(ptrszint)realloc((void*)(" + n$ + "[0]),tmp_long2*" + bytesperelement$ + ");"
                    f12$ = f12$ + CRLF + "if (!" + n$ + "[0]) error(257);" 'not enough memory
                    f12$ = f12$ + CRLF + "if (preserved_elements<tmp_long2){"
                    f12$ = f12$ + CRLF + "for(tmp_long=preserved_elements;tmp_long<tmp_long2;tmp_long++){"
                    If stringarray Then
                        f12$ = f12$ + CRLF + "if (" + n$ + "[2]&4){" 'array is in cmem
                        f12$ = f12$ + CRLF + "((uint64*)(" + n$ + "[0]))[tmp_long]=(uint64)qbs_new_cmem(0,0);"
                        f12$ = f12$ + CRLF + "}else{" 'not in cmem
                        f12$ = f12$ + CRLF + "((uint64*)(" + n$ + "[0]))[tmp_long]=(uint64)qbs_new(0,0);"
                        f12$ = f12$ + CRLF + "}" 'not in cmem
                    Else
                        acc$ = ""
                        initialise_array_udt_varstrings n$, udt, 0, bytesperelement$, acc$
                        f12$ = f12$ + acc$
                    End If
                    f12$ = f12$ + CRLF + "}"
                    f12$ = f12$ + CRLF + "}"

                    f12$ = f12$ + CRLF + "}else{"
                End If

                '1. Create array
                f12$ = f12$ + CRLF + n$ + "[0]=(ptrszint)malloc(" + sizestr$ + ");"
                f12$ = f12$ + CRLF + "if (!" + n$ + "[0]) error(257);" 'not enough memory
                f12$ = f12$ + CRLF + n$ + "[2]|=1;" 'ADD initialized flag
                f12$ = f12$ + CRLF + "tmp_long=" + elesizestr$ + ";"


                'init individual strings
                If stringarray Then
                    f12$ = f12$ + CRLF + "if (" + n$ + "[2]&4){" 'array is in cmem
                    f12$ = f12$ + CRLF + "while(tmp_long--) ((uint64*)(" + n$ + "[0]))[tmp_long]=(uint64)qbs_new_cmem(0,0);"
                    f12$ = f12$ + CRLF + "}else{" 'not in cmem
                    f12$ = f12$ + CRLF + "while(tmp_long--) ((uint64*)(" + n$ + "[0]))[tmp_long]=(uint64)qbs_new(0,0);"
                    f12$ = f12$ + CRLF + "}" 'not in cmem
                Else 'initialise udt's
                    f12$ = f12$ + CRLF + "while(tmp_long--){"
                    acc$ = ""
                    initialise_array_udt_varstrings n$, udt, 0, bytesperelement$, acc$
                    f12$ = f12$ + acc$ + "}"
                End If

                If redimoption = 2 Then
                    f12$ = f12$ + CRLF + "}"
                End If


                '2. Generate "clean up" code (called when EXITING A SUB/FUNCTION)
                If arraydesc = 0 Then 'only add for first declaration of the array
                    WriteBufLine FreeTxtBuf, "if (" + n$ + "[2]&1){" 'initialized?
                    WriteBufLine FreeTxtBuf, "tmp_long=" + elesizestr$ + ";"
                    If udt > 0 And udtxvariable(udt) Then
                        WriteBufLine FreeTxtBuf, "while(tmp_long--) {"
                        acc$ = ""
                        free_array_udt_varstrings n$, udt, 0, bytesperelement$, acc$
                        WriteBufLine FreeTxtBuf, acc$ + "}"
                    Else
                        WriteBufLine FreeTxtBuf, "while(tmp_long--) qbs_free((qbs*)((uint64*)(" + n$ + "[0]))[tmp_long]);"
                    End If
                    WriteBufLine FreeTxtBuf, "free((void*)(" + n$ + "[0]));"
                    WriteBufLine FreeTxtBuf, "}"
                    'free lock (_MEM)
                    WriteBufLine FreeTxtBuf, "free_mem_lock( (mem_lock*)((ptrszint*)" + n$ + ")[" + str2(4 * nume + 4 + 1 - 1) + "] );"
                End If


            Else 'not string/var-udt array

                '1. Create array
                f12$ = f12$ + CRLF + "if (" + n$ + "[2]&4){" 'array will be in cmem

                If redimoption = 2 Then
                    f12$ = f12$ + CRLF + "if (preserved_elements){"

                    'reallocation method
                    'backup data
                    f12$ = f12$ + CRLF + "memcpy(redim_preserve_cmem_buffer,(void*)(" + n$ + "[0]),preserved_elements*" + bytesperelement$ + ");"
                    'free old array
                    f12$ = f12$ + CRLF + "cmem_dynamic_free((uint8*)(" + n$ + "[0]));"
                    f12$ = f12$ + CRLF + "tmp_long=" + elesizestr$ + ";"
                    f12$ = f12$ + CRLF + n$ + "[0]=(ptrszint)cmem_dynamic_malloc(tmp_long*" + bytesperelement$ + ");"
                    f12$ = f12$ + CRLF + "memcpy((void*)(" + n$ + "[0]),redim_preserve_cmem_buffer,preserved_elements*" + bytesperelement$ + ");"
                    f12$ = f12$ + CRLF + "if (preserved_elements<tmp_long) ZeroMemory(((uint8*)(" + n$ + "[0]))+preserved_elements*" + bytesperelement$ + ",(tmp_long*" + bytesperelement$ + ")-(preserved_elements*" + bytesperelement$ + "));"

                    f12$ = f12$ + CRLF + "}else{"
                End If

                'standard cmem method
                f12$ = f12$ + CRLF + n$ + "[0]=(ptrszint)cmem_dynamic_malloc(" + sizestr$ + ");"
                'clear array
                f12$ = f12$ + CRLF + "memset((void*)(" + n$ + "[0]),0," + sizestr$ + ");"

                If redimoption = 2 Then
                    f12$ = f12$ + CRLF + "}"
                End If


                f12$ = f12$ + CRLF + "}else{" 'not in cmem

                If redimoption = 2 Then
                    f12$ = f12$ + CRLF + "if (preserved_elements){"
                    'reallocation method
                    f12$ = f12$ + CRLF + "tmp_long=" + elesizestr$ + ";"
                    f12$ = f12$ + CRLF + n$ + "[0]=(ptrszint)realloc((void*)(" + n$ + "[0]),tmp_long*" + bytesperelement$ + ");"
                    f12$ = f12$ + CRLF + "if (!" + n$ + "[0]) error(257);" 'not enough memory
                    f12$ = f12$ + CRLF + "if (preserved_elements<tmp_long) ZeroMemory(((uint8*)(" + n$ + "[0]))+preserved_elements*" + bytesperelement$ + ",(tmp_long*" + bytesperelement$ + ")-(preserved_elements*" + bytesperelement$ + "));"

                    f12$ = f12$ + CRLF + "}else{"
                End If
                'standard allocation method
                f12$ = f12$ + CRLF + n$ + "[0]=(ptrszint)calloc(" + sizestr$ + ",1);"
                f12$ = f12$ + CRLF + "if (!" + n$ + "[0]) error(257);" 'not enough memory
                If redimoption = 2 Then
                    f12$ = f12$ + CRLF + "}"
                End If

                f12$ = f12$ + CRLF + "}" 'not in cmem
                f12$ = f12$ + CRLF + n$ + "[2]|=1;" 'ADD initialized flag

                '2. Generate "clean up" code (called when EXITING A SUB/FUNCTION)
                If arraydesc = 0 Then 'only add for first declaration of the array
                    WriteBufLine FreeTxtBuf, "if (" + n$ + "[2]&1){" 'initialized?
                    WriteBufLine FreeTxtBuf, "if (" + n$ + "[2]&4){" 'array is in cmem
                    WriteBufLine FreeTxtBuf, "cmem_dynamic_free((uint8*)(" + n$ + "[0]));"
                    WriteBufLine FreeTxtBuf, "}else{"
                    WriteBufLine FreeTxtBuf, "free((void*)(" + n$ + "[0]));"
                    WriteBufLine FreeTxtBuf, "}" 'cmem
                    WriteBufLine FreeTxtBuf, "}" 'init
                    'free lock (_MEM)
                    WriteBufLine FreeTxtBuf, "free_mem_lock( (mem_lock*)((ptrszint*)" + n$ + ")[" + str2(4 * nume + 4 + 1 - 1) + "] );"
                End If
            End If 'not string array

        End If 'undefined=0

        '----FINISH ARRAY DESCRIPTOR IF DEFINING FOR THE FIRST TIME----
        If arraydesc = 0 Then
            'Note: Array is init as undefined (& possibly a cmem flag)
            If cmem Then WriteBufLine DataTxtBuf, n$ + "[2]=4;" Else WriteBufLine DataTxtBuf, n$ + "[2]=0;"
            'set dimensions as undefined
            For i = 1 To nume
                b = i * 4
                WriteBufLine DataTxtBuf, n$ + "[" + str2(b) + "]=2147483647;" 'base
                WriteBufLine DataTxtBuf, n$ + "[" + str2(b + 1) + "]=0;" 'num. index
                WriteBufLine DataTxtBuf, n$ + "[" + str2(b + 2) + "]=0;" 'multiplier
            Next
            If stringarray Then
                'set array's data offset to the offset of the offset to nothingstring
                WriteBufLine DataTxtBuf, n$ + "[0]=(ptrszint)&nothingstring;"
            Else
                'set array's data offset to "nothing"
                WriteBufLine DataTxtBuf, n$ + "[0]=(ptrszint)nothingvalue;"
            End If
            WriteBufLine DataTxtBuf, "}" 'close array descriptor
        End If 'arraydesc = 0

        If undefined = 0 Then

            If redimoption = 0 Then f12$ = f12$ + CRLF + "}" 'if REDIM not specified the above is conditional
            f12$ = f12$ + CRLF + "}" 'not static

        End If 'undefined=0

        allocarray = nume
        If undefined = -1 Then allocarray = -1

    End If

    If autoary = 0 Then
        If dimoption = 3 Then 'STATIC a(100) puts creation code in main
            WriteBufLine DataTxtBuf, f12$
        Else
            WriteBufLine MainTxtBuf, f12$
        End If
    End If

    '[8] offset of data
    '[8] reserved (could be used to store a bit offset)
    '(the following repeats depending on the number of elements)
    '[4] base-offset
    '[4] number of indexes
    '[4] multiplier (the last multiplier doesn't actually exist)
    '[4] reserved

    dimshared = dimsharedlast

    tlayout$ = l$
End Function

Function arrayreference$ (indexes$, typ)
    arrayprocessinghappened = 1
    '*returns an array reference: idnumber | index$
    '*does not take into consideration the type of the array

    '*expects array id to be passed in the global id structure





    idnumber$ = str2(currentid)

    Dim id2 As idstruct

    id2 = id

    a$ = indexes$
    typ = id2.arraytype + ISARRAY + ISREFERENCE
    n$ = RTrim$(id2.callname)

    If a$ = "" Then 'no indexes passed eg. a()
        r$ = "0"
        GoTo gotarrayindex
    End If

    n = numelements(a$)

    'find number of elements supplied
    elements = 1
    b = 0
    For i = 1 To n
        a = Asc(getelement(a$, i))
        If a = 40 Then b = b + 1
        If a = 41 Then b = b - 1
        If a = 44 And b = 0 Then elements = elements + 1
    Next

    If id2.arrayelements = -1 Then
        If arrayelementslist(currentid) <> 0 And elements <> arrayelementslist(currentid) Then Give_Error "Cannot change the number of elements an array has!": Exit Function
        If elements = 1 Then id2.arrayelements = 1: ids(currentid).arrayelements = 1 'lucky guess
        arrayelementslist(currentid) = elements
    Else
        If elements <> id2.arrayelements Then Give_Error "Cannot change the number of elements an array has!": Exit Function
    End If

    curarg = 1
    firsti = 1
    For i = 1 To n
        l$ = getelement(a$, i)
        If l$ = "(" Then b = b + 1
        If l$ = ")" Then b = b - 1
        If (l$ = "," And b = 0) Or (i = n) Then
            If i = n Then
                If l$ = "," Then Give_Error "Array index missing": Exit Function
                e$ = evaluatetotyp(getelements$(a$, firsti, i), 64&)
                If Error_Happened Then Exit Function
            Else
                e$ = evaluatetotyp(getelements$(a$, firsti, i - 1), 64&)
                If Error_Happened Then Exit Function
            End If
            If e$ = "" Then Give_Error "Array index missing": Exit Function
            argi = (elements - curarg) * 4 + 4
            If curarg = 1 Then
                If NoChecks = 0 Then
                    r$ = r$ + "array_check((" + e$ + ")-" + n$ + "[" + str2(argi) + "]," + n$ + "[" + str2(argi + 1) + "])+"
                Else
                    r$ = r$ + "(" + e$ + ")-" + n$ + "[" + str2(argi) + "]+"
                End If

            Else
                If NoChecks = 0 Then
                    r$ = r$ + "array_check((" + e$ + ")-" + n$ + "[" + str2(argi) + "]," + n$ + "[" + str2(argi + 1) + "])*" + n$ + "[" + str2(argi + 2) + "]+"
                Else
                    r$ = r$ + "((" + e$ + ")-" + n$ + "[" + str2(argi) + "])*" + n$ + "[" + str2(argi + 2) + "]+"
                End If
            End If
            firsti = i + 1
            curarg = curarg + 1
        End If
    Next
    r$ = Left$(r$, Len(r$) - 1) 'remove trailing +
    gotarrayindex:

    r$ = idnumber$ + sp3 + r$
    arrayreference$ = r$
    'PRINT "arrayreference returning:" + r$

End Function

Sub assign (a$, n)
    For i = 1 To n
        c = Asc(getelement$(a$, i))
        If c = 40 Then b = b + 1 '(
        If c = 41 Then b = b - 1 ')
        If c = 61 And b = 0 Then '=
            If i = 1 Then Give_Error "Expected ... =": Exit Sub
            If i = n Then Give_Error "Expected = ...": Exit Sub

            a2$ = fixoperationorder(getelements$(a$, 1, i - 1))
            If Error_Happened Then Exit Sub
            l$ = tlayout$ + sp + "=" + sp

            'note: evaluating a2$ will fail if it is setting a function's return value without this check (as the function, not the return-variable) will be found by evaluate)
            If i = 2 Then 'lhs has only 1 element
                try = findid(a2$)
                If Error_Happened Then Exit Sub
                Do While try
                    If id.t Then
                        If subfuncn = id.insubfuncn Then 'avoid global before local
                            If (id.t And ISUDT) = 0 Then
                                makeidrefer a2$, typ
                                GoTo assignsimplevariable
                            End If
                        End If
                    End If
                    If try = 2 Then findanotherid = 1: try = findid(a2$) Else try = 0
                    If Error_Happened Then Exit Sub
                Loop
            End If

            a2$ = evaluate$(a2$, typ): If Error_Happened Then Exit Sub
            assignsimplevariable:
            If (typ And ISREFERENCE) = 0 Then Give_Error "Expected variable =": Exit Sub
            setrefer a2$, typ, getelements$(a$, i + 1, n), 0
            If Error_Happened Then Exit Sub
            tlayout$ = l$ + tlayout$

            Exit Sub

        End If '=,b=0
    Next
    Give_Error "Expected =": Exit Sub
End Sub

Sub clearid
    id = cleariddata
End Sub

Sub vWatchVariable (this$, action As _Byte)
    Static totalLocalVariables As Long, localVariablesList$
    Static totalMainModuleVariables As Long, mainModuleVariablesList$

    Select Case action
        Case -1 'reset
            totalLocalVariables = 0
            localVariablesList$ = ""
            totalMainModuleVariables = 0
            mainModuleVariablesList$ = ""
        Case 0 'add
            If InStr(vWatchVariableExclusions$, "@" + this$ + "@") > 0 Or Left$(this$, 12) = "_SUB_VWATCH_" Then
                Exit Sub
            End If

            vWatchNewVariable$ = this$
            If subfunc = "" Then
                totalMainModuleVariables = totalMainModuleVariables + 1
                mainModuleVariablesList$ = mainModuleVariablesList$ + "vwatch_global_vars[" + str2$(totalMainModuleVariables - 1) + "] = &" + this$ + ";" + CRLF
                manageVariableList id.cn, this$, totalMainModuleVariables - 1, 0
            Else
                totalLocalVariables = totalLocalVariables + 1
                localVariablesList$ = localVariablesList$ + "vwatch_local_vars[" + str2$(totalLocalVariables - 1) + "] = &" + this$ + ";" + CRLF
                manageVariableList id.cn, this$, totalLocalVariables - 1, 0
            End If
        Case 1 'dump to data[].txt & reset
            If subfunc = "" Then
                If totalMainModuleVariables > 0 Then
                    WriteBufLine DataTxtBuf, "void *vwatch_local_vars[0];"
                    WriteBufLine GlobTxtBuf, "void *vwatch_global_vars[" + Str$(totalMainModuleVariables) + "];"
                    WriteBufLine DataTxtBuf, mainModuleVariablesList$
                Else
                    WriteBufLine DataTxtBuf, "void *vwatch_local_vars[0];"
                    WriteBufLine GlobTxtBuf, "void *vwatch_global_vars[0];"
                End If

                mainModuleVariablesList$ = ""
                totalMainModuleVariables = 0
            Else
                If subfunc <> "SUB_VWATCH" Then
                    If totalLocalVariables > 0 Then
                        WriteBufLine DataTxtBuf, "void *vwatch_local_vars[" + Str$(totalLocalVariables) + "];"
                        WriteBufLine DataTxtBuf, localVariablesList$
                    Else
                        WriteBufLine DataTxtBuf, "void *vwatch_local_vars[0];"
                    End If
                Else
                    WriteBufLine DataTxtBuf, "void *vwatch_local_vars[0];"
                End If

                localVariablesList$ = ""
                totalLocalVariables = 0
            End If
    End Select
End Sub

Sub vWatchAddLabel (this As Long, lastLine As _Byte)
    Static prevLabel As Long, prevSkip As Long

    If lastLine = 0 Then
        While this > Len(vWatchUsedLabels)
            vWatchUsedLabels = vWatchUsedLabels + Space$(1000)
            vWatchUsedSkipLabels = vWatchUsedSkipLabels + Space$(1000)
        Wend

        If firstLineNumberLabelvWatch = 0 Then
            firstLineNumberLabelvWatch = this
        Else
            If prevSkip <> prevLabel Then
                Asc(vWatchUsedSkipLabels, prevLabel) = 1
                WriteBufLine MainTxtBuf, "VWATCH_SKIPLABEL_" + str2$(prevLabel) + ":;"
                prevSkip = prevLabel
            End If
        End If

        If prevLabel <> this Then
            Asc(vWatchUsedLabels, this) = 1
            WriteBufLine MainTxtBuf, "VWATCH_LABEL_" + str2$(this) + ":;"
            prevLabel = this
            lastLineNumberLabelvWatch = this
        End If
    Else
        If prevSkip <> prevLabel Then
            Asc(vWatchUsedSkipLabels, prevLabel) = 1
            WriteBufLine MainTxtBuf, "VWATCH_SKIPLABEL_" + str2$(prevLabel) + ":;"
            prevSkip = prevLabel
        End If
    End If
End Sub

Sub closemain
    xend

    WriteBufLine MainTxtBuf, "return;"

    If vWatchOn And firstLineNumberLabelvWatch > 0 Then
        WriteBufLine MainTxtBuf, "VWATCH_SETNEXTLINE:;"
        WriteBufLine MainTxtBuf, "switch (*__LONG_VWATCH_GOTO) {"
        For i = firstLineNumberLabelvWatch To lastLineNumberLabelvWatch
            If Asc(vWatchUsedLabels, i) = 1 Then
                WriteBufLine MainTxtBuf, "    case " + str2$(i) + ":"
                WriteBufLine MainTxtBuf, "        goto VWATCH_LABEL_" + str2$(i) + ";"
                WriteBufLine MainTxtBuf, "        break;"
            End If
        Next
        WriteBufLine MainTxtBuf, "    default:"
        WriteBufLine MainTxtBuf, "        *__LONG_VWATCH_GOTO=*__LONG_VWATCH_LINENUMBER;"
        WriteBufLine MainTxtBuf, "        goto VWATCH_SETNEXTLINE;"
        WriteBufLine MainTxtBuf, "}"

        WriteBufLine MainTxtBuf, "VWATCH_SKIPLINE:;"
        WriteBufLine MainTxtBuf, "switch (*__LONG_VWATCH_GOTO) {"
        For i = firstLineNumberLabelvWatch To lastLineNumberLabelvWatch
            If Asc(vWatchUsedSkipLabels, i) = 1 Then
                WriteBufLine MainTxtBuf, "    case -" + str2$(i) + ":"
                WriteBufLine MainTxtBuf, "        goto VWATCH_SKIPLABEL_" + str2$(i) + ";"
                WriteBufLine MainTxtBuf, "        break;"
            End If
        Next
        WriteBufLine MainTxtBuf, "}"

    End If

    WriteBufLine MainTxtBuf, "}"
    WriteBufLine RetTxtBuf, "}" 'end case
    WriteBufLine RetTxtBuf, "}"
    WriteBufLine RetTxtBuf, "error(3);" 'no valid return possible

    closedmain = 1
    firstLineNumberLabelvWatch = 0
End Sub

Function countelements (a$)
    n = numelements(a$)
    c = 1
    For i = 1 To n
        e$ = getelement$(a$, i)
        If e$ = "(" Then b = b + 1
        If e$ = ")" Then b = b - 1
        If b < 0 Then Give_Error "Unexpected ) encountered": Exit Function
        If e$ = "," And b = 0 Then c = c + 1
    Next
    countelements = c
End Function



Function dim2 (varname$, typ2$, method, elements$)

    'notes: (DO NOT REMOVE THESE IMPORTANT USAGE NOTES)
    '
    '(shared)dimsfarray: Creates an ID only (no C++ code)
    '                    Adds an index/'link' to the sub/function's argument
    '                        ID.sfid=glinkid
    '                        ID.sfarg=glinkarg
    '                    Sets arrayelements=-1 'unknown' (if elements$="?") otherwise val(elements$)
    '                    ***Does not refer to arrayelementslist()***
    '
    '(argument)method: 0 being created by a DIM name AS type
    '                  1 being created by a DIM name+symbol
    '                  or automatically without the use of DIM
    '
    'elements$="?": (see also dimsfarray for that special case)
    '               Checks arrayelementslist() and;
    '               if unknown(=0), creates an ID only
    '               if known, creates a DYNAMIC array's C++ initialization code so it can be used later

    typ$ = typ2$
    dim2 = 1 'success

    If Debug Then Print #9, "dim2 called", method

    cvarname$ = varname$
    l$ = cvarname$
    varname$ = UCase$(varname$)

    If dimsfarray = 1 Then f = 0 Else f = 1

    If dimstatic <> 0 And dimshared = 0 Then
        'name will have include the sub/func name in its scope
        'variable/array will be created in main on startup
        defdatahandle = GlobTxtBuf
        DataTxtBuf = OpenBuffer%("A", tmpdir$ + "maindata.txt")
        FreeTxtBuf = OpenBuffer%("A", tmpdir$ + "mainfree.txt")
    End If


    scope2$ = module$ + "_" + subfunc$ + "_"
    'Note: when REDIMing a SHARED array in dynamic memory scope2$ must be modified

    If Len(typ$) = 0 Then Give_Error "DIM2: No type specified!": Exit Function

    'UDT
    'is it a udt?
    For i = 1 To lasttype
        If typ$ = RTrim$(udtxname(i)) Or (typ$ = "MEM" And RTrim$(udtxname(i)) = "_MEM" And qb64prefix_set = 1) Then
            dim2typepassback$ = RTrim$(udtxcname(i))
            If typ$ = "MEM" And RTrim$(udtxname(i)) = "_MEM" Then
                dim2typepassback$ = Mid$(RTrim$(udtxcname(i)), 2)
            End If

            n$ = "UDT_" + varname$

            'array of UDTs
            If elements$ <> "" Then
                arraydesc = 0
                If f = 1 Then
                    try = findid(varname$)
                    If Error_Happened Then Exit Function
                    Do While try
                        If (id.arraytype) Then
                            l$ = RTrim$(id.cn)
                            arraydesc = currentid: scope2$ = scope$
                            Exit Do
                        End If
                        If try = 2 Then findanotherid = 1: try = findid(varname$) Else try = 0
                        If Error_Happened Then Exit Function
                    Loop
                End If
                n$ = scope2$ + "ARRAY_" + n$
                bits = udtxsize(i)
                If udtxbytealign(i) Then
                    If bits Mod 8 Then bits = bits + 8 - (bits Mod 8)
                End If

                If f = 1 Then

                    If Len(elements$) = 1 And Asc(elements$) = 63 Then '"?"
                        E = arrayelementslist(idn + 1): If E Then elements$ = elements$ + str2$(E) 'eg. "?3" for a 3 dimensional array
                    End If
                    nume = allocarray(n$, elements$, -bits, i)
                    If Error_Happened Then Exit Function
                    l$ = l$ + sp + tlayout$
                    If arraydesc Then GoTo dim2exitfunc
                    clearid

                Else
                    clearid
                    If elements$ = "?" Then
                        nume = -1
                        id.linkid = glinkid
                        id.linkarg = glinkarg
                    Else
                        nume = Val(elements$)
                    End If
                End If

                id.arraytype = UDTTYPE + i
                If cmemlist(idn + 1) Then id.arraytype = id.arraytype + ISINCONVENTIONALMEMORY
                id.n = cvarname$

                If nume > 65536 Then nume = nume - 65536: id.staticarray = 1

                id.arrayelements = nume
                id.callname = n$
                regid
                vWatchVariable n$, 0
                If Error_Happened Then Exit Function
                GoTo dim2exitfunc
            End If

            'not an array of UDTs
            bits = udtxsize(i): bytes = bits \ 8
            If bits Mod 8 Then
                bytes = bytes + 1
            End If
            n$ = scope2$ + n$
            If f Then WriteBufLine defdatahandle, "void *" + n$ + "=NULL;"
            clearid
            id.n = cvarname$
            id.t = UDTTYPE + i
            If cmemlist(idn + 1) Then
                id.t = id.t + ISINCONVENTIONALMEMORY
                If f Then
                    WriteBufLine DataTxtBuf, "if(" + n$ + "==NULL){"
                    WriteBufLine DataTxtBuf, "cmem_sp-=" + str2(bytes) + ";"
                    WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
                    WriteBufLine DataTxtBuf, n$ + "=(void*)(dblock+cmem_sp);"
                    WriteBufLine DataTxtBuf, "memset(" + n$ + ",0," + str2(bytes) + ");"
                    WriteBufLine DataTxtBuf, "}"
                End If
            Else
                If f Then
                    WriteBufLine DataTxtBuf, "if(" + n$ + "==NULL){"
                    WriteBufLine DataTxtBuf, n$ + "=(void*)mem_static_malloc(" + str2$(bytes) + ");"
                    WriteBufLine DataTxtBuf, "memset(" + n$ + ",0," + str2(bytes) + ");"
                    If udtxvariable(i) Then
                        initialise_udt_varstrings n$, i, DataTxtBuf, 0
                        free_udt_varstrings n$, i, FreeTxtBuf, 0
                    End If
                    WriteBufLine DataTxtBuf, "}"
                End If
            End If
            id.callname = n$
            regid
            vWatchVariable n$, 0
            If Error_Happened Then Exit Function
            GoTo dim2exitfunc
        End If
    Next i
    'it isn't a udt

    typ$ = symbol2fulltypename$(typ$)
    If Error_Happened Then Exit Function

    'check if _UNSIGNED was specified
    unsgn = 0
    If Left$(typ$, 10) = "_UNSIGNED " Or (Left$(typ$, 9) = "UNSIGNED " And qb64prefix_set = 1) Then
        unsgn = 1
        typ$ = Mid$(typ$, InStr(typ$, Chr$(32)) + 1)
        If Len(typ$) = 0 Then Give_Error "Expected more type information after " + qb64prefix$ + "UNSIGNED!": Exit Function
    End If

    n$ = "" 'n$ is assumed to be "" after branching into the code for each type

    If Left$(typ$, 6) = "STRING" Then

        If Len(typ$) > 6 Then
            If Left$(typ$, 9) <> "STRING * " Then Give_Error "Expected STRING * number/constant": Exit Function

            c$ = Right$(typ$, Len(typ$) - 9)

            'constant check 2011
            hashfound = 0
            hashname$ = c$
            hashchkflags = HASHFLAG_CONSTANT
            hashres = HashFindRev(hashname$, hashchkflags, hashresflags, hashresref)
            Do While hashres
                If constsubfunc(hashresref) = subfuncn Or constsubfunc(hashresref) = 0 Then
                    If constdefined(hashresref) Then
                        hashfound = 1
                        Exit Do
                    End If
                End If
                If hashres <> 1 Then hashres = HashFindCont(hashresflags, hashresref) Else hashres = 0
            Loop
            If hashfound Then
                i2 = hashresref
                t = consttype(i2)
                If t And ISSTRING Then Give_Error "Expected STRING * numeric-constant": Exit Function
                'convert value to general formats
                If t And ISFLOAT Then
                    v## = constfloat(i2)
                    v&& = v##
                    v~&& = v&&
                Else
                    If t And ISUNSIGNED Then
                        v~&& = constuinteger(i2)
                        v&& = v~&&
                        v## = v&&
                    Else
                        v&& = constinteger(i2)
                        v## = v&&
                        v~&& = v&&
                    End If
                End If
                If v&& < 1 Or v&& > 9999999999 Then Give_Error "STRING * out-of-range constant": Exit Function
                bytes = v&&
                dim2typepassback$ = SCase$("String * ") + constcname(i2)
                GoTo constantlenstr
            End If

            If isuinteger(c$) = 0 Then Give_Error "Number/Constant expected after *": Exit Function
            If Len(c$) > 10 Then Give_Error "Too many characters in number after *": Exit Function
            bytes = Val(c$)
            If bytes = 0 Then Give_Error "Cannot create a fixed string of length 0": Exit Function
            constantlenstr:
            n$ = "STRING" + str2(bytes) + "_" + varname$

            'array of fixed length strings
            If elements$ <> "" Then
                arraydesc = 0
                If f = 1 Then
                    try = findid(varname$ + "$")
                    If Error_Happened Then Exit Function
                    Do While try
                        If (id.arraytype) Then
                            l$ = RTrim$(id.cn)
                            arraydesc = currentid: scope2$ = scope$
                            Exit Do
                        End If
                        If try = 2 Then findanotherid = 1: try = findid(varname$ + "$") Else try = 0
                        If Error_Happened Then Exit Function
                    Loop
                End If
                n$ = scope2$ + "ARRAY_" + n$

                'nume = allocarray(n$, elements$, bytes)
                'IF arraydesc THEN goto dim2exitfunc 'id already exists!
                'clearid

                If f = 1 Then

                    If Len(elements$) = 1 And Asc(elements$) = 63 Then '"?"
                        E = arrayelementslist(idn + 1): If E Then elements$ = elements$ + str2$(E) 'eg. "?3" for a 3 dimensional array
                    End If
                    nume = allocarray(n$, elements$, bytes, 0)
                    If Error_Happened Then Exit Function
                    l$ = l$ + sp + tlayout$
                    If arraydesc Then GoTo dim2exitfunc
                    clearid

                Else
                    clearid
                    If elements$ = "?" Then
                        nume = -1
                        id.linkid = glinkid
                        id.linkarg = glinkarg
                    Else
                        nume = Val(elements$)
                    End If
                End If

                id.arraytype = STRINGTYPE + ISFIXEDLENGTH
                If cmemlist(idn + 1) Then id.arraytype = id.arraytype + ISINCONVENTIONALMEMORY
                id.n = cvarname$
                If nume > 65536 Then nume = nume - 65536: id.staticarray = 1

                id.arrayelements = nume
                id.callname = n$
                id.tsize = bytes
                If method = 0 Then
                    id.mayhave = "$" + str2(bytes)
                End If
                If method = 1 Then
                    id.musthave = "$" + str2(bytes)
                End If
                regid
                If Error_Happened Then Exit Function
                vWatchVariable n$, 0
                GoTo dim2exitfunc
            End If

            'standard fixed length string
            n$ = scope2$ + n$
            If f Then WriteBufLine defdatahandle, "qbs *" + n$ + "=NULL;"
            If f Then WriteBufLine FreeTxtBuf, "qbs_free(" + n$ + ");" 'so descriptor can be freed
            clearid
            id.n = cvarname$
            id.t = STRINGTYPE + ISFIXEDLENGTH
            If cmemlist(idn + 1) Then
                id.t = id.t + ISINCONVENTIONALMEMORY
                If f Then WriteBufLine DataTxtBuf, "if(" + n$ + "==NULL){"
                If f Then WriteBufLine DataTxtBuf, "cmem_sp-=" + str2(bytes) + ";"
                If f Then WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
                If f Then WriteBufLine DataTxtBuf, n$ + "=qbs_new_fixed((uint8*)(dblock+cmem_sp)," + str2(bytes) + ",0);"
                If f Then WriteBufLine DataTxtBuf, "memset(" + n$ + "->chr,0," + str2(bytes) + ");"
                If f Then WriteBufLine DataTxtBuf, "}"
            Else
                If f Then WriteBufLine DataTxtBuf, "if(" + n$ + "==NULL){"
                o$ = "(uint8*)mem_static_malloc(" + str2$(bytes) + ")"
                If f Then WriteBufLine DataTxtBuf, n$ + "=qbs_new_fixed(" + o$ + "," + str2$(bytes) + ",0);"
                If f Then WriteBufLine DataTxtBuf, "memset(" + n$ + "->chr,0," + str2$(bytes) + ");"
                If f Then WriteBufLine DataTxtBuf, "}"
            End If
            id.tsize = bytes
            If method = 0 Then
                id.mayhave = "$" + str2(bytes)
            End If
            If method = 1 Then
                id.musthave = "$" + str2(bytes)
            End If
            id.callname = n$
            regid
            vWatchVariable n$, 0
            If Error_Happened Then Exit Function
            GoTo dim2exitfunc
        End If

        'variable length string processing
        n$ = "STRING_" + varname$

        'array of variable length strings
        If elements$ <> "" Then
            arraydesc = 0
            If f = 1 Then
                try = findid(varname$ + "$")
                If Error_Happened Then Exit Function
                Do While try
                    If (id.arraytype) Then
                        l$ = RTrim$(id.cn)
                        arraydesc = currentid: scope2$ = scope$
                        Exit Do
                    End If
                    If try = 2 Then findanotherid = 1: try = findid(varname$ + "$") Else try = 0
                    If Error_Happened Then Exit Function
                Loop
            End If
            n$ = scope2$ + "ARRAY_" + n$

            'nume = allocarray(n$, elements$, -2147483647) '-2147483647=STRING
            'IF arraydesc THEN goto dim2exitfunc 'id already exists!
            'clearid

            If f = 1 Then

                If Len(elements$) = 1 And Asc(elements$) = 63 Then '"?"
                    E = arrayelementslist(idn + 1): If E Then elements$ = elements$ + str2$(E) 'eg. "?3" for a 3 dimensional array
                End If
                nume = allocarray(n$, elements$, -2147483647, 0)
                If Error_Happened Then Exit Function
                l$ = l$ + sp + tlayout$
                If arraydesc Then GoTo dim2exitfunc
                clearid

            Else
                clearid
                If elements$ = "?" Then
                    nume = -1
                    id.linkid = glinkid
                    id.linkarg = glinkarg
                Else
                    nume = Val(elements$)
                End If
            End If

            id.n = cvarname$
            id.arraytype = STRINGTYPE
            If cmemlist(idn + 1) Then id.arraytype = id.arraytype + ISINCONVENTIONALMEMORY
            If nume > 65536 Then nume = nume - 65536: id.staticarray = 1

            id.arrayelements = nume
            id.callname = n$
            If method = 0 Then
                id.mayhave = "$"
            End If
            If method = 1 Then
                id.musthave = "$"
            End If
            regid
            If Error_Happened Then Exit Function
            vWatchVariable n$, 0
            GoTo dim2exitfunc
        End If

        'standard variable length string
        n$ = scope2$ + n$
        clearid
        id.n = cvarname$
        id.t = STRINGTYPE
        If cmemlist(idn + 1) Then
            If f Then WriteBufLine defdatahandle, "qbs *" + n$ + "=NULL;"
            If f Then WriteBufLine DataTxtBuf, "if (!" + n$ + ")" + n$ + "=qbs_new_cmem(0,0);"
            id.t = id.t + ISINCONVENTIONALMEMORY
        Else
            If f Then WriteBufLine defdatahandle, "qbs *" + n$ + "=NULL;"
            If f Then WriteBufLine DataTxtBuf, "if (!" + n$ + ")" + n$ + "=qbs_new(0,0);"
        End If
        If f Then WriteBufLine FreeTxtBuf, "qbs_free(" + n$ + ");"
        If method = 0 Then
            id.mayhave = "$"
        End If
        If method = 1 Then
            id.musthave = "$"
        End If
        id.callname = n$
        regid
        vWatchVariable n$, 0
        If Error_Happened Then Exit Function
        GoTo dim2exitfunc
    End If

    If Left$(typ$, 4) = "_BIT" Or (Left$(typ$, 3) = "BIT" And qb64prefix_set = 1) Then
        If (Left$(typ$, 4) = "_BIT" And Len(typ$) > 4) Or (Left$(typ$, 3) = "BIT" And Len(typ$) > 3) Then
            If Left$(typ$, 7) <> "_BIT * " And Left$(typ$, 6) <> "BIT * " Then Give_Error "Expected " + qb64prefix$ + "BIT * number": Exit Function
            c$ = Mid$(typ$, InStr(typ$, " * ") + 3)
            If isuinteger(c$) = 0 Then Give_Error "Number expected after *": Exit Function
            If Len(c$) > 2 Then Give_Error "Cannot create a bit variable of size > 64 bits": Exit Function
            bits = Val(c$)
            If bits = 0 Then Give_Error "Cannot create a bit variable of size 0 bits": Exit Function
            If bits > 64 Then Give_Error "Cannot create a bit variable of size > 64 bits": Exit Function
        Else
            bits = 1
        End If
        If bits <= 32 Then ct$ = "int32" Else ct$ = "int64"
        If unsgn Then n$ = "U": ct$ = "u" + ct$
        n$ = n$ + "BIT" + str2(bits) + "_" + varname$

        'array of bit-length variables
        If elements$ <> "" Then
            If bits > 63 Then Give_Error "Cannot create a bit array of size > 63 bits": Exit Function
            arraydesc = 0
            cmps$ = varname$: If unsgn Then cmps$ = cmps$ + "~"
            cmps$ = cmps$ + "`" + str2(bits)
            If f = 1 Then
                try = findid(cmps$)
                If Error_Happened Then Exit Function
                Do While try
                    If (id.arraytype) Then
                        l$ = RTrim$(id.cn)
                        arraydesc = currentid: scope2$ = scope$
                        Exit Do
                    End If
                    If try = 2 Then findanotherid = 1: try = findid(cmps$) Else try = 0
                    If Error_Happened Then Exit Function
                Loop
            End If
            n$ = scope2$ + "ARRAY_" + n$

            'nume = allocarray(n$, elements$, -bits) 'passing a negative element size signifies bits not bytes
            'IF arraydesc THEN goto dim2exitfunc 'id already exists!
            'clearid

            If f = 1 Then

                If Len(elements$) = 1 And Asc(elements$) = 63 Then '"?"
                    E = arrayelementslist(idn + 1): If E Then elements$ = elements$ + str2$(E) 'eg. "?3" for a 3 dimensional array
                End If
                nume = allocarray(n$, elements$, -bits, 0)
                If Error_Happened Then Exit Function
                l$ = l$ + sp + tlayout$
                If arraydesc Then GoTo dim2exitfunc
                clearid

            Else
                clearid
                If elements$ = "?" Then
                    nume = -1
                    id.linkid = glinkid
                    id.linkarg = glinkarg
                Else
                    nume = Val(elements$)
                End If
            End If

            id.n = cvarname$
            id.arraytype = BITTYPE - 1 + bits
            If unsgn Then id.arraytype = id.arraytype + ISUNSIGNED
            If cmemlist(idn + 1) Then id.arraytype = id.arraytype + ISINCONVENTIONALMEMORY
            If nume > 65536 Then nume = nume - 65536: id.staticarray = 1

            id.arrayelements = nume
            id.callname = n$
            If method = 0 Then
                If unsgn Then id.mayhave = "~`" + str2(bits) Else id.mayhave = "`" + str2(bits)
            End If
            If method = 1 Then
                If unsgn Then id.musthave = "~`" + str2(bits) Else id.musthave = "`" + str2(bits)
            End If
            regid
            If Error_Happened Then Exit Function
            vWatchVariable n$, 0
            GoTo dim2exitfunc
        End If
        'standard bit-length variable
        n$ = scope2$ + n$
        WriteBufLine defdatahandle, ct$ + " *" + n$ + "=NULL;"
        WriteBufLine DataTxtBuf, "if(" + n$ + "==NULL){"
        WriteBufLine DataTxtBuf, "cmem_sp-=4;"
        WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
        WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)(dblock+cmem_sp);"
        WriteBufLine DataTxtBuf, "*" + n$ + "=0;"
        WriteBufLine DataTxtBuf, "}"
        clearid
        id.n = cvarname$
        id.t = BITTYPE - 1 + bits + ISINCONVENTIONALMEMORY: If unsgn Then id.t = id.t + ISUNSIGNED
        If method = 0 Then
            If unsgn Then id.mayhave = "~`" + str2(bits) Else id.mayhave = "`" + str2(bits)
        End If
        If method = 1 Then
            If unsgn Then id.musthave = "~`" + str2(bits) Else id.musthave = "`" + str2(bits)
        End If
        id.callname = n$
        regid
        vWatchVariable n$, 0
        If Error_Happened Then Exit Function
        GoTo dim2exitfunc
    End If

    If typ$ = "_BYTE" Or (typ$ = "BYTE" And qb64prefix_set = 1) Then
        ct$ = "int8"
        If unsgn Then n$ = "U": ct$ = "u" + ct$
        n$ = n$ + "BYTE_" + varname$
        If elements$ <> "" Then
            arraydesc = 0
            cmps$ = varname$: If unsgn Then cmps$ = cmps$ + "~"
            cmps$ = cmps$ + "%%"
            If f = 1 Then
                try = findid(cmps$)
                If Error_Happened Then Exit Function
                Do While try
                    If (id.arraytype) Then
                        l$ = RTrim$(id.cn)
                        arraydesc = currentid: scope2$ = scope$
                        Exit Do
                    End If
                    If try = 2 Then findanotherid = 1: try = findid(cmps$) Else try = 0
                    If Error_Happened Then Exit Function
                Loop

            End If
            n$ = scope2$ + "ARRAY_" + n$

            'nume = allocarray(n$, elements$, 1)
            'IF arraydesc THEN goto dim2exitfunc
            'clearid

            If f = 1 Then

                If Len(elements$) = 1 And Asc(elements$) = 63 Then '"?"
                    E = arrayelementslist(idn + 1): If E Then elements$ = elements$ + str2$(E) 'eg. "?3" for a 3 dimensional array
                End If
                nume = allocarray(n$, elements$, 1, 0)
                If Error_Happened Then Exit Function
                l$ = l$ + sp + tlayout$
                If arraydesc Then GoTo dim2exitfunc
                clearid

            Else
                clearid
                If elements$ = "?" Then
                    nume = -1
                    id.linkid = glinkid
                    id.linkarg = glinkarg
                Else
                    nume = Val(elements$)
                End If
            End If

            id.arraytype = BYTETYPE: If unsgn Then id.arraytype = id.arraytype + ISUNSIGNED
            If cmemlist(idn + 1) Then id.arraytype = id.arraytype + ISINCONVENTIONALMEMORY
            If nume > 65536 Then nume = nume - 65536: id.staticarray = 1

            id.arrayelements = nume
            id.callname = n$
        Else
            n$ = scope2$ + n$
            clearid
            id.t = BYTETYPE: If unsgn Then id.t = id.t + ISUNSIGNED
            If f = 1 Then WriteBufLine defdatahandle, ct$ + " *" + n$ + "=NULL;"
            If f = 1 Then WriteBufLine DataTxtBuf, "if(" + n$ + "==NULL){"
            If cmemlist(idn + 1) Then
                id.t = id.t + ISINCONVENTIONALMEMORY
                If f = 1 Then WriteBufLine DataTxtBuf, "cmem_sp-=1;"
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)(dblock+cmem_sp);"
                If f = 1 Then WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
            Else
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)mem_static_malloc(1);"
            End If
            If f = 1 Then WriteBufLine DataTxtBuf, "*" + n$ + "=0;"
            If f = 1 Then WriteBufLine DataTxtBuf, "}"
        End If
        id.n = cvarname$
        If method = 0 Then
            If unsgn Then id.mayhave = "~%%" Else id.mayhave = "%%"
        End If
        If method = 1 Then
            If unsgn Then id.musthave = "~%%" Else id.musthave = "%%"
        End If
        id.callname = n$
        regid
        vWatchVariable n$, 0
        If Error_Happened Then Exit Function
        GoTo dim2exitfunc
    End If

    If typ$ = "INTEGER" Then
        ct$ = "int16"
        If unsgn Then n$ = "U": ct$ = "u" + ct$
        n$ = n$ + "INTEGER_" + varname$

        If elements$ <> "" Then
            arraydesc = 0
            cmps$ = varname$: If unsgn Then cmps$ = cmps$ + "~"
            cmps$ = cmps$ + "%"
            If f = 1 Then
                try = findid(cmps$)
                If Error_Happened Then Exit Function
                Do While try
                    If (id.arraytype) Then
                        l$ = RTrim$(id.cn)
                        arraydesc = currentid: scope2$ = scope$
                        Exit Do
                    End If
                    If try = 2 Then findanotherid = 1: try = findid(cmps$) Else try = 0
                    If Error_Happened Then Exit Function
                Loop
            End If
            n$ = scope2$ + "ARRAY_" + n$

            If f = 1 Then

                If Len(elements$) = 1 And Asc(elements$) = 63 Then '"?"
                    E = arrayelementslist(idn + 1): If E Then elements$ = elements$ + str2$(E) 'eg. "?3" for a 3 dimensional array
                End If
                nume = allocarray(n$, elements$, 2, 0)
                If Error_Happened Then Exit Function
                l$ = l$ + sp + tlayout$
                If arraydesc Then GoTo dim2exitfunc
                clearid

            Else
                clearid
                If elements$ = "?" Then
                    nume = -1
                    id.linkid = glinkid
                    id.linkarg = glinkarg
                Else
                    nume = Val(elements$)
                End If
            End If


            id.arraytype = INTEGERTYPE: If unsgn Then id.arraytype = id.arraytype + ISUNSIGNED
            If cmemlist(idn + 1) Then id.arraytype = id.arraytype + ISINCONVENTIONALMEMORY
            If nume > 65536 Then nume = nume - 65536: id.staticarray = 1

            id.arrayelements = nume
            id.callname = n$
        Else
            n$ = scope2$ + n$
            clearid
            id.t = INTEGERTYPE: If unsgn Then id.t = id.t + ISUNSIGNED
            If f = 1 Then WriteBufLine defdatahandle, ct$ + " *" + n$ + "=NULL;"
            If f = 1 Then WriteBufLine DataTxtBuf, "if(" + n$ + "==NULL){"
            If cmemlist(idn + 1) Then
                id.t = id.t + ISINCONVENTIONALMEMORY
                If f = 1 Then WriteBufLine DataTxtBuf, "cmem_sp-=2;"
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)(dblock+cmem_sp);"
                If f = 1 Then WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
            Else
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)mem_static_malloc(2);"
            End If
            If f = 1 Then WriteBufLine DataTxtBuf, "*" + n$ + "=0;"
            If f = 1 Then WriteBufLine DataTxtBuf, "}"
        End If
        id.n = cvarname$
        If method = 0 Then
            If unsgn Then id.mayhave = "~%" Else id.mayhave = "%"
        End If
        If method = 1 Then
            If unsgn Then id.musthave = "~%" Else id.musthave = "%"
        End If
        id.callname = n$
        regid
        vWatchVariable n$, 0
        If Error_Happened Then Exit Function
        GoTo dim2exitfunc
    End If








    If typ$ = "_OFFSET" Or (typ$ = "OFFSET" And qb64prefix_set = 1) Then
        ct$ = "ptrszint"
        If unsgn Then n$ = "U": ct$ = "u" + ct$
        n$ = n$ + "OFFSET_" + varname$
        If elements$ <> "" Then
            arraydesc = 0
            cmps$ = varname$: If unsgn Then cmps$ = cmps$ + "~"
            cmps$ = cmps$ + "%&"
            If f = 1 Then
                try = findid(cmps$)
                If Error_Happened Then Exit Function
                Do While try
                    If (id.arraytype) Then
                        l$ = RTrim$(id.cn)
                        arraydesc = currentid: scope2$ = scope$
                        Exit Do
                    End If
                    If try = 2 Then findanotherid = 1: try = findid(cmps$) Else try = 0
                    If Error_Happened Then Exit Function
                Loop
            End If
            n$ = scope2$ + "ARRAY_" + n$

            If f = 1 Then

                If Len(elements$) = 1 And Asc(elements$) = 63 Then '"?"
                    E = arrayelementslist(idn + 1): If E Then elements$ = elements$ + str2$(E) 'eg. "?3" for a 3 dimensional array
                End If
                nume = allocarray(n$, elements$, OS_BITS \ 8, 0)
                If Error_Happened Then Exit Function
                l$ = l$ + sp + tlayout$
                If arraydesc Then GoTo dim2exitfunc
                clearid

            Else
                clearid
                If elements$ = "?" Then
                    nume = -1
                    id.linkid = glinkid
                    id.linkarg = glinkarg
                Else
                    nume = Val(elements$)
                End If
            End If

            id.arraytype = OFFSETTYPE: If unsgn Then id.arraytype = id.arraytype + ISUNSIGNED
            If cmemlist(idn + 1) Then id.arraytype = id.arraytype + ISINCONVENTIONALMEMORY
            If nume > 65536 Then nume = nume - 65536: id.staticarray = 1

            id.arrayelements = nume
            id.callname = n$
        Else
            n$ = scope2$ + n$
            clearid
            id.t = OFFSETTYPE: If unsgn Then id.t = id.t + ISUNSIGNED
            If f = 1 Then WriteBufLine defdatahandle, ct$ + " *" + n$ + "=NULL;"
            If f = 1 Then WriteBufLine DataTxtBuf, "if(" + n$ + "==NULL){"
            If cmemlist(idn + 1) Then
                id.t = id.t + ISINCONVENTIONALMEMORY
                If f = 1 Then WriteBufLine DataTxtBuf, "cmem_sp-=" + str2(OS_BITS \ 8) + ";"
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)(dblock+cmem_sp);"
                If f = 1 Then WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
            Else
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)mem_static_malloc(" + str2(OS_BITS \ 8) + ");"
            End If
            If f = 1 Then WriteBufLine DataTxtBuf, "*" + n$ + "=0;"
            If f = 1 Then WriteBufLine DataTxtBuf, "}"
        End If
        id.n = cvarname$
        If method = 0 Then
            If unsgn Then id.mayhave = "~%&" Else id.mayhave = "%&"
        End If
        If method = 1 Then
            If unsgn Then id.musthave = "~%&" Else id.musthave = "%&"
        End If
        id.callname = n$
        regid
        vWatchVariable n$, 0
        If Error_Happened Then Exit Function
        GoTo dim2exitfunc
    End If

    If typ$ = "LONG" Then
        ct$ = "int32"
        If unsgn Then n$ = "U": ct$ = "u" + ct$
        n$ = n$ + "LONG_" + varname$
        If elements$ <> "" Then
            arraydesc = 0
            cmps$ = varname$: If unsgn Then cmps$ = cmps$ + "~"
            cmps$ = cmps$ + "&"
            If f = 1 Then
                try = findid(cmps$)
                If Error_Happened Then Exit Function
                Do While try
                    If (id.arraytype) Then
                        l$ = RTrim$(id.cn)
                        arraydesc = currentid: scope2$ = scope$
                        Exit Do
                    End If
                    If try = 2 Then findanotherid = 1: try = findid(cmps$) Else try = 0
                    If Error_Happened Then Exit Function
                Loop
            End If
            n$ = scope2$ + "ARRAY_" + n$

            'nume = allocarray(n$, elements$, 4)
            'IF arraydesc THEN goto dim2exitfunc
            'clearid

            If f = 1 Then

                If Len(elements$) = 1 And Asc(elements$) = 63 Then '"?"
                    E = arrayelementslist(idn + 1): If E Then elements$ = elements$ + str2$(E) 'eg. "?3" for a 3 dimensional array
                End If
                nume = allocarray(n$, elements$, 4, 0)
                If Error_Happened Then Exit Function
                l$ = l$ + sp + tlayout$
                If arraydesc Then GoTo dim2exitfunc
                clearid

            Else
                clearid
                If elements$ = "?" Then
                    nume = -1
                    id.linkid = glinkid
                    id.linkarg = glinkarg
                Else
                    nume = Val(elements$)
                End If
            End If

            id.arraytype = LONGTYPE: If unsgn Then id.arraytype = id.arraytype + ISUNSIGNED
            If cmemlist(idn + 1) Then id.arraytype = id.arraytype + ISINCONVENTIONALMEMORY
            If nume > 65536 Then nume = nume - 65536: id.staticarray = 1

            id.arrayelements = nume
            id.callname = n$
        Else
            n$ = scope2$ + n$
            clearid
            id.t = LONGTYPE: If unsgn Then id.t = id.t + ISUNSIGNED
            If f = 1 Then WriteBufLine defdatahandle, ct$ + " *" + n$ + "=NULL;"
            If f = 1 Then WriteBufLine DataTxtBuf, "if(" + n$ + "==NULL){"
            If cmemlist(idn + 1) Then
                id.t = id.t + ISINCONVENTIONALMEMORY
                If f = 1 Then WriteBufLine DataTxtBuf, "cmem_sp-=4;"
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)(dblock+cmem_sp);"
                If f = 1 Then WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
            Else
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)mem_static_malloc(4);"
            End If
            If f = 1 Then WriteBufLine DataTxtBuf, "*" + n$ + "=0;"
            If f = 1 Then WriteBufLine DataTxtBuf, "}"
        End If
        id.n = cvarname$
        If method = 0 Then
            If unsgn Then id.mayhave = "~&" Else id.mayhave = "&"
        End If
        If method = 1 Then
            If unsgn Then id.musthave = "~&" Else id.musthave = "&"
        End If
        id.callname = n$
        regid
        vWatchVariable n$, 0
        If Error_Happened Then Exit Function
        GoTo dim2exitfunc
    End If

    If typ$ = "_INTEGER64" Or (typ$ = "INTEGER64" And qb64prefix_set = 1) Then
        ct$ = "int64"
        If unsgn Then n$ = "U": ct$ = "u" + ct$
        n$ = n$ + "INTEGER64_" + varname$
        If elements$ <> "" Then
            arraydesc = 0
            cmps$ = varname$: If unsgn Then cmps$ = cmps$ + "~"
            cmps$ = cmps$ + "&&"
            If f = 1 Then
                try = findid(cmps$)
                If Error_Happened Then Exit Function
                Do While try
                    If (id.arraytype) Then
                        l$ = RTrim$(id.cn)
                        arraydesc = currentid: scope2$ = scope$
                        Exit Do
                    End If
                    If try = 2 Then findanotherid = 1: try = findid(cmps$) Else try = 0
                    If Error_Happened Then Exit Function
                Loop
            End If
            n$ = scope2$ + "ARRAY_" + n$

            'nume = allocarray(n$, elements$, 8)
            'IF arraydesc THEN goto dim2exitfunc
            'clearid

            If f = 1 Then

                If Len(elements$) = 1 And Asc(elements$) = 63 Then '"?"
                    E = arrayelementslist(idn + 1): If E Then elements$ = elements$ + str2$(E) 'eg. "?3" for a 3 dimensional array
                End If
                nume = allocarray(n$, elements$, 8, 0)
                If Error_Happened Then Exit Function
                l$ = l$ + sp + tlayout$
                If arraydesc Then GoTo dim2exitfunc
                clearid

            Else
                clearid
                If elements$ = "?" Then
                    nume = -1
                    id.linkid = glinkid
                    id.linkarg = glinkarg
                Else
                    nume = Val(elements$)
                End If
            End If

            id.arraytype = INTEGER64TYPE: If unsgn Then id.arraytype = id.arraytype + ISUNSIGNED
            If cmemlist(idn + 1) Then id.arraytype = id.arraytype + ISINCONVENTIONALMEMORY
            If nume > 65536 Then nume = nume - 65536: id.staticarray = 1

            id.arrayelements = nume
            id.callname = n$
        Else
            n$ = scope2$ + n$
            clearid
            id.t = INTEGER64TYPE: If unsgn Then id.t = id.t + ISUNSIGNED
            If f = 1 Then WriteBufLine defdatahandle, ct$ + " *" + n$ + "=NULL;"
            If f = 1 Then WriteBufLine DataTxtBuf, "if(" + n$ + "==NULL){"
            If cmemlist(idn + 1) Then
                id.t = id.t + ISINCONVENTIONALMEMORY
                If f = 1 Then WriteBufLine DataTxtBuf, "cmem_sp-=8;"
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)(dblock+cmem_sp);"
                If f = 1 Then WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
            Else
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)mem_static_malloc(8);"
            End If
            If f = 1 Then WriteBufLine DataTxtBuf, "*" + n$ + "=0;"
            If f = 1 Then WriteBufLine DataTxtBuf, "}"
        End If
        id.n = cvarname$
        If method = 0 Then
            If unsgn Then id.mayhave = "~&&" Else id.mayhave = "&&"
        End If
        If method = 1 Then
            If unsgn Then id.musthave = "~&&" Else id.musthave = "&&"
        End If
        id.callname = n$
        regid
        vWatchVariable n$, 0
        If Error_Happened Then Exit Function
        GoTo dim2exitfunc
    End If

    If unsgn = 1 Then Give_Error "Type cannot be unsigned": Exit Function

    If typ$ = "SINGLE" Then
        ct$ = "float"
        n$ = n$ + "SINGLE_" + varname$
        If elements$ <> "" Then
            arraydesc = 0
            cmps$ = varname$ + "!"
            If f = 1 Then
                try = findid(cmps$)
                If Error_Happened Then Exit Function
                Do While try
                    If (id.arraytype) Then
                        l$ = RTrim$(id.cn)
                        arraydesc = currentid: scope2$ = scope$
                        Exit Do
                    End If
                    If try = 2 Then findanotherid = 1: try = findid(cmps$) Else try = 0
                    If Error_Happened Then Exit Function
                Loop
            End If
            n$ = scope2$ + "ARRAY_" + n$

            'nume = allocarray(n$, elements$, 4)
            'IF arraydesc THEN goto dim2exitfunc
            'clearid

            If f = 1 Then

                If Len(elements$) = 1 And Asc(elements$) = 63 Then '"?"
                    E = arrayelementslist(idn + 1): If E Then elements$ = elements$ + str2$(E) 'eg. "?3" for a 3 dimensional array
                End If
                nume = allocarray(n$, elements$, 4, 0)
                If Error_Happened Then Exit Function
                l$ = l$ + sp + tlayout$
                If arraydesc Then GoTo dim2exitfunc
                clearid

            Else
                clearid
                If elements$ = "?" Then
                    nume = -1
                    id.linkid = glinkid
                    id.linkarg = glinkarg
                Else
                    nume = Val(elements$)
                End If
            End If

            id.arraytype = SINGLETYPE
            If cmemlist(idn + 1) Then id.arraytype = id.arraytype + ISINCONVENTIONALMEMORY
            If nume > 65536 Then nume = nume - 65536: id.staticarray = 1

            id.arrayelements = nume
            id.callname = n$
        Else
            n$ = scope2$ + n$
            clearid
            id.t = SINGLETYPE
            If f = 1 Then WriteBufLine defdatahandle, ct$ + " *" + n$ + "=NULL;"
            If f = 1 Then WriteBufLine DataTxtBuf, "if(" + n$ + "==NULL){"
            If cmemlist(idn + 1) Then
                id.t = id.t + ISINCONVENTIONALMEMORY
                If f = 1 Then WriteBufLine DataTxtBuf, "cmem_sp-=4;"
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)(dblock+cmem_sp);"
                If f = 1 Then WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
            Else
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)mem_static_malloc(4);"
            End If
            If f = 1 Then WriteBufLine DataTxtBuf, "*" + n$ + "=0;"
            If f = 1 Then WriteBufLine DataTxtBuf, "}"
        End If
        id.n = cvarname$
        If method = 0 Then
            id.mayhave = "!"
        End If
        If method = 1 Then
            id.musthave = "!"
        End If
        id.callname = n$
        regid
        vWatchVariable n$, 0
        If Error_Happened Then Exit Function
        GoTo dim2exitfunc
    End If

    If typ$ = "DOUBLE" Then
        ct$ = "double"
        n$ = n$ + "DOUBLE_" + varname$
        If elements$ <> "" Then
            arraydesc = 0
            cmps$ = varname$ + "#"
            If f = 1 Then
                try = findid(cmps$)
                If Error_Happened Then Exit Function
                Do While try
                    If (id.arraytype) Then
                        l$ = RTrim$(id.cn)
                        arraydesc = currentid: scope2$ = scope$
                        Exit Do
                    End If
                    If try = 2 Then findanotherid = 1: try = findid(cmps$) Else try = 0
                    If Error_Happened Then Exit Function
                Loop
            End If
            n$ = scope2$ + "ARRAY_" + n$

            'nume = allocarray(n$, elements$, 8)
            'IF arraydesc THEN goto dim2exitfunc
            'clearid

            If f = 1 Then

                If Len(elements$) = 1 And Asc(elements$) = 63 Then '"?"
                    E = arrayelementslist(idn + 1): If E Then elements$ = elements$ + str2$(E) 'eg. "?3" for a 3 dimensional array
                End If
                nume = allocarray(n$, elements$, 8, 0)
                If Error_Happened Then Exit Function
                l$ = l$ + sp + tlayout$
                If arraydesc Then GoTo dim2exitfunc
                clearid

            Else
                clearid
                If elements$ = "?" Then
                    nume = -1
                    id.linkid = glinkid
                    id.linkarg = glinkarg
                Else
                    nume = Val(elements$)
                End If
            End If

            id.arraytype = DOUBLETYPE
            If cmemlist(idn + 1) Then id.arraytype = id.arraytype + ISINCONVENTIONALMEMORY
            If nume > 65536 Then nume = nume - 65536: id.staticarray = 1

            id.arrayelements = nume
            id.callname = n$
        Else
            n$ = scope2$ + n$
            clearid
            id.t = DOUBLETYPE
            If f = 1 Then WriteBufLine defdatahandle, ct$ + " *" + n$ + "=NULL;"
            If f = 1 Then WriteBufLine DataTxtBuf, "if(" + n$ + "==NULL){"
            If cmemlist(idn + 1) Then
                id.t = id.t + ISINCONVENTIONALMEMORY
                If f = 1 Then WriteBufLine DataTxtBuf, "cmem_sp-=8;"
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)(dblock+cmem_sp);"
                If f = 1 Then WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
            Else
                If f = 1 Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)mem_static_malloc(8);"
            End If
            If f = 1 Then WriteBufLine DataTxtBuf, "*" + n$ + "=0;"
            If f = 1 Then WriteBufLine DataTxtBuf, "}"
        End If
        id.n = cvarname$
        If method = 0 Then
            id.mayhave = "#"
        End If
        If method = 1 Then
            id.musthave = "#"
        End If
        id.callname = n$
        regid
        vWatchVariable n$, 0
        If Error_Happened Then Exit Function
        GoTo dim2exitfunc
    End If

    If typ$ = "_FLOAT" Or (typ$ = "FLOAT" And qb64prefix_set = 1) Then
        ct$ = "long double"
        n$ = n$ + "FLOAT_" + varname$
        If elements$ <> "" Then
            arraydesc = 0
            cmps$ = varname$ + "##"
            If f = 1 Then
                try = findid(cmps$)
                If Error_Happened Then Exit Function
                Do While try
                    If (id.arraytype) Then
                        l$ = RTrim$(id.cn)
                        arraydesc = currentid: scope2$ = scope$
                        Exit Do
                    End If
                    If try = 2 Then findanotherid = 1: try = findid(cmps$) Else try = 0
                    If Error_Happened Then Exit Function
                Loop
            End If
            n$ = scope2$ + "ARRAY_" + n$

            'nume = allocarray(n$, elements$, 32)
            'IF arraydesc THEN goto dim2exitfunc
            'clearid

            If f = 1 Then

                If Len(elements$) = 1 And Asc(elements$) = 63 Then '"?"
                    E = arrayelementslist(idn + 1): If E Then elements$ = elements$ + str2$(E) 'eg. "?3" for a 3 dimensional array
                End If
                nume = allocarray(n$, elements$, 32, 0)
                If Error_Happened Then Exit Function
                l$ = l$ + sp + tlayout$
                If arraydesc Then GoTo dim2exitfunc
                clearid

            Else
                clearid
                If elements$ = "?" Then
                    nume = -1
                    id.linkid = glinkid
                    id.linkarg = glinkarg
                Else
                    nume = Val(elements$)
                End If
            End If

            id.arraytype = FLOATTYPE
            If cmemlist(idn + 1) Then id.arraytype = id.arraytype + ISINCONVENTIONALMEMORY
            If nume > 65536 Then nume = nume - 65536: id.staticarray = 1

            id.arrayelements = nume
            id.callname = n$
        Else
            n$ = scope2$ + n$
            clearid
            id.t = FLOATTYPE
            If f Then WriteBufLine defdatahandle, ct$ + " *" + n$ + "=NULL;"
            If f Then WriteBufLine DataTxtBuf, "if(" + n$ + "==NULL){"
            If cmemlist(idn + 1) Then
                id.t = id.t + ISINCONVENTIONALMEMORY
                If f Then WriteBufLine DataTxtBuf, "cmem_sp-=32;"
                If f Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)(dblock+cmem_sp);"
                If f Then WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
            Else
                If f Then WriteBufLine DataTxtBuf, n$ + "=(" + ct$ + "*)mem_static_malloc(32);"
            End If
            If f Then WriteBufLine DataTxtBuf, "*" + n$ + "=0;"
            If f Then WriteBufLine DataTxtBuf, "}"
        End If
        id.n = cvarname$
        If method = 0 Then
            id.mayhave = "##"
        End If
        If method = 1 Then
            id.musthave = "##"
        End If
        id.callname = n$
        regid
        vWatchVariable n$, 0
        If Error_Happened Then Exit Function
        GoTo dim2exitfunc
    End If

    Give_Error "Unknown type": Exit Function
    dim2exitfunc:

    bypassNextVariable = 0

    If dimsfarray Then
        ids(idn).sfid = glinkid
        ids(idn).sfarg = glinkarg
    End If

    'restore STATIC state
    If dimstatic <> 0 And dimshared = 0 Then
        DataTxtBuf = OpenBuffer%("A", tmpdir$ + "data" + str2$(subfuncn) + ".txt")
        FreeTxtBuf = OpenBuffer%("A", tmpdir$ + "free" + str2$(subfuncn) + ".txt")
        defdatahandle = DataTxtBuf
    End If

    tlayout$ = l$

End Function


Function udtreference$ (o$, a$, typ As Long)
    'UDT REFERENCE FORMAT
    'idno|udtno|udtelementno|byteoffset
    '     ^udt of the element, not of the id

    obak$ = o$

    'PRINT "called udtreference!"


    r$ = str2$(currentid) + sp3


    o = 0 'the fixed/known part of the offset

    incmem = 0
    If id.t Then
        u = id.t And 511
        If id.t And ISINCONVENTIONALMEMORY Then incmem = 1
    Else
        u = id.arraytype And 511
        If id.arraytype And ISINCONVENTIONALMEMORY Then incmem = 1
    End If
    E = 0

    n = numelements(a$)
    If n = 0 Then GoTo fulludt

    i = 1
    udtfindelenext:
    If getelement$(a$, i) <> "." Then Give_Error "Expected .": Exit Function
    i = i + 1
    n$ = getelement$(a$, i)
    nsym$ = removesymbol(n$): If Len(nsym$) Then ntyp = typname2typ(nsym$): ntypsize = typname2typsize
    If Error_Happened Then Exit Function

    If n$ = "" Then Give_Error "Expected .elementname": Exit Function
    udtfindele:
    If E = 0 Then E = udtxnext(u) Else E = udtenext(E)
    If E = 0 Then Give_Error "Element not defined": Exit Function
    n2$ = RTrim$(udtename(E))
    If udtebytealign(E) Then
        If o Mod 8 Then o = o + (8 - (o Mod 8))
    End If

    If n$ <> n2$ Then
        'increment fixed offset
        o = o + udtesize(E)
        GoTo udtfindele
    End If

    'check symbol after element's name (if given) is correct
    If Len(nsym$) Then

        If udtetype(E) And ISUDT Then Give_Error "Invalid symbol after user defined type": Exit Function
        If ntyp <> udtetype(E) Or ntypsize <> udtetypesize(E) Then
            If nsym$ = "$" And ((udtetype(E) And ISFIXEDLENGTH) <> 0) Then GoTo correctsymbol
            Give_Error "Incorrect symbol after element name": Exit Function
        End If
    End If
    correctsymbol:

    'Move into another UDT structure?
    If i <> n Then
        If (udtetype(E) And ISUDT) = 0 Then Give_Error "Expected user defined type": Exit Function
        u = udtetype(E) And 511
        E = 0
        i = i + 1
        GoTo udtfindelenext
    End If

    'Change e reference to u | 0 reference?
    If udtetype(E) And ISUDT Then
        u = udtetype(E) And 511
        E = 0
    End If

    fulludt:

    r$ = r$ + str2$(u) + sp3 + str2$(E) + sp3

    If o Mod 8 Then Give_Error "QB64 cannot handle bit offsets within user defined types": Exit Function
    o = o \ 8

    If o$ <> "" Then
        If o <> 0 Then 'dont add an unnecessary 0
            o$ = o$ + "+" + str2$(o)
        End If
    Else
        o$ = str2$(o)
    End If

    r$ = r$ + o$

    udtreference$ = r$
    typ = udtetype(E) + ISUDT + ISREFERENCE

    'full udt override:
    If E = 0 Then
        typ = u + ISUDT + ISREFERENCE
    End If

    If obak$ <> "" Then typ = typ + ISARRAY
    If incmem Then typ = typ + ISINCONVENTIONALMEMORY

    'print "UDTREF:"+r$+","+str2$(typ)

End Function

Function evaluate$ (a2$, typ As Long)
    Dim block(1000) As String
    Dim evaledblock(1000) As Integer
    Dim blocktype(1000) As Long
    'typ IS A RETURN VALUE
    '''DIM cli(15) AS INTEGER
    a$ = a2$
    typ = -1

    If Debug Then Print #9, "evaluating:[" + a2$ + "]"
    If a2$ = "" Then Give_Error "Syntax error": Exit Function






    '''cl$ = classify(a$)

    blockn = 0
    n = numelements(a$)
    b = 0 'bracketting level
    For i = 1 To n

        reevaluate:




        l$ = getelement(a$, i)


        If Debug Then Print #9, "#*#*#* reevaluating:" + l$, i


        If i <> n Then nextl$ = getelement(a$, i + 1) Else nextl$ = ""

        '''getclass cl$, i, cli()

        If b = 0 Then 'don't evaluate anything within brackets

            If Debug Then Print #9, l$

            l2$ = l$ 'pure version of l$
            For try_method = 1 To 4
                l$ = l2$
                If try_method = 2 Or try_method = 4 Then
                    If Error_Happened Then Exit Function
                    dtyp$ = removesymbol(l$): If Error_Happened Then dtyp$ = "": Error_Happened = 0
                    If Len(dtyp$) = 0 Then
                        If isoperator(l$) = 0 Then
                            If isvalidvariable(l$) Then
                                If Left$(l$, 1) = "_" Then v = 27 Else v = Asc(UCase$(l$)) - 64
                                l$ = l$ + defineextaz(v)
                            End If
                        End If
                    Else
                        l$ = l2$
                    End If
                End If
                try = findid(l$)
                If Error_Happened Then Exit Function
                Do While try

                    If Debug Then Print #9, try

                    'is l$ an array?
                    If nextl$ = "(" Then
                        If id.arraytype Then
                            If (subfuncn = id.insubfuncn And try_method <= 2) Or try_method >= 3 Then
                                arrayid = currentid
                                constequation = 0
                                i2 = i + 2
                                b2 = 0
                                evalnextele3:
                                l2$ = getelement(a$, i2)
                                If l2$ = "(" Then b2 = b2 + 1
                                If l2$ = ")" Then
                                    b2 = b2 - 1
                                    If b2 = -1 Then
                                        c$ = arrayreference(getelements$(a$, i + 2, i2 - 1), typ2)
                                        If Error_Happened Then Exit Function
                                        i = i2

                                        'UDT
                                        If typ2 And ISUDT Then
                                            'print "arrayref returned:"+c$
                                            getid arrayid
                                            If Error_Happened Then Exit Function
                                            o$ = Right$(c$, Len(c$) - InStr(c$, sp3))
                                            'change o$ to a byte offset if necessary
                                            u = typ2 And 511
                                            s = udtxsize(u)
                                            If udtxbytealign(u) Then
                                                If s Mod 8 Then s = s + (8 - (s Mod 8)) 'round up to nearest byte
                                                s = s \ 8
                                            End If
                                            o$ = "(" + o$ + ")*" + str2$(s)
                                            'print "calling evaludt with o$:"+o$
                                            GoTo evaludt
                                        End If

                                        GoTo evalednextele3
                                    End If
                                End If
                                i2 = i2 + 1
                                GoTo evalnextele3
                                evalednextele3:
                                blockn = blockn + 1
                                block(blockn) = c$
                                evaledblock(blockn) = 2
                                blocktype(blockn) = typ2
                                If (typ2 And ISSTRING) Then stringprocessinghappened = 1
                                GoTo evaled
                            End If
                        End If

                    Else
                        'not followed by "("

                        'is l$ a simple variable?
                        If id.t <> 0 And (id.t And ISUDT) = 0 Then
                            If (subfuncn = id.insubfuncn And try_method <= 2) Or try_method >= 3 Then
                                constequation = 0
                                blockn = blockn + 1
                                makeidrefer block(blockn), blocktype(blockn)
                                If (blocktype(blockn) And ISSTRING) Then stringprocessinghappened = 1
                                evaledblock(blockn) = 2
                                GoTo evaled
                            End If
                        End If

                        'is l$ a UDT?
                        If id.t And ISUDT Then
                            If (subfuncn = id.insubfuncn And try_method <= 2) Or try_method >= 3 Then
                                constequation = 0
                                o$ = ""
                                evaludt:
                                b2 = 0
                                i3 = i + 1
                                For i2 = i3 To n
                                    e2$ = getelement(a$, i2)
                                    If e2$ = "(" Then b2 = b2 + 1
                                    If b2 = 0 Then
                                        If e2$ = ")" Or isoperator(e2$) Then
                                            i4 = i2 - 1
                                            GoTo gotudt
                                        End If
                                    End If
                                    If e2$ = ")" Then b2 = b2 - 1
                                Next
                                i4 = n
                                gotudt:
                                If i4 < i3 Then e$ = "" Else e$ = getelements$(a$, i3, i4)
                                'PRINT "UDTREFERENCE:";l$; e$
                                e$ = udtreference(o$, e$, typ2)
                                If Error_Happened Then Exit Function
                                i = i4
                                blockn = blockn + 1
                                block(blockn) = e$
                                evaledblock(blockn) = 2
                                blocktype(blockn) = typ2
                                'is the following next necessary?
                                'IF (typ2 AND ISSTRING) THEN stringprocessinghappened = 1
                                GoTo evaled
                            End If
                        End If

                    End If '"(" or no "("

                    'is l$ a function?
                    If id.subfunc = 1 Then
                        constequation = 0
                        If getelement(a$, i + 1) = "(" Then
                            i2 = i + 2
                            b2 = 0
                            args = 1
                            evalnextele:
                            l2$ = getelement(a$, i2)
                            If l2$ = "(" Then b2 = b2 + 1
                            If l2$ = ")" Then
                                b2 = b2 - 1
                                If b2 = -1 Then
                                    If i2 = i + 2 Then Give_Error "Expected (...)": Exit Function
                                    c$ = evaluatefunc(getelements$(a$, i + 2, i2 - 1), args, typ2)
                                    If Error_Happened Then Exit Function
                                    i = i2
                                    GoTo evalednextele
                                End If
                            End If
                            If l2$ = "," And b2 = 0 Then args = args + 1
                            i2 = i2 + 1
                            GoTo evalnextele
                        Else
                            'no brackets
                            c$ = evaluatefunc("", 0, typ2)
                            If Error_Happened Then Exit Function
                        End If
                        evalednextele:
                        blockn = blockn + 1
                        block(blockn) = c$
                        evaledblock(blockn) = 2
                        blocktype(blockn) = typ2
                        If (typ2 And ISSTRING) Then stringprocessinghappened = 1
                        GoTo evaled
                    End If

                    If try = 2 Then findanotherid = 1: try = findid(l$) Else try = 0
                    If Error_Happened Then Exit Function
                Loop
            Next 'try method (1-4)

            'assume l$ an undefined array?

            If i <> n Then
                If getelement$(a$, i + 1) = "(" Then
                    If isoperator(l$) = 0 Then
                        If isvalidvariable(l$) Then
                            If Debug Then
                                Print #9, "**************"
                                Print #9, "about to auto-create array:" + l$, i
                                Print #9, "**************"
                            End If
                            dtyp$ = removesymbol(l$)
                            If Error_Happened Then Exit Function
                            'count the number of elements
                            nume = 1
                            b2 = 0
                            For i2 = i + 2 To n
                                e$ = getelement(a$, i2)
                                If e$ = "(" Then b2 = b2 + 1
                                If b2 = 0 And e$ = "," Then nume = nume + 1
                                If e$ = ")" Then b2 = b2 - 1
                                If b2 = -1 Then Exit For
                            Next
                            fakee$ = "10": For i2 = 2 To nume: fakee$ = fakee$ + sp + "," + sp + "10": Next
                            If Debug Then Print #9, "evaluate:creating undefined array using dim2(" + l$ + "," + dtyp$ + ",1," + fakee$ + ")"
                            If optionexplicit Or optionexplicitarray Then Give_Error "Array '" + l$ + "' (" + symbol2fulltypename$(dtyp$) + ") not defined": Exit Function
                            If Error_Happened Then Exit Function
                            olddimstatic = dimstatic
                            method = 1
                            If subfuncn Then
                                autoarray = 1 'move dimensioning of auto array to data???.txt from inline
                                'static array declared by STATIC name()?
                                'check if varname is on the static list
                                xi = 1
                                For x = 1 To staticarraylistn
                                    varname2$ = getelement$(staticarraylist, xi): xi = xi + 1
                                    typ2$ = getelement$(staticarraylist, xi): xi = xi + 1
                                    dimmethod2 = Val(getelement$(staticarraylist, xi)): xi = xi + 1
                                    'check if they are similar
                                    If UCase$(l$) = UCase$(varname2$) Then
                                        l3$ = l2$: s$ = removesymbol(l3$)
                                        If symbol2fulltypename$(dtyp$) = typ2$ Or (dimmethod2 = 0 And s$ = "") Then
                                            If Error_Happened Then Exit Function
                                            'adopt properties
                                            l$ = varname2$
                                            dtyp$ = typ2$
                                            method = dimmethod2
                                            dimstatic = 3
                                        End If 'typ
                                        If Error_Happened Then Exit Function
                                    End If 'varname
                                Next
                            End If 'subfuncn
                            bypassNextVariable = -1
                            ignore = dim2(l$, dtyp$, method, fakee$)
                            If Error_Happened Then Exit Function
                            dimstatic = olddimstatic
                            If Debug Then Print #9, "#*#*#* dim2 has returned!!!"
                            GoTo reevaluate
                        End If
                    End If
                End If
            End If

            l$ = l2$ 'restore l$

        End If 'b=0

        If l$ = "(" Then
            If b = 0 Then i1 = i + 1
            b = b + 1
        End If

        If b = 0 Then
            blockn = blockn + 1
            block(blockn) = l$
            evaledblock(blockn) = 0
        End If

        If l$ = ")" Then
            b = b - 1
            If b = 0 Then
                c$ = evaluate(getelements$(a$, i1, i - 1), typ2)
                If Error_Happened Then Exit Function
                If (typ2 And ISSTRING) Then stringprocessinghappened = 1
                blockn = blockn + 1
                If (typ2 And ISPOINTER) Then
                    block(blockn) = c$
                Else
                    block(blockn) = "(" + c$ + ")"
                End If
                evaledblock(blockn) = 1
                blocktype(blockn) = typ2
            End If
        End If
        evaled:
    Next

    r$ = "" 'return value

    If Debug Then Print #9, "evaluated blocks:";
    For i = 1 To blockn
        If i <> blockn Then
            If Debug Then Print #9, block(i) + Chr$(219);
        Else
            If Debug Then Print #9, block(i)
        End If
    Next



    'identify any referencable values
    For i = 1 To blockn
        If isoperator(block(i)) = 0 Then
            If evaledblock(i) = 0 Then

                'a number?
                c = Asc(Left$(block(i), 1))
                If c = 45 Or (c >= 48 And c <= 57) Then
                    num$ = block(i)
                    'a float?
                    f = 0
                    x = InStr(num$, "E")
                    If x Then
                        f = 1: blocktype(i) = SINGLETYPE - ISPOINTER
                    Else
                        x = InStr(num$, "D")
                        If x Then
                            f = 2: blocktype(i) = DOUBLETYPE - ISPOINTER
                        Else
                            x = InStr(num$, "F")
                            If x Then
                                f = 3: blocktype(i) = FLOATTYPE - ISPOINTER
                            End If
                        End If
                    End If
                    If f Then
                        'float
                        If f = 2 Or f = 3 Then Mid$(num$, x, 1) = "E" 'D,F invalid in C++
                        If f = 3 Then num$ = num$ + "L" 'otherwise number is rounded to a double
                    Else
                        'integer
                        blocktype(i) = typname2typ(removesymbol$(num$))
                        If Error_Happened Then Exit Function
                        If blocktype(i) And ISPOINTER Then blocktype(i) = blocktype(i) - ISPOINTER
                        If (blocktype(i) And 511) > 32 Then
                            If blocktype(i) And ISUNSIGNED Then num$ = num$ + "ull" Else num$ = num$ + "ll"
                        End If
                    End If
                    block(i) = " " + num$ + " " 'pad with spaces to avoid C++ computation errors
                    evaledblock(i) = 1
                    GoTo evaledblock
                End If

                'number?
                'fc = ASC(LEFT$(block(i), 1))
                'IF fc = 45 OR (fc >= 48 AND fc <= 57) THEN '- or 0-9
                ''it's a number
                ''check for an extension, if none, assume integer
                'blocktype(i) = INTEGER64TYPE - ISPOINTER
                'tblock$ = " " + block(i)
                'IF RIGHT$(tblock$, 2) = "##" THEN blocktype(i) = FLOATTYPE - ISPOINTER: block(i) = LEFT$(block(i), LEN(block$(i)) - 2): GOTO evfltnum
                'IF RIGHT$(tblock$, 1) = "#" THEN blocktype(i) = DOUBLETYPE - ISPOINTER: block(i) = LEFT$(block(i), LEN(block$(i)) - 1): GOTO evfltnum
                'IF RIGHT$(tblock$, 1) = "!" THEN blocktype(i) = SINGLETYPE - ISPOINTER: block(i) = LEFT$(block(i), LEN(block$(i)) - 1): GOTO evfltnum
                '
                ''C++ 32bit unsigned to signed 64bit
                'IF INSTR(block(i),".")=0 THEN
                '
                'negated=0
                'if left$(block(i),1)="-" then block(i)=right$(block(i),len(block(i))-1):negated=1
                '
                'if left$(block(i),2)="0x" then 'hex
                'if len(block(i))=10 then
                'if block(i)>="0x80000000" and block(i)<="0xFFFFFFFF" then block(i)="(int64)"+block(i): goto evnum
                'end if
                'if len(block(i))>10 then block(i)=block(i)+"ll": goto evnum
                'goto evnum
                'end if
                '
                'if left$(block(i),1)="0" then 'octal
                'if len(block(i))=12 then
                'if block(i)>="020000000000" and block(i)<="037777777777" then block(i)="(int64)"+block(i): goto evnum
                'if block(i)>"037777777777" then block(i)=block(i)+"ll": goto evnum
                'end if
                'if len(block(i))>12 then block(i)=block(i)+"ll": goto evnum
                'goto evnum
                'end if
                '
                ''decimal
                'if len(block(i))=10 then
                'if block(i)>="2147483648" and block(i)<="4294967295" then block(i)="(int64)"+block(i): goto evnum
                'if block(i)>"4294967295" then block(i)=block(i)+"ll": goto evnum
                'end if
                'if len(block(i))>10 then block(i)=block(i)+"ll"
                '
                'evnum:
                '
                'if negated=1 then block(i)="-"+block(i)
                '
                'END IF
                '
                'evfltnum:
                '
                'block(i) = " " + block(i)+" "
                'evaledblock(i) = 1
                'GOTO evaledblock
                'END IF

                'a typed string in ""
                If Left$(block(i), 1) = Chr$(34) Then
                    If Right$(block(i), 1) <> Chr$(34) Then
                        block(i) = "qbs_new_txt_len(" + block(i) + ")"
                    Else
                        block(i) = "qbs_new_txt(" + block(i) + ")"
                    End If
                    blocktype(i) = ISSTRING
                    evaledblock(i) = 1
                    stringprocessinghappened = 1
                    GoTo evaledblock
                End If

                'create variable
                If isvalidvariable(block(i)) Then
                    x$ = block(i)

                    typ$ = removesymbol$(x$)
                    If Error_Happened Then Exit Function

                    'add symbol extension if none given
                    If Len(typ$) = 0 Then
                        If Left$(x$, 1) = "_" Then v = 27 Else v = Asc(UCase$(x$)) - 64
                        typ$ = defineextaz(v)
                    End If

                    'check that it hasn't just been created within this loop (a=b+b)
                    try = findid(x$ + typ$)
                    If Error_Happened Then Exit Function
                    Do While try
                        If Debug Then Print #9, try
                        If id.t <> 0 And (id.t And ISUDT) = 0 Then 'is x$ a simple variable?
                            GoTo simplevarfound
                        End If
                        If try = 2 Then findanotherid = 1: try = findid(x$ + typ$) Else try = 0
                        If Error_Happened Then Exit Function
                    Loop

                    If Debug Then Print #9, "CREATING VARIABLE:" + x$
                    If optionexplicit Then Give_Error "Variable '" + x$ + "' (" + symbol2fulltypename$(typ$) + ") not defined": Exit Function
                    bypassNextVariable = -1
                    retval = dim2(x$, typ$, 1, "")
                    manageVariableList "", vWatchNewVariable$, 0, 3
                    If Error_Happened Then Exit Function

                    simplevarfound:
                    constequation = 0
                    makeidrefer block(i), blocktype(i)
                    If (blocktype(i) And ISSTRING) Then stringprocessinghappened = 1
                    If blockn = 1 Then
                        If (blocktype(i) And ISREFERENCE) Then GoTo returnpointer
                    End If
                    'reference value
                    block(i) = refer(block(i), blocktype(i), 0): If Error_Happened Then Exit Function
                    evaledblock(i) = 1
                    GoTo evaledblock
                End If
                Give_Error "Invalid expression": Exit Function

            Else
                If (blocktype(i) And ISREFERENCE) Then
                    If blockn = 1 Then GoTo returnpointer

                    'if blocktype(i) and ISUDT then PRINT "UDT passed to refer by evaluate"

                    block(i) = refer(block(i), blocktype(i), 0)
                    If Error_Happened Then Exit Function

                End If

            End If
        End If
        evaledblock:
    Next


    'return a POINTER if possible
    If blockn = 1 Then
        If evaledblock(1) Then
            If (blocktype(1) And ISREFERENCE) Then
                returnpointer:
                If (blocktype(1) And ISSTRING) Then stringprocessinghappened = 1
                If Debug Then Print #9, "evaluated reference:" + block(1)
                typ = blocktype(1)
                evaluate$ = block(1)
                Exit Function
            End If
        End If
    End If
    'it cannot be returned as a pointer








    If Debug Then Print #9, "applying operators:";


    If typ = -1 Then
        typ = blocktype(1) 'init typ with first blocktype


        If isoperator(block(1)) Then 'but what if it starts with a UNARY operator?
            typ = blocktype(2) 'init typ with second blocktype
        End If
    End If

    nonop = 0
    For i = 1 To blockn

        If evaledblock(i) = 0 Then
            isop = isoperator(block(i))
            If isop Then
                nonop = 0

                constequation = 0

                'operator found
                o$ = block(i)
                u = operatorusage(o$, typ, i$, lhstyp, rhstyp, result)

                If u <> 5 Then 'not unary
                    nonop = 1
                    If i = 1 Or evaledblock(i - 1) = 0 Then
                        If i = 1 And blockn = 1 And o$ = "-" Then Give_Error "Expected variable/value after '" + UCase$(o$) + "'": Exit Function 'guess - is neg in this case
                        Give_Error "Expected variable/value before '" + UCase$(o$) + "'": Exit Function
                    End If
                End If
                If i = blockn Or evaledblock(i + 1) = 0 Then Give_Error "Expected variable/value after '" + UCase$(o$) + "'": Exit Function

                'lhstyp & rhstyp bit-field values
                '1=integeral
                '2=floating point
                '4=string
                '8=bool *only used for result

                oldtyp = typ
                newtyp = blocktype(i + 1)

                'IF block(i - 1) = "6" THEN
                'PRINT o$
                'PRINT oldtyp AND ISFLOAT
                'PRINT blocktype(i - 1) AND ISFLOAT
                'END
                'END IF



                'numeric->string is illegal!
                If (typ And ISSTRING) = 0 And (newtyp And ISSTRING) <> 0 Then
                    Give_Error "Cannot convert number to string": Exit Function
                End If

                'Offset protection: Override conversion rules for operator as necessary
                offsetmode = 0
                offsetcvi = 0
                If (oldtyp And ISOFFSET) <> 0 Or (newtyp And ISOFFSET) <> 0 Then
                    offsetmode = 2
                    If newtyp And ISOFFSET Then
                        If (newtyp And ISUNSIGNED) = 0 Then offsetmode = 1
                    End If
                    If oldtyp And ISOFFSET Then
                        If (oldtyp And ISUNSIGNED) = 0 Then offsetmode = 1
                    End If

                    'depending on the operater we may do things differently
                    'the default method is convert both sides to integer first
                    'but these operators are different: * / ^
                    If o$ = "*" Or o$ = "/" Or o$ = "^" Then
                        If o$ = "*" Or o$ = "^" Then
                            'for mult, if either side is a float cast integers to 'long double's first
                            If (newtyp And ISFLOAT) <> 0 Or (oldtyp And ISFLOAT) <> 0 Then
                                offsetcvi = 1
                                If (oldtyp And ISFLOAT) = 0 Then lhstyp = 2
                                If (newtyp And ISFLOAT) = 0 Then rhstyp = 2
                            End If
                        End If
                        If o$ = "/" Or o$ = "^" Then
                            'for division or exponentials, to prevent integer division cast integers to 'long double's
                            offsetcvi = 1
                            If (oldtyp And ISFLOAT) = 0 Then lhstyp = 2
                            If (newtyp And ISFLOAT) = 0 Then rhstyp = 2
                        End If
                    Else
                        If lhstyp And 2 Then lhstyp = 1 'force lhs and rhs to be integer values
                        If rhstyp And 2 Then rhstyp = 1
                    End If

                    If result = 2 Then result = 1 'force integer result
                    'note: result=1 just sets typ&=64 if typ is a float

                End If

                'STEP 1: convert oldtyp and/or newtyp if required for the operator
                'convert lhs
                If (oldtyp And ISSTRING) Then
                    If (lhstyp And 4) = 0 Then Give_Error "Cannot convert string to number": Exit Function
                Else
                    'oldtyp is numeric
                    If lhstyp = 4 Then Give_Error "Cannot convert number to string": Exit Function
                    If (oldtyp And ISFLOAT) Then
                        If (lhstyp And 2) = 0 Then
                            'convert float to int
                            block(i - 1) = "qbr(" + block(i - 1) + ")"
                            oldtyp = 64&
                        End If
                    Else
                        'oldtyp is an int
                        If (lhstyp And 1) = 0 Then
                            'convert int to float
                            block(i - 1) = "((long double)(" + block(i - 1) + "))"
                            oldtyp = 256& + ISFLOAT
                        End If
                    End If
                End If
                'convert rhs
                If (newtyp And ISSTRING) Then
                    If (rhstyp And 4) = 0 Then Give_Error "Cannot convert string to number": Exit Function
                Else
                    'newtyp is numeric
                    If rhstyp = 4 Then Give_Error "Cannot convert number to string": Exit Function
                    If (newtyp And ISFLOAT) Then
                        If (rhstyp And 2) = 0 Then
                            'convert float to int
                            block(i + 1) = "qbr(" + block(i + 1) + ")"
                            newtyp = 64&
                        End If
                    Else
                        'newtyp is an int
                        If (rhstyp And 1) = 0 Then
                            'convert int to float
                            block(i + 1) = "((long double)(" + block(i + 1) + "))"
                            newtyp = 256& + ISFLOAT
                        End If
                    End If
                End If

                'Reduce floating point values to common base for comparison?
                If isop = 7 Then 'comparitive operator
                    'Corrects problems encountered such as:
                    '    S = 2.1
                    '    IF S = 2.1 THEN PRINT "OK" ELSE PRINT "ERROR S PRINTS AS"; S; "BUT IS SEEN BY QB64 AS..."
                    '    IF S < 2.1 THEN PRINT "LESS THAN 2.1"
                    'concerns:
                    '1. Return value from TIMER will be reduced to a SINGLE in direct comparisons
                    'solution: assess, and only apply to SINGLE variables/arrays
                    '2. Comparison of a double higher/lower than single range may fail
                    'solution: out of range values convert to +/-1.#INF, making comparison still possible
                    If (oldtyp And ISFLOAT) <> 0 And (newtyp And ISFLOAT) <> 0 Then 'both floating point
                        s1 = oldtyp And 511: s2 = newtyp And 511
                        If s2 < s1 Then s1 = s2
                        If s1 = 32 Then
                            block(i - 1) = "((float)(" + block(i - 1) + "))": oldtyp = 32& + ISFLOAT
                            block(i + 1) = "((float)(" + block(i + 1) + "))": newtyp = 32& + ISFLOAT
                        End If
                        If s1 = 64 Then
                            block(i - 1) = "((double)(" + block(i - 1) + "))": oldtyp = 64& + ISFLOAT
                            block(i + 1) = "((double)(" + block(i + 1) + "))": newtyp = 64& + ISFLOAT
                        End If
                    End If 'both floating point
                End If 'comparitive operator

                typ = newtyp

                'STEP 2: markup typ
                '        if either side is a float, markup typ to largest float
                '        if either side is integer, markup typ
                'Note: A markup is a GUESS of what the return type will be,
                '      'result' can override this markup
                If (oldtyp And ISSTRING) = 0 And (newtyp And ISSTRING) = 0 Then
                    If (oldtyp And ISFLOAT) <> 0 Or (newtyp And ISFLOAT) <> 0 Then
                        'float
                        b = 0: If (oldtyp And ISFLOAT) Then b = oldtyp And 511
                        If (newtyp And ISFLOAT) Then
                            b2 = newtyp And 511: If b2 > b Then b = b2
                        End If
                        typ = ISFLOAT + b
                    Else
                        'integer
                        '***THIS IS THE IDEAL MARKUP FOR A 64-BIT SYSTEM***
                        'In reality 32-bit C++ only marks-up to 32-bit integers
                        b = oldtyp And 511: b2 = newtyp And 511: If b2 > b Then b = b2
                        typ = 64&
                        If b = 64 Then
                            If (oldtyp And ISUNSIGNED) <> 0 And (newtyp And ISUNSIGNED) <> 0 Then typ = 64& + ISUNSIGNED
                        End If
                    End If
                End If

                If result = 1 Then
                    If (typ And ISFLOAT) <> 0 Or (typ And ISSTRING) <> 0 Then typ = 64 'otherwise keep markuped integer type
                End If
                If result = 2 Then
                    If (typ And ISFLOAT) = 0 Then typ = ISFLOAT + 256
                End If
                If result = 4 Then
                    typ = ISSTRING
                End If
                If result = 8 Then 'bool
                    typ = 32
                End If

                'Offset protection: Force result to be an offset type with correct signage
                If offsetmode Then
                    If result <> 8 Then 'boolean comparison results are allowed
                        typ = OFFSETTYPE - ISPOINTER: If offsetmode = 2 Then typ = typ + ISUNSIGNED
                    End If
                End If

                'override typ=ISFLOAT+256 to typ=ISFLOAT+64 for ^ operator's result
                If u = 2 Then
                    If i$ = "pow2" Then

                        If offsetmode Then Give_Error "Operator '^' cannot be used with an _OFFSET": Exit Function

                        'QB-like conversion of math functions returning floating point values
                        'reassess oldtype & newtype
                        b = oldtyp And 511
                        If oldtyp And ISFLOAT Then
                            'no change to b
                        Else
                            If b > 16 Then b = 64 'larger than INTEGER? return DOUBLE
                            If b > 32 Then b = 256 'larger than LONG? return FLOAT
                            If b <= 16 Then b = 32
                        End If
                        b2 = newtyp And 511
                        If newtyp And ISFLOAT Then
                            If b2 > b Then b = b2
                        Else
                            b3 = 32
                            If b2 > 16 Then b3 = 64 'larger than INTEGER? return DOUBLE
                            If b2 > 32 Then b3 = 256 'larger than LONG? return FLOAT
                            If b3 > b Then b = b3
                        End If
                        typ = ISFLOAT + b

                    End If 'pow2
                End If 'u=2

                'STEP 3: apply operator appropriately

                If u = 5 Then
                    block(i + 1) = i$ + "(" + block(i + 1) + ")"
                    block(i) = "": i = i + 1: GoTo operatorapplied
                End If

                'binary operators

                If u = 1 Then
                    block(i + 1) = block(i - 1) + i$ + block(i + 1)
                    block(i - 1) = "": block(i) = "": i = i + 1: GoTo operatorapplied
                End If

                If u = 2 Then
                    block(i + 1) = i$ + "(" + block(i - 1) + "," + block(i + 1) + ")"
                    block(i - 1) = "": block(i) = "": i = i + 1: GoTo operatorapplied
                End If

                If u = 3 Then
                    block(i + 1) = "-(" + block(i - 1) + i$ + block(i + 1) + ")"
                    block(i - 1) = "": block(i) = "": i = i + 1: GoTo operatorapplied
                End If

                If u = 4 Then
                    block(i + 1) = "~" + block(i - 1) + i$ + block(i + 1)
                    block(i - 1) = "": block(i) = "": i = i + 1: GoTo operatorapplied
                End If

                '...more?...

                Give_Error "ERROR: Operator could not be applied correctly!": Exit Function '<--should never happen!
                operatorapplied:

                If offsetcvi Then block(i) = "qbr(" + block(i) + ")": offsetcvi = 0
                offsetmode = 0

            Else
                nonop = nonop + 1
            End If
        Else
            nonop = nonop + 1
        End If
        If nonop > 1 Then Give_Error "Expected operator in equation": Exit Function
    Next
    If Debug Then Print #9, ""

    'join blocks
    For i = 1 To blockn
        r$ = r$ + block(i)
    Next

    If Debug Then
        Print #9, "evaluated:" + r$ + " AS TYPE:";
        If (typ And ISSTRING) Then Print #9, "[ISSTRING]";
        If (typ And ISFLOAT) Then Print #9, "[ISFLOAT]";
        If (typ And ISUNSIGNED) Then Print #9, "[ISUNSIGNED]";
        If (typ And ISPOINTER) Then Print #9, "[ISPOINTER]";
        If (typ And ISFIXEDLENGTH) Then Print #9, "[ISFIXEDLENGTH]";
        If (typ And ISINCONVENTIONALMEMORY) Then Print #9, "[ISINCONVENTIONALMEMORY]";
        Print #9, "(size in bits=" + str2$(typ And 511) + ")"
    End If


    evaluate$ = r$



End Function




Function evaluatefunc$ (a2$, args As Long, typ As Long)
    a$ = a2$

    If Debug Then Print #9, "evaluatingfunction:" + RTrim$(id.n) + ":" + a$

    Dim id2 As idstruct

    id2 = id
    n$ = RTrim$(id2.n)
    typ = id2.ret
    targetid = currentid

    If RTrim$(id2.callname) = "func_stub" Then Give_Error "Command not implemented": Exit Function
    If RTrim$(id2.callname) = "func_input" And args = 1 And inputfunctioncalled = 0 Then
        inputfunctioncalled = -1
        If vWatchOn = 1 Then
            WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= -4; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars);"
        End If
    End If

    SetDependency id2.Dependency

    passomit = 0
    omitarg_first = 0: omitarg_last = 0

    f$ = RTrim$(id2.specialformat)
    If Len(f$) Then 'special format given

        'count omittable args
        sqb = 0
        a = 0
        For fi = 1 To Len(f$)
            fa = Asc(f$, fi)
            If fa = ASC_QUESTIONMARK Then
                a = a + 1
                If sqb <> 0 And omitarg_first = 0 Then omitarg_first = a
            End If
            If fa = ASC_LEFTSQUAREBRACKET Then sqb = 1
            If fa = ASC_RIGHTSQUAREBRACKET Then sqb = 0: omitarg_last = a
        Next
        omitargs = omitarg_last - omitarg_first + 1

        If args <> id2.args - omitargs And args <> id2.args Then
            If Len(id2.hr_syntax) > 0 Then
                Give_Error "Incorrect number of arguments - Reference: " + id2.hr_syntax
            Else
                Give_Error "Incorrect number of arguments passed to function"
            End If
            Exit Function
        End If

        passomit = 1 'pass omit flags param to function

        If id2.args = args Then omitarg_first = 0: omitarg_last = 0 'all arguments were passed!

    Else 'no special format given

        If n$ = "ASC" And args = 2 Then GoTo skipargnumchk
        If id2.overloaded = -1 And (args >= id2.minargs And args <= id2.args) Then GoTo skipargnumchk

        If id2.args <> args Then
            If Len(id2.hr_syntax) > 0 Then
                Give_Error "Incorrect number of arguments - Reference: " + id2.hr_syntax
            Else
                Give_Error "Incorrect number of arguments passed to function"
            End If
            Exit Function
        End If

    End If

    skipargnumchk:

    r$ = RTrim$(id2.callname) + "("


    If id2.args <> 0 Then

        curarg = 1
        firsti = 1

        n = numelements(a$)
        If n = 0 Then i = 0: GoTo noargs

        For i = 1 To n



            If curarg >= omitarg_first And curarg <= omitarg_last Then
                noargs:
                targettyp = CVL(Mid$(id2.arg, curarg * 4 - 4 + 1, 4))

                'IF (targettyp AND ISSTRING) THEN Give_Error "QB64 doesn't support optional string arguments for functions yet!": EXIT FUNCTION

                For fi = 1 To omitargs - 1: r$ = r$ + "NULL,": Next: r$ = r$ + "NULL"
                curarg = curarg + omitargs
                If i = n Then Exit For
                r$ = r$ + ","
            End If

            l$ = getelement(a$, i)
            If l$ = "(" Then b = b + 1
            If l$ = ")" Then b = b - 1
            If (l$ = "," And b = 0) Or (i = n) Then

                targettyp = CVL(Mid$(id2.arg, curarg * 4 - 4 + 1, 4))
                nele = Asc(Mid$(id2.nele, curarg, 1))
                nelereq = Asc(Mid$(id2.nelereq, curarg, 1))

                If i = n Then
                    e$ = getelements$(a$, firsti, i)
                Else
                    e$ = getelements$(a$, firsti, i - 1)
                End If

                If Left$(e$, 2) = "(" + sp Then dereference = 1 Else dereference = 0



                '*special case CVI,CVL,CVS,CVD,_CV (part #1)
                If n$ = "_CV" Or (n$ = "CV" And qb64prefix_set = 1) Then
                    If curarg = 1 Then
                        cvtype$ = type2symbol$(e$)
                        If Error_Happened Then Exit Function
                        e$ = ""
                        GoTo dontevaluate
                    End If
                End If

                '*special case MKI,MKL,MKS,MKD,_MK (part #1)

                If n$ = "_MK" Or (n$ = "MK" And qb64prefix_set = 1) Then
                    If RTrim$(id2.musthave) = "$" Then
                        If curarg = 1 Then
                            mktype$ = type2symbol$(e$)
                            If Error_Happened Then Exit Function
                            If Debug Then Print #9, "_MK:[" + e$ + "]:[" + mktype$ + "]"
                            e$ = ""
                            GoTo dontevaluate
                        End If
                    End If
                End If

                If n$ = "UBOUND" Or n$ = "LBOUND" Then
                    If curarg = 1 Then
                        'perform a "fake" evaluation of the array
                        e$ = e$ + sp + "(" + sp + ")"
                        e$ = evaluate(e$, sourcetyp)
                        If Error_Happened Then Exit Function
                        If (sourcetyp And ISREFERENCE) = 0 Then Give_Error "Expected array-name": Exit Function
                        If (sourcetyp And ISARRAY) = 0 Then Give_Error "Expected array-name": Exit Function
                        'make a note of the array's index for later
                        ulboundarray$ = e$
                        ulboundarraytyp = sourcetyp
                        e$ = ""
                        r$ = ""
                        GoTo dontevaluate
                    End If
                End If


                '*special case: INPUT$ function
                If n$ = "INPUT" Then
                    If RTrim$(id2.musthave) = "$" Then
                        If curarg = 2 Then
                            If Left$(e$, 2) = "#" + sp Then e$ = Right$(e$, Len(e$) - 2)
                        End If
                    End If
                End If


                '*special case*
                If n$ = "ASC" Then
                    If curarg = 2 Then
                        e$ = evaluatetotyp$(e$, 32&)
                        If Error_Happened Then Exit Function
                        typ& = LONGTYPE - ISPOINTER
                        r$ = r$ + e$ + ")"
                        GoTo evalfuncspecial
                    End If
                End If


                'WriteBufLine MainTxtBuf, "n$="; n$
                'WriteBufLine MainTxtBuf, "curarg="; curarg
                'WriteBufLine MainTxtBuf, "e$="; e$
                'WriteBufLine MainTxtBuf, "r$="; r$

                '*special case*
                If n$ = "_MEMGET" Or (n$ = "MEMGET" And qb64prefix_set = 1) Then
                    If curarg = 1 Then
                        memget_blk$ = e$
                    End If
                    If curarg = 2 Then
                        memget_offs$ = e$
                    End If
                    If curarg = 3 Then
                        e$ = UCase$(e$)
                        If InStr(e$, sp + "*" + sp) Then 'multiplier will have an appended %,& or && symbol
                            If Right$(e$, 2) = "&&" Then
                                e$ = Left$(e$, Len(e$) - 2)
                            Else
                                If Right$(e$, 1) = "&" Or Right$(e$, 1) = "%" Then e$ = Left$(e$, Len(e$) - 1)
                            End If
                        End If
                        t = typname2typ(e$)
                        If t = 0 Then Give_Error "Invalid TYPE name": Exit Function
                        If t And ISOFFSETINBITS Then Give_Error qb64prefix$ + "BIT TYPE unsupported": Exit Function
                        memget_size = typname2typsize
                        If t And ISSTRING Then
                            If (t And ISFIXEDLENGTH) = 0 Then Give_Error "Expected STRING * ...": Exit Function
                            memget_ctyp$ = "qbs*"
                        Else
                            If t And ISUDT Then
                                memget_size = udtxsize(t And 511) \ 8
                                memget_ctyp$ = "void*"
                            Else
                                memget_size = (t And 511) \ 8
                                memget_ctyp$ = typ2ctyp$(t, "")
                            End If
                        End If





                        'assume checking off
                        offs$ = evaluatetotyp(memget_offs$, OFFSETTYPE - ISPOINTER)
                        blkoffs$ = evaluatetotyp(memget_blk$, -6)
                        If NoChecks = 0 Then
                            'change offs$ to be the return of the safe version
                            offs$ = "func__memget((mem_block*)" + blkoffs$ + "," + offs$ + "," + str2(memget_size) + ")"
                        End If
                        If t And ISSTRING Then
                            r$ = "qbs_new_txt_len((char*)" + offs$ + "," + str2(memget_size) + ")"
                        Else
                            If t And ISUDT Then
                                r$ = "((void*)+" + offs$ + ")"
                                t = ISUDT + ISPOINTER + (t And 511)
                            Else
                                r$ = "*(" + memget_ctyp$ + "*)(" + offs$ + ")"
                                If t And ISPOINTER Then t = t - ISPOINTER
                            End If
                        End If







                        typ& = t


                        GoTo evalfuncspecial
                    End If
                End If

                '------------------------------------------------------------------------------------------------------------
                e2$ = e$
                e$ = evaluate(e$, sourcetyp)
                If Error_Happened Then Exit Function
                '------------------------------------------------------------------------------------------------------------

                ' a740g: ROR & ROL support
                If n$ = "_ROR" Or (n$ = "ROR" And qb64prefix_set = 1) Or n$ = "_ROL" Or (n$ = "ROL" And qb64prefix_set = 1) Then
                    rotlr_n$ = LCase$(Right$(n$, 3)) ' Get the last 3 characters and convert to lower case. We'll need this to construct the C call
                    If curarg = 1 Then ' First paramater
                        If (sourcetyp And ISSTRING) Or (sourcetyp And ISFLOAT) Or (sourcetyp And ISOFFSET) Or (sourcetyp And ISUDT) Then ' Bad parameters types
                            Give_Error "Expected non-floating-point value"
                            Exit Function
                        End If
                        If sourcetyp And ISREFERENCE Then e$ = refer(e$, sourcetyp, 0) ' This gets the C-style dereferencing syntax for an identifier (I think XD)
                        If Error_Happened Then Exit Function
                        ' Establish which function (if any!) should be used
                        If (sourcetyp And 511) = 8 Then ' sourcetyp is the type of data (bits can be examined to get more details)
                            e$ = "func__" + rotlr_n$ + "8(" + e$
                            typ& = UBYTETYPE - ISPOINTER ' We force the return type here. This is passed back up to the caller
                        ElseIf (sourcetyp And 511) = 16 Then
                            e$ = "func__" + rotlr_n$ + "16(" + e$
                            typ& = UINTEGERTYPE - ISPOINTER
                        ElseIf (sourcetyp And 511) = 32 Then
                            e$ = "func__" + rotlr_n$ + "32(" + e$
                            typ& = ULONGTYPE - ISPOINTER
                        ElseIf (sourcetyp And 511) = 64 Then
                            e$ = "func__" + rotlr_n$ + "64(" + e$
                            typ& = UINTEGER64TYPE - ISPOINTER
                        Else
                            Give_Error "Unknown data size"
                            Exit Function
                        End If
                        r$ = e$ ' Save whatever syntax he have so far
                        e$ = "" ' This must be cleared so that it is not repeated when we get to parameter 2
                        GoTo dontevaluate ' Don't evaluate until we get the second parameter
                    ElseIf curarg = 2 Then ' Second parameter
                        If sourcetyp And ISREFERENCE Then e$ = refer(e$, sourcetyp, 0)
                        If Error_Happened Then Exit Function
                        r$ = r$ + e$ + ")"
                        GoTo evalfuncspecial ' Evaluate now that we have everything
                    End If
                End If

                '***special case***
                If n$ = "_MEM" Or (n$ = "MEM" And qb64prefix_set = 1) Then
                    If curarg = 1 Then
                        If args = 1 Then
                            targettyp = -7
                        End If
                        If args = 2 Then
                            r$ = RTrim$(id2.callname) + "_at_offset" + Right$(r$, Len(r$) - Len(RTrim$(id2.callname)))
                            If (sourcetyp And ISOFFSET) = 0 Then Give_Error "Expected _MEM(_OFFSET-value,...)": Exit Function
                        End If
                    End If
                End If

                '*special case*
                If n$ = "_OFFSET" Or (n$ = "OFFSET" And qb64prefix_set = 1) Then
                    If (sourcetyp And ISREFERENCE) = 0 Then
                        Give_Error qb64prefix$ + "OFFSET expects the name of a variable/array": Exit Function
                    End If
                    If (sourcetyp And ISARRAY) Then
                        If (sourcetyp And ISOFFSETINBITS) Then Give_Error qb64prefix$ + "OFFSET cannot reference _BIT type arrays": Exit Function
                    End If
                    r$ = "((uptrszint)(" + evaluatetotyp$(e2$, -6) + "))"
                    If Error_Happened Then Exit Function
                    typ& = UOFFSETTYPE - ISPOINTER
                    GoTo evalfuncspecial
                End If '_OFFSET

                '*_OFFSET exceptions*
                If sourcetyp And ISOFFSET Then
                    If n$ = "MKSMBF" And RTrim$(id2.musthave) = "$" Then Give_Error "Cannot convert _OFFSET type to other types": Exit Function
                    If n$ = "MKDMBF" And RTrim$(id2.musthave) = "$" Then Give_Error "Cannot convert _OFFSET type to other types": Exit Function
                End If

                '*special case*
                If n$ = "ENVIRON" Then
                    If sourcetyp And ISSTRING Then
                        If sourcetyp And ISREFERENCE Then e$ = refer(e$, sourcetyp, 0)
                        If Error_Happened Then Exit Function
                        GoTo dontevaluate
                    End If
                End If

                '*special case*
                If n$ = "LEN" Then
                    typ& = LONGTYPE - ISPOINTER
                    If (sourcetyp And ISREFERENCE) = 0 Then
                        'could be a string expression
                        If sourcetyp And ISSTRING Then
                            r$ = "((int32)(" + e$ + ")->len)"
                            GoTo evalfuncspecial
                        End If
                        Give_Error "String expression or variable name required in LEN statement": Exit Function
                    End If
                    r$ = evaluatetotyp$(e2$, -5) 'use evaluatetotyp to get 'element' size
                    If Error_Happened Then Exit Function
                    GoTo evalfuncspecial
                End If


                '*special case*
                If n$ = "_BIN" Or (n$ = "BIN" And qb64prefix_set = 1) Then
                    If RTrim$(id2.musthave) = "$" Then
                        bits = sourcetyp And 511

                        If (sourcetyp And ISSTRING) Then Give_Error "Expected numeric value": Exit Function
                        wasref = 0
                        If (sourcetyp And ISREFERENCE) Then e$ = refer(e$, sourcetyp, 0): wasref = 1
                        If Error_Happened Then Exit Function
                        bits = sourcetyp And 511
                        If (sourcetyp And ISOFFSETINBITS) Then
                            e$ = "func__bin(" + e$ + "," + str2$(bits) + ")"
                        Else
                            If (sourcetyp And ISFLOAT) Then
                                e$ = "func__bin_float(" + e$ + ")"
                            Else
                                If bits = 64 Then
                                    If wasref = 0 Then bits = 0
                                End If
                                e$ = "func__bin(" + e$ + "," + str2$(bits) + ")"
                            End If
                        End If
                        typ& = STRINGTYPE - ISPOINTER
                        r$ = e$
                        GoTo evalfuncspecial
                    End If
                End If

                '*special case*
                If n$ = "OCT" Then
                    If RTrim$(id2.musthave) = "$" Then
                        bits = sourcetyp And 511

                        If (sourcetyp And ISSTRING) Then Give_Error "Expected numeric value": Exit Function
                        wasref = 0
                        If (sourcetyp And ISREFERENCE) Then e$ = refer(e$, sourcetyp, 0): wasref = 1
                        If Error_Happened Then Exit Function
                        bits = sourcetyp And 511
                        If (sourcetyp And ISOFFSETINBITS) Then
                            e$ = "func_oct(" + e$ + "," + str2$(bits) + ")"
                        Else
                            If (sourcetyp And ISFLOAT) Then
                                e$ = "func_oct_float(" + e$ + ")"
                            Else
                                If bits = 64 Then
                                    If wasref = 0 Then bits = 0
                                End If
                                e$ = "func_oct(" + e$ + "," + str2$(bits) + ")"
                            End If
                        End If
                        typ& = STRINGTYPE - ISPOINTER
                        r$ = e$
                        GoTo evalfuncspecial
                    End If
                End If

                '*special case*
                If n$ = "HEX" Then
                    If RTrim$(id2.musthave) = "$" Then
                        bits = sourcetyp And 511
                        If (sourcetyp And ISSTRING) Then Give_Error "Expected numeric value": Exit Function
                        wasref = 0
                        If (sourcetyp And ISREFERENCE) Then e$ = refer(e$, sourcetyp, 0): wasref = 1
                        If Error_Happened Then Exit Function
                        bits = sourcetyp And 511
                        If (sourcetyp And ISOFFSETINBITS) Then
                            chars = (bits + 3) \ 4
                            e$ = "func_hex(" + e$ + "," + str2$(chars) + ")"
                        Else
                            If (sourcetyp And ISFLOAT) Then
                                e$ = "func_hex_float(" + e$ + ")"
                            Else
                                If bits = 8 Then chars = 2
                                If bits = 16 Then chars = 4
                                If bits = 32 Then chars = 8
                                If bits = 64 Then
                                    If wasref = 1 Then chars = 16 Else chars = 0
                                End If
                                e$ = "func_hex(" + e$ + "," + str2$(chars) + ")"
                            End If
                        End If
                        typ& = STRINGTYPE - ISPOINTER
                        r$ = e$
                        GoTo evalfuncspecial
                    End If
                End If


                '*special case*
                If n$ = "EXP" Then
                    bits = sourcetyp And 511
                    If (sourcetyp And ISSTRING) Then Give_Error "Expected numeric value": Exit Function
                    If (sourcetyp And ISREFERENCE) Then e$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function
                    bits = sourcetyp And 511
                    typ& = SINGLETYPE - ISPOINTER
                    If (sourcetyp And ISFLOAT) Then
                        If bits = 32 Then e$ = "func_exp_single(" + e$ + ")" Else e$ = "func_exp_float(" + e$ + ")": typ& = FLOATTYPE - ISPOINTER
                    Else
                        If (sourcetyp And ISOFFSETINBITS) Then
                            e$ = "func_exp_float(" + e$ + ")": typ& = FLOATTYPE - ISPOINTER
                        Else
                            If bits <= 16 Then e$ = "func_exp_single(" + e$ + ")" Else e$ = "func_exp_float(" + e$ + ")": typ& = FLOATTYPE - ISPOINTER
                        End If
                    End If
                    r$ = e$
                    GoTo evalfuncspecial
                End If

                '*special case*
                If n$ = "INT" Then
                    If (sourcetyp And ISSTRING) Then Give_Error "Expected numeric value": Exit Function
                    If (sourcetyp And ISREFERENCE) Then e$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function
                    'establish which function (if any!) should be used
                    If (sourcetyp And ISFLOAT) Then e$ = "floor(" + e$ + ")" Else e$ = "(" + e$ + ")"
                    r$ = e$
                    typ& = sourcetyp
                    GoTo evalfuncspecial
                End If

                '*special case*
                If n$ = "FIX" Then
                    If (sourcetyp And ISSTRING) Then Give_Error "Expected numeric value": Exit Function
                    If (sourcetyp And ISREFERENCE) Then e$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function
                    'establish which function (if any!) should be used
                    bits = sourcetyp And 511
                    If (sourcetyp And ISFLOAT) Then
                        If bits > 64 Then e$ = "func_fix_float(" + e$ + ")" Else e$ = "func_fix_double(" + e$ + ")"
                    Else
                        e$ = "(" + e$ + ")"
                    End If
                    r$ = e$
                    typ& = sourcetyp
                    GoTo evalfuncspecial
                End If

                '*special case*
                If n$ = "_ROUND" Or (n$ = "ROUND" And qb64prefix_set = 1) Then
                    If (sourcetyp And ISSTRING) Then Give_Error "Expected numeric value": Exit Function
                    If (sourcetyp And ISREFERENCE) Then e$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function
                    'establish which function (if any!) should be used
                    If (sourcetyp And ISFLOAT) Then
                        bits = sourcetyp And 511
                        If bits > 64 Then e$ = "func_round_float(" + e$ + ")" Else e$ = "func_round_double(" + e$ + ")"
                    Else
                        e$ = "(" + e$ + ")"
                    End If
                    r$ = e$
                    typ& = 64&
                    If (sourcetyp And ISOFFSET) Then
                        If sourcetyp And ISUNSIGNED Then typ& = UOFFSETTYPE - ISPOINTER Else typ& = OFFSETTYPE - ISPOINTER
                    End If
                    GoTo evalfuncspecial
                End If


                '*special case*
                If n$ = "CDBL" Then
                    If (sourcetyp And ISOFFSET) Then Give_Error "Cannot convert _OFFSET type to other types": Exit Function
                    If (sourcetyp And ISSTRING) Then Give_Error "Expected numeric value": Exit Function
                    If (sourcetyp And ISREFERENCE) Then e$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function
                    'establish which function (if any!) should be used
                    bits = sourcetyp And 511
                    If (sourcetyp And ISFLOAT) Then
                        If bits > 64 Then e$ = "func_cdbl_float(" + e$ + ")"
                    Else
                        e$ = "((double)(" + e$ + "))"
                    End If
                    r$ = e$
                    typ& = DOUBLETYPE - ISPOINTER
                    GoTo evalfuncspecial
                End If

                '*special case*
                If n$ = "CSNG" Then
                    If (sourcetyp And ISOFFSET) Then Give_Error "Cannot convert _OFFSET type to other types": Exit Function
                    If (sourcetyp And ISSTRING) Then Give_Error "Expected numeric value": Exit Function
                    If (sourcetyp And ISREFERENCE) Then e$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function
                    'establish which function (if any!) should be used
                    bits = sourcetyp And 511
                    If (sourcetyp And ISFLOAT) Then
                        If bits = 64 Then e$ = "func_csng_double(" + e$ + ")"
                        If bits > 64 Then e$ = "func_csng_float(" + e$ + ")"
                    Else
                        e$ = "((double)(" + e$ + "))"
                    End If
                    r$ = e$
                    typ& = SINGLETYPE - ISPOINTER
                    GoTo evalfuncspecial
                End If


                '*special case*
                If n$ = "CLNG" Then
                    If (sourcetyp And ISOFFSET) Then Give_Error "Cannot convert _OFFSET type to other types": Exit Function
                    If (sourcetyp And ISSTRING) Then Give_Error "Expected numeric value": Exit Function
                    If (sourcetyp And ISREFERENCE) Then e$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function
                    'establish which function (if any!) should be used
                    bits = sourcetyp And 511
                    If (sourcetyp And ISFLOAT) Then
                        If bits > 64 Then e$ = "func_clng_float(" + e$ + ")" Else e$ = "func_clng_double(" + e$ + ")"
                    Else 'integer
                        If (sourcetyp And ISUNSIGNED) Then
                            If bits = 32 Then e$ = "func_clng_ulong(" + e$ + ")"
                            If bits > 32 Then e$ = "func_clng_uint64(" + e$ + ")"
                        Else 'signed
                            If bits > 32 Then e$ = "func_clng_int64(" + e$ + ")"
                        End If
                    End If
                    r$ = e$
                    typ& = 32&
                    GoTo evalfuncspecial
                End If

                '*special case*
                If n$ = "CINT" Then
                    If (sourcetyp And ISOFFSET) Then Give_Error "Cannot convert _OFFSET type to other types": Exit Function
                    If (sourcetyp And ISSTRING) Then Give_Error "Expected numeric value": Exit Function
                    If (sourcetyp And ISREFERENCE) Then e$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function
                    'establish which function (if any!) should be used
                    bits = sourcetyp And 511
                    If (sourcetyp And ISFLOAT) Then
                        If bits > 64 Then e$ = "func_cint_float(" + e$ + ")" Else e$ = "func_cint_double(" + e$ + ")"
                    Else 'integer
                        If (sourcetyp And ISUNSIGNED) Then
                            If bits > 15 And bits <= 32 Then e$ = "func_cint_ulong(" + e$ + ")"
                            If bits > 32 Then e$ = "func_cint_uint64(" + e$ + ")"
                        Else 'signed
                            If bits > 16 And bits <= 32 Then e$ = "func_cint_long(" + e$ + ")"
                            If bits > 32 Then e$ = "func_cint_int64(" + e$ + ")"
                        End If
                    End If
                    r$ = e$
                    typ& = 16&
                    GoTo evalfuncspecial
                End If

                '*special case MKI,MKL,MKS,MKD,_MK (part #2)
                mktype = 0
                size = 0
                If n$ = "MKI" Then mktype = 1: mktype$ = "%"
                If n$ = "MKL" Then mktype = 2: mktype$ = "&"
                If n$ = "MKS" Then mktype = 3: mktype$ = "!"
                If n$ = "MKD" Then mktype = 4: mktype$ = "#"
                If n$ = "_MK" Or (n$ = "MK" And qb64prefix_set = 1) Then mktype = -1
                If mktype Then
                    If mktype <> -1 Or curarg = 2 Then
                        'IF (sourcetyp AND ISOFFSET) THEN Give_Error "Cannot convert " + qb64prefix$ + "OFFSET type to other types": EXIT FUNCTION
                        'both _MK and trad. process the following
                        qtyp& = 0
                        If mktype$ = "%%" Then ctype$ = "b": qtyp& = BYTETYPE - ISPOINTER
                        If mktype$ = "~%%" Then ctype$ = "ub": qtyp& = UBYTETYPE - ISPOINTER
                        If mktype$ = "%" Then ctype$ = "i": qtyp& = INTEGERTYPE - ISPOINTER
                        If mktype$ = "~%" Then ctype$ = "ui": qtyp& = UINTEGERTYPE - ISPOINTER
                        If mktype$ = "&" Then ctype$ = "l": qtyp& = LONGTYPE - ISPOINTER
                        If mktype$ = "~&" Then ctype$ = "ul": qtyp& = ULONGTYPE - ISPOINTER
                        If mktype$ = "&&" Then ctype$ = "i64": qtyp& = INTEGER64TYPE - ISPOINTER
                        If mktype$ = "~&&" Then ctype$ = "ui64": qtyp& = UINTEGER64TYPE - ISPOINTER
                        If mktype$ = "!" Then ctype$ = "s": qtyp& = SINGLETYPE - ISPOINTER
                        If mktype$ = "#" Then ctype$ = "d": qtyp& = DOUBLETYPE - ISPOINTER
                        If mktype$ = "##" Then ctype$ = "f": qtyp& = FLOATTYPE - ISPOINTER
                        If mktype$ = "%&" Then ctype$ = "o": qtyp& = OFFSETTYPE - ISPOINTER
                        If mktype$ = "~%&" Then ctype$ = "uo": qtyp& = UOFFSETTYPE - ISPOINTER
                        If Left$(mktype$, 2) = "~`" Then ctype$ = "ubit": qtyp& = UINTEGER64TYPE - ISPOINTER: size = Val(Right$(mktype$, Len(mktype$) - 2))
                        If Left$(mktype$, 1) = "`" Then ctype$ = "bit": qtyp& = INTEGER64TYPE - ISPOINTER: size = Val(Right$(mktype$, Len(mktype$) - 1))
                        If qtyp& = 0 Then Give_Error qb64prefix$ + "MK only accepts numeric types": Exit Function
                        If size Then
                            r$ = ctype$ + "2string(" + str2(size) + ","
                        Else
                            r$ = ctype$ + "2string("
                        End If
                        nocomma = 1
                        targettyp = qtyp&
                    End If
                End If

                '*special case CVI,CVL,CVS,CVD,_CV (part #2)
                cvtype = 0
                If n$ = "CVI" Then cvtype = 1: cvtype$ = "%"
                If n$ = "CVL" Then cvtype = 2: cvtype$ = "&"
                If n$ = "CVS" Then cvtype = 3: cvtype$ = "!"
                If n$ = "CVD" Then cvtype = 4: cvtype$ = "#"
                If n$ = "_CV" Or (n$ = "CV" And qb64prefix_set = 1) Then cvtype = -1
                If cvtype Then
                    If cvtype <> -1 Or curarg = 2 Then
                        If (sourcetyp And ISSTRING) = 0 Then Give_Error n$ + " requires a STRING argument": Exit Function
                        If (sourcetyp And ISREFERENCE) Then e$ = refer(e$, sourcetyp, 0)
                        If Error_Happened Then Exit Function
                        typ& = 0
                        If cvtype$ = "%%" Then ctype$ = "b": typ& = BYTETYPE - ISPOINTER
                        If cvtype$ = "~%%" Then ctype$ = "ub": typ& = UBYTETYPE - ISPOINTER
                        If cvtype$ = "%" Then ctype$ = "i": typ& = INTEGERTYPE - ISPOINTER
                        If cvtype$ = "~%" Then ctype$ = "ui": typ& = UINTEGERTYPE - ISPOINTER
                        If cvtype$ = "&" Then ctype$ = "l": typ& = LONGTYPE - ISPOINTER
                        If cvtype$ = "~&" Then ctype$ = "ul": typ& = ULONGTYPE - ISPOINTER
                        If cvtype$ = "&&" Then ctype$ = "i64": typ& = INTEGER64TYPE - ISPOINTER
                        If cvtype$ = "~&&" Then ctype$ = "ui64": typ& = UINTEGER64TYPE - ISPOINTER
                        If cvtype$ = "!" Then ctype$ = "s": typ& = SINGLETYPE - ISPOINTER
                        If cvtype$ = "#" Then ctype$ = "d": typ& = DOUBLETYPE - ISPOINTER
                        If cvtype$ = "##" Then ctype$ = "f": typ& = FLOATTYPE - ISPOINTER
                        If cvtype$ = "%&" Then ctype$ = "o": typ& = OFFSETTYPE - ISPOINTER
                        If cvtype$ = "~%&" Then ctype$ = "uo": typ& = UOFFSETTYPE - ISPOINTER
                        If Left$(cvtype$, 2) = "~`" Then ctype$ = "ubit": typ& = UINTEGER64TYPE - ISPOINTER: size = Val(Right$(cvtype$, Len(cvtype$) - 2))
                        If Left$(cvtype$, 1) = "`" Then ctype$ = "bit": typ& = INTEGER64TYPE - ISPOINTER: size = Val(Right$(cvtype$, Len(cvtype$) - 1))
                        If typ& = 0 Then Give_Error qb64prefix$ + "CV cannot return STRING type!": Exit Function
                        If ctype$ = "bit" Or ctype$ = "ubit" Then
                            r$ = "string2" + ctype$ + "(" + e$ + "," + str2(size) + ")"
                        Else
                            r$ = "string2" + ctype$ + "(" + e$ + ")"
                        End If
                        GoTo evalfuncspecial
                    End If
                End If

                '*special case
                If RTrim$(id2.n) = "STRING" Then
                    If curarg = 2 Then
                        If (sourcetyp And ISSTRING) Then
                            If (sourcetyp And ISREFERENCE) Then e$ = refer(e$, sourcetyp, 0)
                            If Error_Happened Then Exit Function
                            sourcetyp = 64&
                            e$ = "(" + e$ + "->chr[0])"
                        End If
                    End If
                End If

                '*special case
                If RTrim$(id2.n) = "SADD" Then
                    If (sourcetyp And ISREFERENCE) = 0 Then
                        Give_Error "SADD only accepts variable-length string variables": Exit Function
                    End If
                    If (sourcetyp And ISFIXEDLENGTH) Then
                        Give_Error "SADD only accepts variable-length string variables": Exit Function
                    End If
                    If (sourcetyp And ISINCONVENTIONALMEMORY) = 0 Then
                        recompile = 1
                        cmemlist(Val(e$)) = 1
                        r$ = "[CONVENTIONAL_MEMORY_REQUIRED]"
                        typ& = 64&
                        GoTo evalfuncspecial
                    End If
                    r$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function
                    r$ = "((unsigned short)(" + r$ + "->chr-&cmem[1280]))"
                    typ& = 64&
                    GoTo evalfuncspecial
                End If

                '*special case
                If RTrim$(id2.n) = "VARPTR" Then
                    If (sourcetyp And ISREFERENCE) = 0 Then
                        Give_Error "Expected reference to a variable/array": Exit Function
                    End If

                    If RTrim$(id2.musthave) = "$" Then
                        If (sourcetyp And ISINCONVENTIONALMEMORY) = 0 Then
                            recompile = 1
                            cmemlist(Val(e$)) = 1
                            r$ = "[CONVENTIONAL_MEMORY_REQUIRED]"
                            typ& = ISSTRING
                            GoTo evalfuncspecial
                        End If

                        If (sourcetyp And ISARRAY) Then
                            If (sourcetyp And ISSTRING) = 0 Then Give_Error "VARPTR$ only accepts variable-length string arrays": Exit Function
                            If (sourcetyp And ISFIXEDLENGTH) Then Give_Error "VARPTR$ only accepts variable-length string arrays": Exit Function
                        End If

                        'must be a simple variable
                        '!assuming it is in cmem in DBLOCK
                        r$ = refer(e$, sourcetyp, 1)
                        If Error_Happened Then Exit Function
                        If (sourcetyp And ISSTRING) Then
                            If (sourcetyp And ISARRAY) Then r$ = refer(e$, sourcetyp, 0)
                            If Error_Happened Then Exit Function
                            r$ = r$ + "->cmem_descriptor_offset"
                            t = 3
                        Else
                            r$ = "((unsigned short)(((uint8*)" + r$ + ")-&cmem[1280]))"
                            '*top bit on=unsigned
                            '*second top bit on=bit-value (lower bits indicate the size)
                            'BYTE=1
                            'INTEGER=2
                            'STRING=3
                            'SINGLE=4
                            'INT64=5
                            'FLOAT=6
                            'DOUBLE=8
                            'LONG=20
                            'BIT=64+n
                            t = 0
                            If (sourcetyp And ISUNSIGNED) Then t = t + 128
                            If (sourcetyp And ISOFFSETINBITS) Then
                                t = t + 64
                                t = t + (sourcetyp And 63)
                            Else
                                bits = sourcetyp And 511
                                If (sourcetyp And ISFLOAT) Then
                                    If bits = 32 Then t = t + 4
                                    If bits = 64 Then t = t + 8
                                    If bits = 256 Then t = t + 6
                                Else
                                    If bits = 8 Then t = t + 1
                                    If bits = 16 Then t = t + 2
                                    If bits = 32 Then t = t + 20
                                    If bits = 64 Then t = t + 5
                                End If
                            End If
                        End If
                        r$ = "func_varptr_helper(" + str2(t) + "," + r$ + ")"
                        typ& = ISSTRING
                        GoTo evalfuncspecial
                    End If 'end of varptr$











                    'VARPTR
                    If (sourcetyp And ISINCONVENTIONALMEMORY) = 0 Then
                        recompile = 1
                        cmemlist(Val(e$)) = 1
                        r$ = "[CONVENTIONAL_MEMORY_REQUIRED]"
                        typ& = 64&
                        GoTo evalfuncspecial
                    End If

                    If (sourcetyp And ISARRAY) Then
                        If (sourcetyp And ISOFFSETINBITS) Then Give_Error "VARPTR cannot reference _BIT type arrays": Exit Function

                        'string array?
                        If (sourcetyp And ISSTRING) Then
                            If (sourcetyp And ISFIXEDLENGTH) Then
                                getid Val(e$)
                                If Error_Happened Then Exit Function
                                m = id.tsize
                                index$ = Right$(e$, Len(e$) - InStr(e$, sp3))
                                typ = 64&
                                r$ = "((" + index$ + ")*" + str2(m) + ")"
                                GoTo evalfuncspecial
                            Else
                                'return the offset of the string's descriptor
                                r$ = refer(e$, sourcetyp, 0)
                                If Error_Happened Then Exit Function
                                r$ = r$ + "->cmem_descriptor_offset"
                                typ = 64&
                                GoTo evalfuncspecial
                            End If
                        End If

                        If sourcetyp And ISUDT Then
                            e$ = Right$(e$, Len(e$) - InStr(e$, sp3)) 'skip idnumber
                            e$ = Right$(e$, Len(e$) - InStr(e$, sp3)) 'skip u
                            o$ = Right$(e$, Len(e$) - InStr(e$, sp3)) 'skip e
                            typ = 64&
                            r$ = "(" + o$ + ")"
                            GoTo evalfuncspecial
                        End If

                        'non-UDT array
                        m = (sourcetyp And 511) \ 8 'calculate size multiplier
                        index$ = Right$(e$, Len(e$) - InStr(e$, sp3))
                        typ = 64&
                        r$ = "((" + index$ + ")*" + str2(m) + ")"
                        GoTo evalfuncspecial

                    End If

                    'not an array

                    If sourcetyp And ISUDT Then
                        r$ = refer(e$, sourcetyp, 1)
                        If Error_Happened Then Exit Function
                        e$ = Right$(e$, Len(e$) - InStr(e$, sp3)) 'skip idnumber
                        e$ = Right$(e$, Len(e$) - InStr(e$, sp3)) 'skip u
                        o$ = Right$(e$, Len(e$) - InStr(e$, sp3)) 'skip e
                        typ = 64&

                        'if sub/func arg, may not be in DBLOCK
                        getid Val(e$)
                        If Error_Happened Then Exit Function
                        If id.sfarg Then 'could be in DBLOCK
                            'note: segment could be the closest segment to UDT element or the base of DBLOCK
                            r$ = "varptr_dblock_check(((uint8*)" + r$ + ")+(" + o$ + "))"
                        Else 'definitely in DBLOCK
                            'give offset relative to DBLOCK
                            r$ = "((unsigned short)(((uint8*)" + r$ + ") - &cmem[1280] + (" + o$ + ") ))"
                        End If

                        GoTo evalfuncspecial
                    End If

                    typ = 64&
                    r$ = refer(e$, sourcetyp, 1)
                    If Error_Happened Then Exit Function
                    If (sourcetyp And ISSTRING) Then
                        If (sourcetyp And ISFIXEDLENGTH) Then

                            'if sub/func arg, may not be in DBLOCK
                            getid Val(e$)
                            If Error_Happened Then Exit Function
                            If id.sfarg Then 'could be in DBLOCK
                                r$ = "varptr_dblock_check(" + r$ + "->chr)"
                            Else 'definitely in DBLOCK
                                r$ = "((unsigned short)(" + r$ + "->chr-&cmem[1280]))"
                            End If

                        Else
                            r$ = r$ + "->cmem_descriptor_offset"
                        End If
                        GoTo evalfuncspecial
                    End If

                    'single, simple variable
                    'if sub/func arg, may not be in DBLOCK
                    getid Val(e$)
                    If Error_Happened Then Exit Function
                    If id.sfarg Then 'could be in DBLOCK
                        r$ = "varptr_dblock_check((uint8*)" + r$ + ")"
                    Else 'definitely in DBLOCK
                        r$ = "((unsigned short)(((uint8*)" + r$ + ")-&cmem[1280]))"
                    End If

                    GoTo evalfuncspecial
                End If

                '*special case*
                If RTrim$(id2.n) = "VARSEG" Then
                    If (sourcetyp And ISREFERENCE) = 0 Then
                        Give_Error "Expected reference to a variable/array": Exit Function
                    End If
                    If (sourcetyp And ISINCONVENTIONALMEMORY) = 0 Then
                        recompile = 1
                        cmemlist(Val(e$)) = 1
                        r$ = "[CONVENTIONAL_MEMORY_REQUIRED]"
                        typ& = 64&
                        GoTo evalfuncspecial
                    End If
                    'array?
                    If (sourcetyp And ISARRAY) Then
                        If (sourcetyp And ISFIXEDLENGTH) = 0 Then
                            If (sourcetyp And ISSTRING) Then
                                r$ = "80"
                                typ = 64&
                                GoTo evalfuncspecial
                            End If
                        End If
                        typ = 64&
                        r$ = "( ( ((ptrszint)(" + refer(e$, sourcetyp, 1) + "[0])) - ((ptrszint)(&cmem[0])) ) /16)"
                        If Error_Happened Then Exit Function
                        GoTo evalfuncspecial
                    End If

                    'single variable/(var-len)string/udt? (usually stored in DBLOCK)
                    typ = 64&
                    'if sub/func arg, may not be in DBLOCK
                    getid Val(e$)
                    If Error_Happened Then Exit Function
                    If id.sfarg <> 0 And (sourcetyp And ISSTRING) = 0 Then
                        If sourcetyp And ISUDT Then
                            r$ = refer(e$, sourcetyp, 1)
                            If Error_Happened Then Exit Function
                            e$ = Right$(e$, Len(e$) - InStr(e$, sp3)) 'skip idnumber
                            e$ = Right$(e$, Len(e$) - InStr(e$, sp3)) 'skip u
                            o$ = Right$(e$, Len(e$) - InStr(e$, sp3)) 'skip e
                            r$ = "varseg_dblock_check(((uint8*)" + r$ + ")+(" + o$ + "))"
                        Else
                            r$ = "varseg_dblock_check((uint8*)" + refer(e$, sourcetyp, 1) + ")"
                            If Error_Happened Then Exit Function
                        End If
                    Else
                        'can be assumed to be in DBLOCK
                        r$ = "80"
                    End If
                    GoTo evalfuncspecial
                End If 'varseg















                'note: this code has already been called...
                '------------------------------------------------------------------------------------------------------------
                'e2$ = e$
                'e$ = evaluate(e$, sourcetyp)
                '------------------------------------------------------------------------------------------------------------

                'note: this comment makes no sense...
                'any numeric variable, but it must be type-speficied

                If targettyp = -2 Then
                    e$ = evaluatetotyp(e2$, -2)
                    If Error_Happened Then Exit Function
                    GoTo dontevaluate
                End If '-2

                If targettyp = -7 Then
                    e$ = evaluatetotyp(e2$, -7)
                    If Error_Happened Then Exit Function
                    GoTo dontevaluate
                End If '-7

                If targettyp = -8 Then
                    e$ = evaluatetotyp(e2$, -8)
                    If Error_Happened Then Exit Function
                    GoTo dontevaluate
                End If '-8

                If sourcetyp And ISOFFSET Then
                    If (targettyp And ISOFFSET) = 0 Then
                        If id2.internal_subfunc = 0 Then Give_Error "Cannot convert _OFFSET type to other types": Exit Function
                    End If
                End If

                'note: this is used for functions like STR(...) which accept all types...
                explicitreference = 0
                If targettyp = -1 Then
                    explicitreference = 1
                    If (sourcetyp And ISSTRING) Then Give_Error "Number required for function": Exit Function
                    targettyp = sourcetyp
                    If (targettyp And ISPOINTER) Then targettyp = targettyp - ISPOINTER
                End If

                'pointer?
                If (targettyp And ISPOINTER) Then
                    If dereference = 0 Then 'check deferencing wasn't used



                        'note: array pointer
                        If (targettyp And ISARRAY) Then
                            If (sourcetyp And ISREFERENCE) = 0 Then Give_Error "Expected arrayname()": Exit Function
                            If (sourcetyp And ISARRAY) = 0 Then Give_Error "Expected arrayname()": Exit Function
                            If Debug Then Print #9, "evaluatefunc:array reference:[" + e$ + "]"

                            'check arrays are of same type
                            targettyp2 = targettyp: sourcetyp2 = sourcetyp
                            targettyp2 = targettyp2 And (511 + ISOFFSETINBITS + ISUDT + ISSTRING + ISFIXEDLENGTH + ISFLOAT)
                            sourcetyp2 = sourcetyp2 And (511 + ISOFFSETINBITS + ISUDT + ISSTRING + ISFIXEDLENGTH + ISFLOAT)
                            If sourcetyp2 <> targettyp2 Then Give_Error "Incorrect array type passed to function": Exit Function

                            'check arrayname was followed by '()'
                            If targettyp And ISUDT Then
                                If Debug Then Print #9, "evaluatefunc:array reference:udt reference:[" + e$ + "]"
                                'get UDT info
                                udtrefid = Val(e$)
                                getid udtrefid
                                If Error_Happened Then Exit Function
                                udtrefi = InStr(e$, sp3) 'end of id
                                udtrefi2 = InStr(udtrefi + 1, e$, sp3) 'end of u
                                udtrefu = Val(Mid$(e$, udtrefi + 1, udtrefi2 - udtrefi - 1))
                                udtrefi3 = InStr(udtrefi2 + 1, e$, sp3) 'skip e
                                udtrefe = Val(Mid$(e$, udtrefi2 + 1, udtrefi3 - udtrefi2 - 1))
                                o$ = Right$(e$, Len(e$) - udtrefi3)
                                'note: most of the UDT info above is not required
                                If Left$(o$, 4) <> "(0)*" Then Give_Error "Expected arrayname()": Exit Function
                            Else
                                If Right$(e$, 2) <> sp3 + "0" Then Give_Error "Expected arrayname()": Exit Function
                            End If


                            idnum = Val(Left$(e$, InStr(e$, sp3) - 1))
                            getid idnum
                            If Error_Happened Then Exit Function

                            If targettyp And ISFIXEDLENGTH Then
                                targettypsize = CVL(Mid$(id2.argsize, curarg * 4 - 4 + 1, 4))
                                If id.tsize <> targettypsize Then Give_Error "Incorrect array type passed to function": Exit Function
                            End If

                            If Mid$(sfcmemargs(targetid), curarg, 1) = Chr$(1) Then 'cmem required?
                                If cmemlist(idnum) = 0 Then
                                    cmemlist(idnum) = 1

                                    recompile = 1
                                End If
                            End If



                            If id.linkid = 0 Then
                                'if id.linkid is 0, it means the number of array elements is definietly
                                'known of the array being passed, this is not some "fake"/unknown array.
                                'using the numer of array elements of a fake array would be dangerous!

                                If nelereq = 0 Then
                                    'only continue if the number of array elements required is unknown
                                    'and it needs to be set

                                    If id.arrayelements <> -1 Then
                                        nelereq = id.arrayelements
                                        Mid$(id2.nelereq, curarg, 1) = Chr$(nelereq)
                                    End If

                                    ids(targetid) = id2

                                Else

                                    'the number of array elements required is known AND
                                    'the number of elements in the array to be passed is known



                                    'REMOVE FOR TESTING PURPOSES ONLY!!! SHOULD BE UNREM'd!
                                    'print id.arrayelements,nelereq
                                    '             1       ,  2

                                    If id.arrayelements <> nelereq Then Give_Error "Passing arrays with a differing number of elements to a SUB/FUNCTION is not supported": Exit Function



                                End If
                            End If


                            e$ = refer(e$, sourcetyp, 1)
                            If Error_Happened Then Exit Function
                            GoTo dontevaluate
                        End If












                        'note: not an array...

                        'target is not an array

                        If (targettyp And ISSTRING) = 0 Then
                            If (sourcetyp And ISREFERENCE) Then
                                idnum = Val(Left$(e$, InStr(e$, sp3) - 1)) 'id# of sourcetyp

                                targettyp2 = targettyp: sourcetyp2 = sourcetyp

                                'get info about source/target
                                arr = 0: If (sourcetyp2 And ISARRAY) Then arr = 1
                                passudtelement = 0: If (targettyp2 And ISUDT) = 0 And (sourcetyp2 And ISUDT) <> 0 Then passudtelement = 1: sourcetyp2 = sourcetyp2 - ISUDT

                                'remove flags irrelevant for comparison... ISPOINTER,ISREFERENCE,ISINCONVENTIONALMEMORY,ISARRAY
                                targettyp2 = targettyp2 And (511 + ISOFFSETINBITS + ISUDT + ISFLOAT + ISSTRING)
                                sourcetyp2 = sourcetyp2 And (511 + ISOFFSETINBITS + ISUDT + ISFLOAT + ISSTRING)

                                'compare types
                                If sourcetyp2 = targettyp2 Then

                                    If sourcetyp And ISUDT Then
                                        'udt/udt array

                                        'get info
                                        udtrefid = Val(e$)
                                        getid udtrefid
                                        If Error_Happened Then Exit Function
                                        udtrefi = InStr(e$, sp3) 'end of id
                                        udtrefi2 = InStr(udtrefi + 1, e$, sp3) 'end of u
                                        udtrefu = Val(Mid$(e$, udtrefi + 1, udtrefi2 - udtrefi - 1))
                                        udtrefi3 = InStr(udtrefi2 + 1, e$, sp3) 'skip e
                                        udtrefe = Val(Mid$(e$, udtrefi2 + 1, udtrefi3 - udtrefi2 - 1))
                                        o$ = Right$(e$, Len(e$) - udtrefi3)
                                        'note: most of the UDT info above is not required

                                        If arr Then
                                            n2$ = scope$ + "ARRAY_UDT_" + RTrim$(id.n) + "[0]"
                                        Else
                                            n2$ = scope$ + "UDT_" + RTrim$(id.n)
                                        End If

                                        e$ = "(void*)( ((char*)(" + n2$ + ")) + (" + o$ + ") )"

                                        'convert void* to target type*
                                        If passudtelement Then e$ = "(" + typ2ctyp$(targettyp2 + (targettyp And ISUNSIGNED), "") + "*)" + e$
                                        If Error_Happened Then Exit Function

                                    Else
                                        'not a udt
                                        If arr Then
                                            If (sourcetyp2 And ISOFFSETINBITS) Then Give_Error "Cannot pass BIT array offsets": Exit Function
                                            e$ = "(&(" + refer(e$, sourcetyp, 0) + "))"
                                            If Error_Happened Then Exit Function
                                        Else
                                            e$ = refer(e$, sourcetyp, 1)
                                            If Error_Happened Then Exit Function
                                        End If

                                        'note: signed/unsigned mismatch requires casting
                                        If (sourcetyp And ISUNSIGNED) <> (targettyp And ISUNSIGNED) Then
                                            e$ = "(" + typ2ctyp$(targettyp2 + (targettyp And ISUNSIGNED), "") + "*)" + e$
                                            If Error_Happened Then Exit Function
                                        End If

                                    End If 'udt?

                                    'force recompile if target needs to be in cmem and the source is not
                                    If Mid$(sfcmemargs(targetid), curarg, 1) = Chr$(1) Then 'cmem required?
                                        If cmemlist(idnum) = 0 Then
                                            cmemlist(idnum) = 1
                                            recompile = 1
                                        End If
                                    End If

                                    GoTo dontevaluate
                                End If 'similar

                                'IF sourcetyp2 = targettyp2 THEN
                                'IF arr THEN
                                'IF (sourcetyp2 AND ISOFFSETINBITS) THEN Give_Error "Cannot pass BIT array offsets yet": EXIT FUNCTION
                                'e$ = "(&(" + refer(e$, sourcetyp, 0) + "))"
                                'ELSE
                                'e$ = refer(e$, sourcetyp, 1)
                                'END IF
                                'GOTO dontevaluate
                                'END IF

                            End If 'source is a reference

                        Else 'string
                            'its a string

                            If (sourcetyp And ISREFERENCE) Then
                                idnum = Val(Left$(e$, InStr(e$, sp3) - 1)) 'id# of sourcetyp
                                If Mid$(sfcmemargs(targetid), curarg, 1) = Chr$(1) Then 'cmem required?
                                    If cmemlist(idnum) = 0 Then
                                        cmemlist(idnum) = 1
                                        recompile = 1
                                    End If
                                End If
                            End If 'reference

                        End If 'string

                    End If 'dereference was not used
                End If 'pointer


                'note: Target is not a pointer...

                'IF (targettyp AND ISSTRING) = 0 THEN
                'IF (sourcetyp AND ISREFERENCE) THEN
                'targettyp2 = targettyp: sourcetyp2 = sourcetyp - ISREFERENCE
                'IF (sourcetyp2 AND ISINCONVENTIONALMEMORY) THEN sourcetyp2 = sourcetyp2 - ISINCONVENTIONALMEMORY
                'IF sourcetyp2 = targettyp2 THEN e$ = refer(e$, sourcetyp, 1): GOTO dontevaluate
                'END IF
                'END IF
                'END IF

                'String-numeric mismatch?
                If targettyp And ISSTRING Then
                    If (sourcetyp And ISSTRING) = 0 Then
                        nth = curarg
                        If omitarg_last <> 0 And nth > omitarg_last Then nth = nth - 1
                        If ids(targetid).args = 1 Then Give_Error "String required for function": Exit Function
                        Give_Error str_nth$(nth) + " function argument requires a string": Exit Function
                    End If
                End If
                If (targettyp And ISSTRING) = 0 Then
                    If sourcetyp And ISSTRING Then
                        nth = curarg
                        If omitarg_last <> 0 And nth > omitarg_last Then nth = nth - 1
                        If ids(targetid).args = 1 Then Give_Error "Number required for function": Exit Function
                        Give_Error str_nth$(nth) + " function argument requires a number": Exit Function
                    End If
                End If

                'change to "non-pointer" value
                If (sourcetyp And ISREFERENCE) Then
                    e$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function
                End If

                If explicitreference = 0 Then
                    If targettyp And ISUDT Then
                        nth = curarg
                        If omitarg_last <> 0 And nth > omitarg_last Then nth = nth - 1
                        If qb64prefix_set And udtxcname(targettyp And 511) = "_MEM" Then
                            x$ = "'" + Mid$(RTrim$(udtxcname(targettyp And 511)), 2) + "'"
                        Else
                            x$ = "'" + RTrim$(udtxcname(targettyp And 511)) + "'"
                        End If
                        If ids(targetid).args = 1 Then Give_Error "TYPE " + x$ + " required for function": Exit Function
                        Give_Error str_nth$(nth) + " function argument requires TYPE " + x$: Exit Function
                    End If
                Else
                    If sourcetyp And ISUDT Then Give_Error "Number required for function": Exit Function
                End If

                'round to integer if required
                If (sourcetyp And ISFLOAT) Then
                    If (targettyp And ISFLOAT) = 0 Then
                        '**32 rounding fix
                        bits = targettyp And 511
                        If bits <= 16 Then e$ = "qbr_float_to_long(" + e$ + ")"
                        If bits > 16 And bits < 32 Then e$ = "qbr_double_to_long(" + e$ + ")"
                        If bits >= 32 Then e$ = "qbr(" + e$ + ")"
                    End If
                End If

                If explicitreference Then
                    If (targettyp And ISOFFSETINBITS) Then
                        'integer value can fit inside int64
                        e$ = "(int64)(" + e$ + ")"
                    Else
                        If (targettyp And ISFLOAT) Then
                            If (targettyp And 511) = 32 Then e$ = "(float)(" + e$ + ")"
                            If (targettyp And 511) = 64 Then e$ = "(double)(" + e$ + ")"
                            If (targettyp And 511) = 256 Then e$ = "(long double)(" + e$ + ")"
                        Else
                            If (targettyp And ISUNSIGNED) Then
                                If (targettyp And 511) = 8 Then e$ = "(uint8)(" + e$ + ")"
                                If (targettyp And 511) = 16 Then e$ = "(uint16)(" + e$ + ")"
                                If (targettyp And 511) = 32 Then e$ = "(uint32)(" + e$ + ")"
                                If (targettyp And 511) = 64 Then e$ = "(uint64)(" + e$ + ")"
                            Else
                                If (targettyp And 511) = 8 Then e$ = "(int8)(" + e$ + ")"
                                If (targettyp And 511) = 16 Then e$ = "(int16)(" + e$ + ")"
                                If (targettyp And 511) = 32 Then e$ = "(int32)(" + e$ + ")"
                                If (targettyp And 511) = 64 Then e$ = "(int64)(" + e$ + ")"
                            End If
                        End If 'float?
                    End If 'offset in bits?
                End If 'explicit?


                If (targettyp And ISPOINTER) Then 'pointer required
                    If (targettyp And ISSTRING) Then GoTo dontevaluate 'no changes required
                    '20090703
                    t$ = typ2ctyp$(targettyp, "")
                    If Error_Happened Then Exit Function
                    v$ = "pass" + str2$(uniquenumber)
                    'assume numeric type
                    If Mid$(sfcmemargs(targetid), curarg, 1) = Chr$(1) Then 'cmem required?
                        bytesreq = ((targettyp And 511) + 7) \ 8
                        WriteBufLine defdatahandle, t$ + " *" + v$ + "=NULL;"
                        WriteBufLine DataTxtBuf, "if(" + v$ + "==NULL){"
                        WriteBufLine DataTxtBuf, "cmem_sp-=" + str2(bytesreq) + ";"
                        WriteBufLine DataTxtBuf, v$ + "=(" + t$ + "*)(dblock+cmem_sp);"
                        WriteBufLine DataTxtBuf, "if (cmem_sp<qbs_cmem_sp) error(257);"
                        WriteBufLine DataTxtBuf, "}"
                        e$ = "&(*" + v$ + "=" + e$ + ")"
                    Else
                        WriteBufLine DataTxtBuf, t$ + " " + v$ + ";"
                        e$ = "&(" + v$ + "=" + e$ + ")"
                    End If
                    GoTo dontevaluate
                End If

                dontevaluate:

                If id2.ccall Then

                    'if a forced cast from a returned ccall function is in e$, remove it
                    If Left$(e$, 3) = "(  " Then
                        e$ = removecast$(e$)
                    End If

                    If targettyp And ISSTRING Then
                        e$ = "(char*)(" + e$ + ")->chr"
                    End If

                    If LTrim$(RTrim$(e$)) = "0" Then e$ = "NULL"

                End If

                r$ = r$ + e$

                '***special case****
                If n$ = "_MEM" Or (n$ = "MEM" And qb64prefix_set = 1) Then
                    If args = 1 Then
                        If curarg = 1 Then r$ = r$ + ")": GoTo evalfuncspecial
                    End If
                    If args = 2 Then
                        If curarg = 2 Then r$ = r$ + ")": GoTo evalfuncspecial
                    End If
                End If

                If i <> n And nocomma = 0 Then r$ = r$ + ","
                nocomma = 0
                firsti = i + 1
                curarg = curarg + 1
            End If

            If (curarg >= omitarg_first And curarg <= omitarg_last) And i = n Then
                targettyp = CVL(Mid$(id2.arg, curarg * 4 - 4 + 1, 4))
                'IF (targettyp AND ISSTRING) THEN Give_Error "QB64 doesn't support optional string arguments for functions yet!": EXIT FUNCTION
                For fi = 1 To omitargs: r$ = r$ + ",NULL": Next
                curarg = curarg + omitargs
            End If

        Next
    End If

    If n$ = "UBOUND" Or n$ = "LBOUND" Then
        If r$ = ",NULL" Then r$ = ",1"
        If n$ = "UBOUND" Then r2$ = "func_ubound(" Else r2$ = "func_lbound("
        e$ = refer$(ulboundarray$, sourcetyp, 1)
        If Error_Happened Then Exit Function
        'note: ID contins refer'ed array info

        arrayelements = id.arrayelements '2009
        If arrayelements = -1 Then arrayelements = 1 '2009

        r$ = r2$ + e$ + r$ + "," + str2$(arrayelements) + ")"
        typ& = INTEGER64TYPE - ISPOINTER
        GoTo evalfuncspecial
    End If

    If passomit Then
        If omitarg_first Then r$ = r$ + ",0" Else r$ = r$ + ",1"
    End If
    r$ = r$ + ")"

    evalfuncspecial:

    If n$ = "ABS" Then typ& = sourcetyp 'ABS Note: ABS() returns argument #1's type

    'QB-like conversion of math functions returning floating point values
    If n$ = "SIN" Or n$ = "COS" Or n$ = "TAN" Or n$ = "ATN" Or n$ = "SQR" Or n$ = "LOG" Then
        b = sourcetyp And 511
        If sourcetyp And ISFLOAT Then
            'Default is FLOATTYPE
            If b = 64 Then typ& = DOUBLETYPE - ISPOINTER
            If b = 32 Then typ& = SINGLETYPE - ISPOINTER
        Else
            'Default is FLOATTYPE
            If b <= 32 Then typ& = DOUBLETYPE - ISPOINTER
            If b <= 16 Then typ& = SINGLETYPE - ISPOINTER
        End If
    End If

    If id2.ret = ISUDT + (1) Then
        '***special case***
        v$ = "func" + str2$(uniquenumber)
        WriteBufLine defdatahandle, "mem_block " + v$ + ";"
        r$ = "(" + v$ + "=" + r$ + ")"
    End If

    If id2.ccall Then
        If Left$(r$, 11) = "(  char*  )" Then
            r$ = "qbs_new_txt(" + r$ + ")"
        End If
    End If

    If Debug Then Print #9, "evaluatefunc:out:"; r$
    evaluatefunc$ = r$
End Function

Function variablesize$ (i As Long) 'ID or -1 (if ID already 'loaded')
    'Note: assumes whole bytes, no bit offsets/sizes
    If i <> -1 Then getid i
    If Error_Happened Then Exit Function
    'find base size from type
    t = id.t: If t = 0 Then t = id.arraytype
    bytes = (t And 511) \ 8

    If t And ISUDT Then 'correct size for UDTs
        u = t And 511
        bytes = udtxsize(u) \ 8
    End If

    If t And ISSTRING Then 'correct size for strings
        If t And ISFIXEDLENGTH Then
            bytes = id.tsize
        Else
            If id.arraytype Then Give_Error "Cannot determine size of variable-length string array": Exit Function
            variablesize$ = scope$ + "STRING_" + RTrim$(id.n) + "->len"
            Exit Function
        End If
    End If

    If id.arraytype Then 'multiply size for arrays
        n$ = RTrim$(id.callname)
        s$ = str2(bytes) + "*(" + n$ + "[2]&1)" 'note: multiplying by 0 if array not currently defined (affects dynamic arrays)
        arrayelements = id.arrayelements: If arrayelements = -1 Then arrayelements = 1 '2009
        For i2 = 1 To arrayelements
            s$ = s$ + "*" + n$ + "[" + str2(i2 * 4 - 4 + 5) + "]"
        Next
        variablesize$ = "(" + s$ + ")"
        Exit Function
    End If

    variablesize$ = str2(bytes)
End Function



Function evaluatetotyp$ (a2$, targettyp As Long)
    'note: 'evaluatetotyp' no longer performs 'fixoperationorder' on a2$ (in many cases, this has already been done)
    a$ = a2$
    e$ = evaluate(a$, sourcetyp)
    If Error_Happened Then Exit Function

    'Offset protection:
    If sourcetyp And ISOFFSET Then
        If (targettyp And ISOFFSET) = 0 And targettyp >= 0 Then
            Give_Error "Cannot convert _OFFSET type to other types": Exit Function
        End If
    End If

    '-5 size
    '-6 offset
    If targettyp = -4 Or targettyp = -5 Or targettyp = -6 Then '? -> byte_element(offset,element size in bytes)
        If (sourcetyp And ISREFERENCE) = 0 Then Give_Error "Expected variable name/array element": Exit Function
        If (sourcetyp And ISOFFSETINBITS) Then Give_Error "Variable/element cannot be BIT aligned": Exit Function

        ' print "-4: evaluated as ["+e$+"]":sleep 1

        If (sourcetyp And ISUDT) Then 'User Defined Type -> byte_element(offset,bytes)
            If udtxvariable(sourcetyp And 511) Then Give_Error "UDT must have fixed size": Exit Function
            idnumber = Val(e$)
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i)
            u = Val(e$) 'closest parent
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i)
            E = Val(e$)
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i)
            o$ = e$
            getid idnumber
            If Error_Happened Then Exit Function
            n$ = "UDT_" + RTrim$(id.n)
            If id.arraytype Then
                n$ = "ARRAY_" + n$ + "[0]"
                'whole array reference examplename()?
                If Left$(o$, 3) = "(0)" Then
                    'use -2 type method
                    GoTo method2usealludt
                End If
            End If

            dst$ = "(((char*)" + scope$ + n$ + ")+(" + o$ + "))"

            'determine size of element
            If E = 0 Then 'no specific element, use size of entire type
                bytes$ = str2(udtxsize(u) \ 8)
            Else 'a specific element
                If (udtetype(E) And ISSTRING) > 0 And (udtetype(E) And ISFIXEDLENGTH) = 0 And (targettyp = -5) Then
                    evaluatetotyp$ = "(*(qbs**)" + dst$ + ")->len"
                    Exit Function
                ElseIf (udtetype(E) And ISSTRING) > 0 And (udtetype(E) And ISFIXEDLENGTH) = 0 And (targettyp = -4) Then
                    dst$ = "(*((qbs**)((char*)" + scope$ + n$ + "+(" + o$ + "))))->chr"
                    bytes$ = "(*((qbs**)((char*)" + scope$ + n$ + "+(" + o$ + "))))->len"
                    evaluatetotyp$ = "byte_element((uint64)" + dst$ + "," + bytes$ + "," + NewByteElement$ + ")"
                    Exit Function
                End If
                bytes$ = str2(udtesize(E) \ 8)
            End If
            evaluatetotyp$ = "byte_element((uint64)" + dst$ + "," + bytes$ + "," + NewByteElement$ + ")"
            If targettyp = -5 Then evaluatetotyp$ = bytes$
            If targettyp = -6 Then evaluatetotyp$ = dst$
            Exit Function
        End If

        If (sourcetyp And ISARRAY) Then 'Array reference -> byte_element(offset,bytes)
            'whole array reference examplename()?
            If Right$(e$, 2) = sp3 + "0" Then
                'use -2 type method
                If sourcetyp And ISSTRING Then
                    If (sourcetyp And ISFIXEDLENGTH) = 0 Then
                        Give_Error "Cannot pass array of variable-length strings": Exit Function
                    End If
                End If
                GoTo method2useall
            End If
            'assume a specific element
            If sourcetyp And ISSTRING Then
                If sourcetyp And ISFIXEDLENGTH Then
                    idnumber = Val(e$)
                    getid idnumber
                    If Error_Happened Then Exit Function
                    bytes$ = str2(id.tsize)
                    e$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function
                    evaluatetotyp$ = "byte_element((uint64)" + e$ + "->chr," + bytes$ + "," + NewByteElement$ + ")"
                    If targettyp = -5 Then evaluatetotyp$ = bytes$
                    If targettyp = -6 Then evaluatetotyp$ = e$ + "->chr"
                Else
                    e$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function

                    evaluatetotyp$ = "byte_element((uint64)" + e$ + "->chr," + e$ + "->len," + NewByteElement$ + ")"
                    If targettyp = -5 Then evaluatetotyp$ = e$ + "->len"
                    If targettyp = -6 Then evaluatetotyp$ = e$ + "->chr"
                End If
                Exit Function
            End If
            e$ = refer(e$, sourcetyp, 0)
            If Error_Happened Then Exit Function
            e$ = "(&(" + e$ + "))"
            bytes$ = str2((sourcetyp And 511) \ 8)
            evaluatetotyp$ = "byte_element((uint64)" + e$ + "," + bytes$ + "," + NewByteElement$ + ")"
            If targettyp = -5 Then evaluatetotyp$ = bytes$
            If targettyp = -6 Then evaluatetotyp$ = e$
            Exit Function
        End If

        If sourcetyp And ISSTRING Then 'String -> byte_element(offset,bytes)
            If sourcetyp And ISFIXEDLENGTH Then
                idnumber = Val(e$)
                getid idnumber
                If Error_Happened Then Exit Function
                bytes$ = str2(id.tsize)
                e$ = refer(e$, sourcetyp, 0)
                If Error_Happened Then Exit Function
            Else
                e$ = refer(e$, sourcetyp, 0)
                If Error_Happened Then Exit Function
                bytes$ = e$ + "->len"
            End If
            evaluatetotyp$ = "byte_element((uint64)" + e$ + "->chr," + bytes$ + "," + NewByteElement$ + ")"
            If targettyp = -5 Then evaluatetotyp$ = bytes$
            If targettyp = -6 Then evaluatetotyp$ = e$ + "->chr"
            Exit Function
        End If

        'Standard variable -> byte_element(offset,bytes)
        e$ = refer(e$, sourcetyp, 1) 'get the variable's formal name
        If Error_Happened Then Exit Function
        size = (sourcetyp And 511) \ 8 'calculate its size in bytes
        evaluatetotyp$ = "byte_element((uint64)" + e$ + "," + str2(size) + "," + NewByteElement$ + ")"
        If targettyp = -5 Then evaluatetotyp$ = str2(size)
        If targettyp = -6 Then evaluatetotyp$ = e$
        Exit Function

    End If '-4, -5, -6




    If targettyp = -8 Then '? -> _MEM structure helper {offset, fullsize, typeval, elementsize, sf_mem_lock|???}
        If (sourcetyp And ISREFERENCE) = 0 Then Give_Error "Expected variable name/array element": Exit Function
        If (sourcetyp And ISOFFSETINBITS) Then Give_Error "Variable/element cannot be BIT aligned": Exit Function


        If (sourcetyp And ISUDT) Then 'User Defined Type -> byte_element(offset,bytes)
            idnumber = Val(e$)
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i)
            u = Val(e$) 'closest parent
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i)
            E = Val(e$)
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i)
            o$ = e$
            getid idnumber
            If Error_Happened Then Exit Function
            n$ = "UDT_" + RTrim$(id.n)
            If id.arraytype Then
                n$ = "ARRAY_" + n$ + "[0]"
                'whole array reference examplename()?
                If Left$(o$, 3) = "(0)" Then
                    'use -7 type method
                    GoTo method2usealludt__7
                End If
            End If
            'determine size of element
            If E = 0 Then 'no specific element, use size of entire type
                bytes$ = str2(udtxsize(u) \ 8)
                t1 = ISUDT + udtetype(u)
            Else 'a specific element
                bytes$ = str2(udtesize(E) \ 8)
                t1 = udtetype(E)
            End If
            dst$ = "(((char*)" + scope$ + n$ + ")+(" + o$ + "))"
            'evaluatetotyp$ = "byte_element((uint64)" + dst$ + "," + bytes$ + "," + NewByteElement$ + ")"
            'IF targettyp = -5 THEN evaluatetotyp$ = bytes$
            'IF targettyp = -6 THEN evaluatetotyp$ = dst$

            t = Type2MemTypeValue(t1)
            evaluatetotyp$ = "(ptrszint)" + dst$ + "," + bytes$ + "," + str2(t) + "," + bytes$ + ",sf_mem_lock"

            Exit Function
        End If

        If (sourcetyp And ISARRAY) Then 'Array reference -> byte_element(offset,bytes)
            'whole array reference examplename()?
            If Right$(e$, 2) = sp3 + "0" Then
                'use -7 type method
                If sourcetyp And ISSTRING Then
                    If (sourcetyp And ISFIXEDLENGTH) = 0 Then
                        Give_Error "Cannot pass array of variable-length strings": Exit Function
                    End If
                End If
                GoTo method2useall__7
            End If

            idnumber = Val(e$)
            getid idnumber
            If Error_Happened Then Exit Function
            n$ = RTrim$(id.callname)
            lk$ = "(mem_lock*)((ptrszint*)" + n$ + ")[" + str2(4 * id.arrayelements + 4 + 1 - 1) + "]"

            'assume a specific element

            If sourcetyp And ISSTRING Then
                If sourcetyp And ISFIXEDLENGTH Then
                    bytes$ = str2(id.tsize)
                    e$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function
                    'evaluatetotyp$ = "byte_element((uint64)" + e$ + "->chr," + bytes$ + "," + NewByteElement$ + ")"
                    'IF targettyp = -5 THEN evaluatetotyp$ = bytes$
                    'IF targettyp = -6 THEN evaluatetotyp$ = e$ + "->chr"

                    t = Type2MemTypeValue(sourcetyp)
                    evaluatetotyp$ = "(ptrszint)" + e$ + "->chr," + bytes$ + "," + str2(t) + "," + bytes$ + "," + lk$

                Else

                    Give_Error qb64prefix$ + "MEMELEMENT cannot reference variable-length strings": Exit Function

                End If
                Exit Function
            End If

            e$ = refer(e$, sourcetyp, 0)
            If Error_Happened Then Exit Function
            e$ = "(&(" + e$ + "))"
            bytes$ = str2((sourcetyp And 511) \ 8)
            'evaluatetotyp$ = "byte_element((uint64)" + e$ + "," + bytes$ + "," + NewByteElement$ + ")"
            'IF targettyp = -5 THEN evaluatetotyp$ = bytes$
            'IF targettyp = -6 THEN evaluatetotyp$ = e$

            t = Type2MemTypeValue(sourcetyp)
            evaluatetotyp$ = "(ptrszint)" + e$ + "," + bytes$ + "," + str2(t) + "," + bytes$ + "," + lk$

            Exit Function
        End If 'isarray

        If sourcetyp And ISSTRING Then 'String -> byte_element(offset,bytes)
            If sourcetyp And ISFIXEDLENGTH Then
                idnumber = Val(e$)
                getid idnumber
                If Error_Happened Then Exit Function
                bytes$ = str2(id.tsize)
                e$ = refer(e$, sourcetyp, 0)
                If Error_Happened Then Exit Function
            Else
                Give_Error qb64prefix$ + "MEMELEMENT cannot reference variable-length strings": Exit Function
            End If

            'evaluatetotyp$ = "byte_element((uint64)" + e$ + "->chr," + bytes$ + "," + NewByteElement$ + ")"
            'IF targettyp = -5 THEN evaluatetotyp$ = bytes$
            'IF targettyp = -6 THEN evaluatetotyp$ = e$ + "->chr"

            t = Type2MemTypeValue(sourcetyp)
            evaluatetotyp$ = "(ptrszint)" + e$ + "->chr," + bytes$ + "," + str2(t) + "," + bytes$ + ",sf_mem_lock"

            Exit Function
        End If

        'Standard variable -> byte_element(offset,bytes)
        e$ = refer(e$, sourcetyp, 1) 'get the variable's formal name
        If Error_Happened Then Exit Function
        size = (sourcetyp And 511) \ 8 'calculate its size in bytes
        'evaluatetotyp$ = "byte_element((uint64)" + e$ + "," + str2(size) + "," + NewByteElement$ + ")"
        'IF targettyp = -5 THEN evaluatetotyp$ = str2(size)
        'IF targettyp = -6 THEN evaluatetotyp$ = e$

        t = Type2MemTypeValue(sourcetyp)
        evaluatetotyp$ = "(ptrszint)" + e$ + "," + str2(size) + "," + str2(t) + "," + str2(size) + ",sf_mem_lock"

        Exit Function

    End If '-8










    If targettyp = -7 Then '? -> _MEM structure helper {offset, fullsize, typeval, elementsize, sf_mem_lock|???}
        method2useall__7:
        If (sourcetyp And ISREFERENCE) = 0 Then Give_Error "Expected variable name/array element": Exit Function
        If (sourcetyp And ISOFFSETINBITS) Then Give_Error "Variable/element cannot be BIT aligned": Exit Function

        'User Defined Type
        If (sourcetyp And ISUDT) Then
            '           print "CI: -2 type from a UDT":sleep 1
            idnumber = Val(e$)
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i)
            u = Val(e$) 'closest parent
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i)
            E = Val(e$)
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i)

            o$ = e$
            getid idnumber
            If Error_Happened Then Exit Function
            n$ = "UDT_" + RTrim$(id.n): If id.arraytype Then n$ = "ARRAY_" + n$ + "[0]"
            method2usealludt__7:
            bytes$ = variablesize$(-1) + "-(" + o$ + ")"
            If Error_Happened Then Exit Function
            dst$ = "(((char*)" + scope$ + n$ + ")+(" + o$ + "))"


            'evaluatetotyp$ = "byte_element((uint64)" + dst$ + "," + bytes$ + "," + NewByteElement$ + ")"

            'note: myudt.myelement results in a size of 1 because it is a continuous run of no consistent granularity
            If E <> 0 Then size = 1 Else size = udtxsize(u) \ 8

            t = Type2MemTypeValue(sourcetyp)
            evaluatetotyp$ = "(ptrszint)" + dst$ + "," + bytes$ + "," + str2(t) + "," + str2(size) + ",sf_mem_lock"

            Exit Function
        End If

        'Array reference
        If (sourcetyp And ISARRAY) Then
            If sourcetyp And ISSTRING Then
                If (sourcetyp And ISFIXEDLENGTH) = 0 Then
                    Give_Error qb64prefix$ + "MEM cannot reference variable-length strings": Exit Function
                End If
            End If

            idnumber = Val(e$)
            getid idnumber
            If Error_Happened Then Exit Function

            n$ = RTrim$(id.callname)
            lk$ = "(mem_lock*)((ptrszint*)" + n$ + ")[" + str2(4 * id.arrayelements + 4 + 1 - 1) + "]"

            tsize = id.tsize 'used later to determine element size of fixed length strings
            'note: array references consist of idnumber|unmultiplied-element-index
            index$ = Right$(e$, Len(e$) - InStr(e$, sp3)) 'get element index
            bytes$ = variablesize$(-1)
            If Error_Happened Then Exit Function
            e$ = refer(e$, sourcetyp, 0)
            If Error_Happened Then Exit Function

            If sourcetyp And ISSTRING Then
                e$ = "((" + e$ + ")->chr)" '[2013] handle fixed string arrays differently because they are already pointers
            Else
                e$ = "(&(" + e$ + "))"
            End If

            '           print "CI: array: e$["+e$+"], bytes$["+bytes$+"]":sleep 1
            'calculate size of elements
            If sourcetyp And ISSTRING Then
                bytes = tsize
            Else
                bytes = (sourcetyp And 511) \ 8
            End If
            bytes$ = bytes$ + "-(" + str2(bytes) + "*(" + index$ + "))"

            t = Type2MemTypeValue(sourcetyp)
            evaluatetotyp$ = "(ptrszint)" + e$ + "," + bytes$ + "," + str2(t) + "," + str2(bytes) + "," + lk$

            Exit Function
        End If

        'String
        If sourcetyp And ISSTRING Then
            If (sourcetyp And ISFIXEDLENGTH) = 0 Then Give_Error qb64prefix$ + "MEM cannot reference variable-length strings": Exit Function

            idnumber = Val(e$)
            getid idnumber: If Error_Happened Then Exit Function
            bytes$ = str2(id.tsize)
            e$ = refer(e$, sourcetyp, 0): If Error_Happened Then Exit Function

            t = Type2MemTypeValue(sourcetyp)
            evaluatetotyp$ = "(ptrszint)" + e$ + "->chr," + bytes$ + "," + str2(t) + "," + bytes$ + ",sf_mem_lock"

            Exit Function
        End If

        'Standard variable -> byte_element(offset,bytes)
        e$ = refer(e$, sourcetyp, 1) 'get the variable's formal name
        If Error_Happened Then Exit Function
        size = (sourcetyp And 511) \ 8 'calculate its size in bytes

        t = Type2MemTypeValue(sourcetyp)
        evaluatetotyp$ = "(ptrszint)" + e$ + "," + str2(size) + "," + str2(t) + "," + str2(size) + ",sf_mem_lock"

        Exit Function

    End If '-7 _MEM structure helper


    If targettyp = -2 Then '? -> byte_element(offset,max possible bytes)
        method2useall:
        ' print "CI: eval2typ detected target type of -2 for ["+a2$+"] evaluated as ["+e$+"]":sleep 1

        If (sourcetyp And ISREFERENCE) = 0 Then Give_Error "Expected variable name/array element": Exit Function
        If (sourcetyp And ISOFFSETINBITS) Then Give_Error "Variable/element cannot be BIT aligned": Exit Function

        'User Defined Type -> byte_element(offset,bytes)
        If (sourcetyp And ISUDT) Then
            '           print "CI: -2 type from a UDT":sleep 1
            idnumber = Val(e$)
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i)
            u = Val(e$) 'closest parent
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i)
            E = Val(e$)
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i)
            o$ = e$
            getid idnumber
            If Error_Happened Then Exit Function
            n$ = "UDT_" + RTrim$(id.n): If id.arraytype Then n$ = "ARRAY_" + n$ + "[0]"
            method2usealludt:
            bytes$ = variablesize$(-1) + "-(" + o$ + ")"
            If Error_Happened Then Exit Function
            dst$ = "(((char*)" + scope$ + n$ + ")+(" + o$ + "))"
            evaluatetotyp$ = "byte_element((uint64)" + dst$ + "," + bytes$ + "," + NewByteElement$ + ")"
            If targettyp = -5 Then evaluatetotyp$ = bytes$
            If targettyp = -6 Then evaluatetotyp$ = dst$
            Exit Function
        End If

        'Array reference -> byte_element(offset,bytes)
        If (sourcetyp And ISARRAY) Then
            'array of variable length strings (special case, can only refer to single element)
            If sourcetyp And ISSTRING Then
                If (sourcetyp And ISFIXEDLENGTH) = 0 Then
                    e$ = refer(e$, sourcetyp, 0)
                    If Error_Happened Then Exit Function
                    evaluatetotyp$ = "byte_element((uint64)" + e$ + "->chr," + e$ + "->len," + NewByteElement$ + ")"
                    If targettyp = -5 Then evaluatetotyp$ = e$ + "->len"
                    If targettyp = -6 Then evaluatetotyp$ = e$ + "->chr"
                    Exit Function
                End If
            End If
            idnumber = Val(e$)
            getid idnumber
            If Error_Happened Then Exit Function
            tsize = id.tsize 'used later to determine element size of fixed length strings
            'note: array references consist of idnumber|unmultiplied-element-index
            index$ = Right$(e$, Len(e$) - InStr(e$, sp3)) 'get element index
            bytes$ = variablesize$(-1)
            If Error_Happened Then Exit Function
            e$ = refer(e$, sourcetyp, 0)
            If Error_Happened Then Exit Function
            e$ = "(&(" + e$ + "))"
            '           print "CI: array: e$["+e$+"], bytes$["+bytes$+"]":sleep 1
            'calculate size of elements
            If sourcetyp And ISSTRING Then
                bytes = tsize
            Else
                bytes = (sourcetyp And 511) \ 8
            End If
            bytes$ = bytes$ + "-(" + str2(bytes) + "*(" + index$ + "))"
            evaluatetotyp$ = "byte_element((uint64)" + e$ + "," + bytes$ + "," + NewByteElement$ + ")"
            If targettyp = -5 Then evaluatetotyp$ = bytes$
            If targettyp = -6 Then evaluatetotyp$ = e$
            '           print "CI: array ->["+"byte_element((uint64)" + e$ + "," + bytes$+ ","+NewByteElement$+")"+"]":sleep 1
            Exit Function
        End If

        'String -> byte_element(offset,bytes)
        If sourcetyp And ISSTRING Then
            If sourcetyp And ISFIXEDLENGTH Then
                idnumber = Val(e$)
                getid idnumber
                If Error_Happened Then Exit Function
                bytes$ = str2(id.tsize)
                e$ = refer(e$, sourcetyp, 0)
                If Error_Happened Then Exit Function
            Else
                e$ = refer(e$, sourcetyp, 0)
                If Error_Happened Then Exit Function
                bytes$ = e$ + "->len"
            End If
            evaluatetotyp$ = "byte_element((uint64)" + e$ + "->chr," + bytes$ + "," + NewByteElement$ + ")"
            If targettyp = -5 Then evaluatetotyp$ = bytes$
            If targettyp = -6 Then evaluatetotyp$ = e$ + "->chr"
            Exit Function
        End If

        'Standard variable -> byte_element(offset,bytes)
        e$ = refer(e$, sourcetyp, 1) 'get the variable's formal name
        If Error_Happened Then Exit Function
        size = (sourcetyp And 511) \ 8 'calculate its size in bytes
        evaluatetotyp$ = "byte_element((uint64)" + e$ + "," + str2(size) + "," + NewByteElement$ + ")"
        If targettyp = -5 Then evaluatetotyp$ = str2(size)
        If targettyp = -6 Then evaluatetotyp$ = e$
        Exit Function

    End If '-2 byte_element(offset,bytes)



    'string?
    If (sourcetyp And ISSTRING) <> (targettyp And ISSTRING) Then
        Give_Error "Illegal string-number conversion": Exit Function
    End If

    If (sourcetyp And ISSTRING) Then
        evaluatetotyp$ = e$
        If (sourcetyp And ISREFERENCE) Then
            evaluatetotyp$ = refer(e$, sourcetyp, 0)
            If Error_Happened Then Exit Function
        End If
        Exit Function
    End If

    'pointer required?
    If (targettyp And ISPOINTER) Then
        Give_Error "evaluatetotyp received a request for a pointer (unsupported)": Exit Function
        '...
        Give_Error "Invalid pointer": Exit Function
    End If

    'change to "non-pointer" value
    If (sourcetyp And ISREFERENCE) Then
        e$ = refer(e$, sourcetyp, 0)
        If Error_Happened Then Exit Function
    End If
    'check if successful
    If (sourcetyp And ISPOINTER) Then
        Give_Error "evaluatetotyp couldn't convert pointer type!": Exit Function
    End If

    'round to integer if required
    If (sourcetyp And ISFLOAT) Then
        If (targettyp And ISFLOAT) = 0 Then
            bits = targettyp And 511
            '**32 rounding fix
            If bits <= 16 Then e$ = "qbr_float_to_long(" + e$ + ")"
            If bits > 16 And bits < 32 Then e$ = "qbr_double_to_long(" + e$ + ")"
            If bits >= 32 Then e$ = "qbr(" + e$ + ")"
        End If
    End If

    evaluatetotyp$ = e$
End Function

Function findid& (n2$)
    n$ = UCase$(n2$) 'case insensitive

    'return all strings as 'not found'
    If Asc(n$) = 34 Then GoTo noid

    'if findidsecondarg was set, it will be used for finding the name of a sub (not a func or variable)
    secondarg$ = findidsecondarg: findidsecondarg = ""

    'if findanotherid was set, findid will continue scan from last index, otherwise, it will begin a new search
    findanother = findanotherid: findanotherid = 0
    If findanother <> 0 And findidinternal <> 2 Then Give_Error "FINDID() ERROR: Invalid repeat search requested!": Exit Function 'cannot continue search, no more indexes left!
    If Error_Happened Then Exit Function
    '(the above should never happen)
    findid& = 2 '2=not finished searching all indexes

    'seperate symbol from name (if a symbol has been added), this is the only way symbols can be passed to findid
    i = 0
    i = InStr(n$, "~"): If i Then GoTo gotsc
    i = InStr(n$, "`"): If i Then GoTo gotsc
    i = InStr(n$, "%"): If i Then GoTo gotsc
    i = InStr(n$, "&"): If i Then GoTo gotsc
    i = InStr(n$, "!"): If i Then GoTo gotsc
    i = InStr(n$, "#"): If i Then GoTo gotsc
    i = InStr(n$, "$"): If i Then GoTo gotsc
    gotsc:
    If i Then
        sc$ = Right$(n$, Len(n$) - i + 1): n$ = Left$(n$, i - 1)
        If sc$ = "`" Or sc$ = "~`" Then sc$ = sc$ + "1" 'clarify abbreviated 1 bit reference
    Else
        '''    'no symbol passed, so check what symbol could be assumed under the current DEF...
        '''    v = ASC(n$): IF v = 95 THEN v = 27 ELSE v = v - 64
        '''    IF v >= 1 AND v <= 27 THEN 'safeguard against n$ not being a standard name
        '''        couldhavesc$ = defineextaz(v)
        '''        IF couldhavesc$ = "`" OR couldhavesc$ = "~`" THEN couldhavesc$ = couldhavesc$ + "1" 'clarify abbreviated 1 bit reference
        '''    END IF 'safeguard
    End If

    'optimizations for later comparisons
    insf$ = subfunc + Space$(256 - Len(subfunc))
    secondarg$ = secondarg$ + Space$(256 - Len(secondarg$))
    If Len(sc$) Then scpassed = 1: sc$ = sc$ + Space$(8 - Len(sc$)) Else scpassed = 0
    '''IF LEN(couldhavesc$) THEN couldhavesc$ = couldhavesc$ + SPACE$(8 - LEN(couldhavesc$)): couldhavescpassed = 1 ELSE couldhavescpassed = 0
    If Len(n$) < 256 Then n$ = n$ + Space$(256 - Len(n$))

    'FUNCTION HashFind (a$, searchflags, resultflags, resultreference)
    '(0,1,2)z=hashfind[rev]("RUMI",Hashflag_label,resflag,resref)
    '0=doesn't exist
    '1=found, no more items to scan
    '2=found, more items still to scan

    'NEW HASH SYSTEM
    n$ = RTrim$(n$)
    If findanother Then
        hashretry:
        z = HashFindCont(unrequired, i)
    Else
        z = HashFind(n$, 1, unrequired, i)
    End If
    findidinternal = z
    If z = 0 Then GoTo noid
    findid = z


    'continue from previous position?
    ''IF findanother THEN start = findidinternal ELSE start = idn

    ''FOR i = start TO 1 STEP -1

    ''    findidinternal = i - 1
    ''    IF findidinternal = 0 THEN findid& = 1 '1=found id, but no more to search

    ''    IF ids(i).n = n$ THEN 'same name?

    'in scope?
    If ids(i).subfunc = 0 And ids(i).share = 0 Then 'scope check required (not a shared variable or the name of a sub/function)
        If ids(i).insubfunc <> insf$ Then GoTo findidnomatch
    End If

    'some subs require a second argument (eg. PUT #, DEF SEG, etc.)
    If ids(i).subfunc = 2 Then
        If Asc(ids(i).secondargmustbe) <> 32 Then 'exists?
            If RTrim$(secondarg$) = UCase$(RTrim$(ids(i).secondargmustbe)) Then
            ElseIf qb64prefix_set = 1 And Left$(ids(i).secondargmustbe, 1) = "_" And Left$(secondarg$, 1) <> "_" And RTrim$(secondarg$) = UCase$(Mid$(RTrim$(ids(i).secondargmustbe), 2)) Then
            Else
                GoTo findidnomatch
            End If
        End If
        If Asc(ids(i).secondargcantbe) <> 32 Then 'exists?
            If RTrim$(secondarg$) <> UCase$(RTrim$(ids(i).secondargcantbe)) Then
            ElseIf qb64prefix_set = 1 And Left$(ids(i).secondargcantbe, 1) = "_" And Left$(secondarg$, 1) <> "_" And RTrim$(secondarg$) <> UCase$(Mid$(RTrim$(ids(i).secondargcantbe), 2)) Then
            Else
                GoTo findidnomatch
            End If
        End If
    End If 'second sub argument possible

    'must have symbol?
    'typically for variables defined automatically or by a symbol and not the full type name
    imusthave = CVI(ids(i).musthave) 'speed up checks of first 2 characters
    amusthave = imusthave And 255 'speed up checks of first character
    If amusthave <> 32 Then
        If scpassed Then
            If sc$ = ids(i).musthave Then GoTo findidok
        End If
        '''    IF couldhavescpassed THEN
        '''        IF couldhavesc$ = ids(i).musthave THEN GOTO findidok
        '''    END IF
        'Q: why is the above triple-commented?
        'A: because if something must have a symbol to refer to it, then a could-have is
        '   not sufficient, and it could mask shared variables in global scope

        'note: symbol defined fixed length strings cannot be referred to by $ without an extension
        'note: sc$ and couldhavesc$ are already changed from ` to `1 to match stored musthave
        GoTo findidnomatch
    End If

    'may have symbol?
    'typically for variables formally dim'd
    'note: couldhavesc$ needn't be considered for mayhave checks
    If scpassed Then 'symbol was passed, so it must match the mayhave symbol
        imayhave = CVI(ids(i).mayhave) 'speed up checks of first 2 characters
        amayhave = imayhave And 255 'speed up checks of first character
        If amayhave = 32 Then GoTo findidnomatch 'it cannot have the symbol passed (nb. musthave symbols have already been ok'd)
        'note: variable length strings are not a problem here, as they can only have one possible extension

        If amayhave = 36 Then '"$"
            If imayhave <> 8228 Then '"$ "
                'it is a fixed length string
                If CVI(sc$) = 8228 Then GoTo findidok 'allow myvariable$ to become myvariable$10
                'allow later comparison to verify if extension is correct
            End If
        End If
        If sc$ <> ids(i).mayhave Then GoTo findidnomatch
    End If 'scpassed

    'return id
    findidok:

    id = ids(i)

    t = id.t
    temp$ = refer$(str2$(i), t, 1)
    manageVariableList "", temp$, 0, 1
    currentid = i
    Exit Function

    'END IF 'same name
    findidnomatch:
    'NEXT
    If z = 2 Then GoTo hashretry

    'totally unclassifiable
    noid:
    findid& = 0
    currentid = -1
End Function

Function FindArray (secure$)
    FindArray = -1
    n$ = secure$
    If Debug Then Print #9, "func findarray:in:" + n$
    If alphanumeric(Asc(n$)) = 0 Then FindArray = 0: Exit Function

    'establish whether n$ includes an extension
    i = InStr(n$, "~"): If i Then sc$ = Right$(n$, Len(n$) - i + 1): n$ = Left$(n$, i - 1): GoTo gotsc2
    i = InStr(n$, "`"): If i Then sc$ = Right$(n$, Len(n$) - i + 1): n$ = Left$(n$, i - 1): GoTo gotsc2
    i = InStr(n$, "%"): If i Then sc$ = Right$(n$, Len(n$) - i + 1): n$ = Left$(n$, i - 1): GoTo gotsc2
    i = InStr(n$, "&"): If i Then sc$ = Right$(n$, Len(n$) - i + 1): n$ = Left$(n$, i - 1): GoTo gotsc2
    i = InStr(n$, "!"): If i Then sc$ = Right$(n$, Len(n$) - i + 1): n$ = Left$(n$, i - 1): GoTo gotsc2
    i = InStr(n$, "#"): If i Then sc$ = Right$(n$, Len(n$) - i + 1): n$ = Left$(n$, i - 1): GoTo gotsc2
    i = InStr(n$, "$"): If i Then sc$ = Right$(n$, Len(n$) - i + 1): n$ = Left$(n$, i - 1): GoTo gotsc2
    gotsc2:
    n2$ = n$ + sc$

    If sc$ <> "" Then
        'has an extension
        'note! findid must unambiguify ` to `5 or $ to $10 where applicable
        try = findid(n2$): If Error_Happened Then Exit Function
        Do While try
            If id.arraytype Then
                Exit Function
            End If
            If try = 2 Then findanotherid = 1: try = findid(n2$) Else try = 0
            If Error_Happened Then Exit Function
        Loop

    Else
        'no extension

        '1. pass as is, without any extension (local)
        try = findid(n2$): If Error_Happened Then Exit Function
        Do While try
            If id.arraytype Then
                If subfuncn = 0 Then Exit Function
                If id.insubfuncn = subfuncn Then Exit Function
            End If
            If try = 2 Then findanotherid = 1: try = findid(n2$) Else try = 0
            If Error_Happened Then Exit Function
        Loop

        '2. that failed, so apply the _define'd extension and pass (local)
        a = Asc(UCase$(n$)): If a = 95 Then a = 91
        a = a - 64 'so A=1, Z=27 and _=28
        n2$ = n$ + defineextaz(a)
        try = findid(n2$): If Error_Happened Then Exit Function
        Do While try
            If id.arraytype Then
                If subfuncn = 0 Then Exit Function
                If id.insubfuncn = subfuncn Then Exit Function
                Exit Function
            End If
            If try = 2 Then findanotherid = 1: try = findid(n2$) Else try = 0
            If Error_Happened Then Exit Function
        Loop

        '3. pass as is, without any extension (global)
        n2$ = n$
        try = findid(n2$): If Error_Happened Then Exit Function
        Do While try
            If id.arraytype Then
                Exit Function
            End If
            If try = 2 Then findanotherid = 1: try = findid(n2$) Else try = 0
            If Error_Happened Then Exit Function
        Loop

        '4. that failed, so apply the _define'd extension and pass (global)
        a = Asc(UCase$(n$)): If a = 95 Then a = 91
        a = a - 64 'so A=1, Z=27 and _=28
        n2$ = n$ + defineextaz(a)
        try = findid(n2$): If Error_Happened Then Exit Function
        Do While try
            If id.arraytype Then
                Exit Function
            End If
            If try = 2 Then findanotherid = 1: try = findid(n2$) Else try = 0
            If Error_Happened Then Exit Function
        Loop

    End If
    FindArray = 0
End Function





Function fixoperationorder$ (savea$)
    Static uboundlbound As _Byte

    a$ = savea$
    If Debug Then Print #9, "fixoperationorder:in:" + a$

    fooindwel = fooindwel + 1

    n = numelements(a$) 'n is maintained throughout function

    If fooindwel = 1 Then 'actions to take on initial call only
        uboundlbound = 0

        'Quick check for duplicate binary operations
        uppercasea$ = UCase$(a$) 'capitalize it once to reduce calls to ucase over and over
        For i = 1 To n - 1
            temp1$ = getelement(uppercasea$, i)
            temp2$ = getelement(uppercasea$, i + 1)
            If temp1$ = "AND" And temp2$ = "AND" Then Give_Error "Error: AND AND": Exit Function
            If temp1$ = "OR" And temp2$ = "OR" Then Give_Error "Error: OR OR": Exit Function
            If temp1$ = "XOR" And temp2$ = "XOR" Then Give_Error "Error: XOR XOR": Exit Function
            If temp1$ = "IMP" And temp2$ = "IMP" Then Give_Error "Error: IMP IMP": Exit Function
            If temp1$ = "EQV" And temp2$ = "EQV" Then Give_Error "Error: EQV EQV": Exit Function
        Next

        '----------------A. 'Quick' mismatched brackets check----------------
        b = 0
        a2$ = sp + a$ + sp
        b1$ = sp + "(" + sp
        b2$ = sp + ")" + sp
        i = 1
        findmmb:
        i1 = InStr(i, a2$, b1$)
        i2 = InStr(i, a2$, b2$)
        i3 = i1
        If i2 Then
            If i1 = 0 Then
                i3 = i2
            Else
                If i2 < i1 Then i3 = i2
            End If
        End If
        If i3 Then
            If i3 = i1 Then b = b + 1
            If i3 = i2 Then b = b - 1
            i = i3 + 2
            If b < 0 Then Give_Error "Missing (": Exit Function
            GoTo findmmb
        End If
        If b > 0 Then Give_Error "Missing )": Exit Function

        '----------------B. 'Quick' correction of over-use of +,- ----------------
        'note: the results of this change are beneficial to foolayout
        a2$ = sp + a$ + sp

        'rule 1: change ++ to +
        rule1:
        i = InStr(a2$, sp + "+" + sp + "+" + sp)
        If i Then
            a2$ = Left$(a2$, i + 2) + Right$(a2$, Len(a2$) - i - 4)
            a$ = Mid$(a2$, 2, Len(a2$) - 2)
            n = n - 1
            If Debug Then Print #9, "fixoperationorder:+/-:" + a$
            GoTo rule1
        End If

        'rule 2: change -+ to -
        rule2:
        i = InStr(a2$, sp + "-" + sp + "+" + sp)
        If i Then
            a2$ = Left$(a2$, i + 2) + Right$(a2$, Len(a2$) - i - 4)
            a$ = Mid$(a2$, 2, Len(a2$) - 2)
            n = n - 1
            If Debug Then Print #9, "fixoperationorder:+/-:" + a$
            GoTo rule2
        End If

        'rule 3: change anyoperator-- to anyoperator
        rule3:
        If InStr(a2$, sp + "-" + sp + "-" + sp) Then
            For i = 1 To n - 2
                If isoperator(getelement(a$, i)) Then
                    If getelement(a$, i + 1) = "-" Then
                        If getelement(a$, i + 2) = "-" Then
                            removeelements a$, i + 1, i + 2, 0
                            a2$ = sp + a$ + sp
                            n = n - 2
                            If Debug Then Print #9, "fixoperationorder:+/-:" + a$
                            GoTo rule3
                        End If
                    End If
                End If
            Next
        End If 'rule 3



        '----------------C. 'Quick' location of negation----------------
        'note: the results of this change are beneficial to foolayout

        'for numbers...
        'before: anyoperator,-,number
        'after:  anyoperator,-number

        'for variables...
        'before: anyoperator,-,variable
        'after:  anyoperator,CHR$(241),variable

        'exception for numbers followed by ^... (they will be bracketed up along with the ^ later)
        'before: anyoperator,-,number,^
        'after:  anyoperator,CHR$(241),number,^

        For i = 1 To n - 1
            If i > n - 1 Then Exit For 'n changes, so manually exit if required

            If Asc(getelement(a$, i)) = 45 Then '-

                neg = 0
                If i = 1 Then
                    neg = 1
                Else
                    a2$ = getelement(a$, i - 1)
                    c = Asc(a2$)
                    If c = 40 Or c = 44 Then '(,
                        neg = 1
                    Else
                        If isoperator(a2$) Then neg = 1
                    End If '()
                End If 'i=1
                If neg = 1 Then

                    a2$ = getelement(a$, i + 1)
                    c = Asc(a2$)
                    If c >= 48 And c <= 57 Then
                        c2 = 0: If i < n - 1 Then c2 = Asc(getelement(a$, i + 2))
                        If c2 <> 94 Then 'not ^
                            'number...
                            i2 = InStr(a2$, ",")
                            If i2 And Asc(a2$, i2 + 1) <> 38 Then '&H/&O/&B values don't need the assumed negation
                                a2$ = "-" + Left$(a2$, i2) + "-" + Right$(a2$, Len(a2$) - i2)
                            Else
                                a2$ = "-" + a2$
                            End If
                            removeelements a$, i, i + 1, 0
                            insertelements a$, i - 1, a2$
                            n = n - 1
                            If Debug Then Print #9, "fixoperationorder:negation:" + a$

                            GoTo negdone

                        End If
                    End If


                    'not a number (or for exceptions)...
                    removeelements a$, i, i, 0
                    insertelements a$, i - 1, Chr$(241)
                    If Debug Then Print #9, "fixoperationorder:negation:" + a$

                End If 'isoperator
            End If '-
            negdone:
        Next



    End If 'fooindwel=1



    '----------------D. 'Quick' Add 'power of' with negation {}bracketing to bottom bracket level----------------
    pownegused = 0
    powneg:
    If InStr(a$, "^" + sp + Chr$(241)) Then 'quick check
        b = 0
        b1 = 0
        For i = 1 To n
            a2$ = getelement(a$, i)
            c = Asc(a2$)
            If c = 40 Then b = b + 1
            If c = 41 Then b = b - 1
            If b = 0 Then
                If b1 Then
                    If isoperator(a2$) Then
                        If a2$ <> "^" And a2$ <> Chr$(241) Then
                            insertelements a$, i - 1, "}"
                            insertelements a$, b1, "{"
                            n = n + 2
                            If Debug Then Print #9, "fixoperationorder:^-:" + a$
                            GoTo powneg
                            pownegused = 1
                        End If
                    End If
                End If
                If c = 94 Then '^
                    If getelement$(a$, i + 1) = Chr$(241) Then b1 = i: i = i + 1
                End If
            End If 'b=0
        Next i
        If b1 Then
            insertelements a$, b1, "{"
            a$ = a$ + sp + "}"
            n = n + 2
            If Debug Then Print #9, "fixoperationorder:^-:" + a$
            pownegused = 1
            GoTo powneg
        End If

    End If 'quick check


    '----------------E. Find lowest & highest operator level in bottom bracket level----------------
    NOT_recheck:
    lco = 255
    hco = 0
    b = 0
    For i = 1 To n
        a2$ = getelement(a$, i)
        c = Asc(a2$)
        If c = 40 Or c = 123 Then b = b + 1
        If c = 41 Or c = 125 Then b = b - 1
        If b = 0 Then
            op = isoperator(a2$)
            If op Then
                If op < lco Then lco = op
                If op > hco Then hco = op
            End If
        End If
    Next

    '----------------F. Add operator {}bracketting----------------
    'apply bracketting only if required
    If hco <> 0 Then 'operators were used
        If lco <> hco Then
            'brackets needed

            If lco = 6 Then 'NOT exception
                'Step 1: Add brackets as follows ~~~ ( NOT ( ~~~ NOT ~~~ NOT ~~~ NOT ~~~ ))
                'Step 2: Recheck line from beginning
                If n = 1 Then Give_Error "Expected NOT ...": Exit Function
                b = 0
                For i = 1 To n
                    a2$ = getelement(a$, i)
                    c = Asc(a2$)
                    If c = 40 Or c = 123 Then b = b + 1
                    If c = 41 Or c = 125 Then b = b - 1
                    If b = 0 Then
                        If UCase$(a2$) = "NOT" Then
                            If i = n Then Give_Error "Expected NOT ...": Exit Function
                            If i = 1 Then a$ = "NOT" + sp + "{" + sp + getelements$(a$, 2, n) + sp + "}": n = n + 2: GoTo lco_bracketting_done
                            a$ = getelements$(a$, 1, i - 1) + sp + "{" + sp + "NOT" + sp + "{" + sp + getelements$(a$, i + 1, n) + sp + "}" + sp + "}"
                            n = n + 4
                            GoTo NOT_recheck
                        End If 'not
                    End If 'b=0
                Next
            End If 'NOT exception

            n2 = n
            b = 0
            a3$ = "{"
            n = 1
            For i = 1 To n2
                a2$ = getelement(a$, i)
                c = Asc(a2$)
                If c = 40 Or c = 123 Then b = b + 1
                If c = 41 Or c = 125 Then b = b - 1
                If b = 0 Then
                    op = isoperator(a2$)
                    If op = lco Then
                        If i = 1 Then
                            a3$ = a2$ + sp + "{"
                            n = 2
                        Else
                            If i = n2 Then Give_Error "Expected variable/value after '" + UCase$(a2$) + "'": Exit Function
                            a3$ = a3$ + sp + "}" + sp + a2$ + sp + "{"
                            n = n + 3
                        End If
                        GoTo fixop0
                    End If

                End If 'b=0
                a3$ = a3$ + sp + a2$
                n = n + 1
                fixop0:
            Next
            a3$ = a3$ + sp + "}"
            n = n + 1
            a$ = a3$

            lco_bracketting_done:
            If Debug Then Print #9, "fixoperationorder:lco bracketing["; lco; ","; hco; "]:" + a$

            '--------(F)G. Remove indwelling {}bracketting from power-negation--------
            If pownegused Then
                b = 0
                i = 0
                Do
                    i = i + 1
                    If i > n Then Exit Do
                    c = Asc(getelement(a$, i))
                    If c = 41 Or c = 125 Then b = b - 1
                    If (c = 123 Or c = 125) And b <> 0 Then
                        removeelements a$, i, i, 0
                        n = n - 1
                        i = i - 1
                        If Debug Then Print #9, "fixoperationorder:^- {} removed:" + a$
                    End If
                    If c = 40 Or c = 123 Then b = b + 1
                Loop
            End If 'pownegused

        End If 'lco <> hco
    End If 'hco <> 0

    '--------Bracketting of multiple NOT/negation unary operators--------
    If Left$(a$, 4) = Chr$(241) + sp + Chr$(241) + sp Then
        a$ = Chr$(241) + sp + "{" + sp + getelements$(a$, 2, n) + sp + "}": n = n + 2
    End If
    If UCase$(Left$(a$, 8)) = "NOT" + sp + "NOT" + sp Then
        a$ = "NOT" + sp + "{" + sp + getelements$(a$, 2, n) + sp + "}": n = n + 2
    End If

    '----------------H. Identification/conversion of elements within bottom bracket level----------------
    'actions performed:
    '   ->builds f$(tlayout)
    '   ->adds symbols to all numbers
    '   ->evaluates constants to numbers

    f$ = ""
    b = 0
    c = 0
    lastt = 0: lastti = 0
    For i = 1 To n
        f2$ = getelement(a$, i)
        lastc = c
        c = Asc(f2$)

        If c = 40 Or c = 123 Then
            If c <> 40 Or b <> 0 Then f2$ = "" 'skip temporary & indwelling  brackets
            b = b + 1
            GoTo classdone
        End If
        If c = 41 Or c = 125 Then

            b = b - 1

            'check for "("+sp+")" after literal-string, operator, number or nothing
            If b = 0 Then 'must be within the lowest level
                If c = 41 Then
                    If lastc = 40 Then
                        If lastti = i - 2 Or lastti = 0 Then
                            If lastt >= 0 And lastt <= 3 Then
                                Give_Error "Unexpected (": Exit Function
                            End If
                        End If
                    End If
                End If
            End If

            If c <> 41 Or b <> 0 Then f2$ = "" 'skip temporary & indwelling  brackets
            GoTo classdone
        End If

        If b = 0 Then

            'classifications/conversions:
            '1. quoted string ("....)
            '2. number
            '3. operator
            '4. constant
            '5. variable/array/udt/function (note: nothing can share the same name as a function except a label)


            'quoted string?
            If c = 34 Then '"
                lastt = 1: lastti = i

                'convert \\ to \
                'convert \??? to CHR$(&O???)
                x2 = 1
                x = InStr(x2, f2$, "\")
                Do While x
                    c2 = Asc(f2$, x + 1)
                    If c2 = 92 Then '\\
                        f2$ = Left$(f2$, x) + Right$(f2$, Len(f2$) - x - 1) 'remove second \
                        x2 = x + 1
                    Else
                        'octal triplet value
                        c3 = (Asc(f2$, x + 3) - 48) + (Asc(f2$, x + 2) - 48) * 8 + (Asc(f2$, x + 1) - 48) * 64
                        f2$ = Left$(f2$, x - 1) + Chr$(c3) + Right$(f2$, Len(f2$) - x - 3)
                        x2 = x + 1
                    End If
                    x = InStr(x2, f2$, "\")
                Loop
                'remove ',len' (if it exists)
                x = InStr(2, f2$, Chr$(34) + ","): If x Then f2$ = Left$(f2$, x)
                GoTo classdone
            End If

            'number?
            If (c >= 48 And c <= 57) Or c = 45 Then
                lastt = 2: lastti = i

                x = InStr(f2$, ",")
                If x Then
                    removeelements a$, i, i, 0: insertelements a$, i - 1, Left$(f2$, x - 1)
                    f2$ = Right$(f2$, Len(f2$) - x)
                End If

                If x = 0 Then
                    c2 = Asc(f2$, Len(f2$))
                    If c2 < 48 Or c2 > 57 Then
                        x = 1 'extension given
                    Else
                        x = InStr(f2$, "`")
                    End If
                End If

                'add appropriate integer symbol if none present
                If x = 0 Then
                    f3$ = f2$
                    s$ = ""
                    If c = 45 Then
                        s$ = "&&"
                        If (f3$ < "-2147483648" And Len(f3$) = 11) Or Len(f3$) < 11 Then s$ = "&"
                        If (f3$ <= "-32768" And Len(f3$) = 6) Or Len(f3$) < 6 Then s$ = "%"
                    Else
                        s$ = "~&&"
                        If (f3$ <= "9223372036854775807" And Len(f3$) = 19) Or Len(f3$) < 19 Then s$ = "&&"
                        If (f3$ <= "2147483647" And Len(f3$) = 10) Or Len(f3$) < 10 Then s$ = "&"
                        If (f3$ <= "32767" And Len(f3$) = 5) Or Len(f3$) < 5 Then s$ = "%"
                    End If
                    f3$ = f3$ + s$
                    removeelements a$, i, i, 0: insertelements a$, i - 1, f3$
                End If 'x=0

                GoTo classdone
            End If

            'operator?
            If isoperator(f2$) Then
                lastt = 3: lastti = i
                If Len(f2$) > 1 Then
                    If f2$ <> SCase2$(f2$) Then
                        f2$ = SCase2$(f2$)
                        removeelements a$, i, i, 0
                        insertelements a$, i - 1, f2$
                    End If
                End If
                'append negation
                If f2$ = Chr$(241) Then f$ = f$ + sp + "-": GoTo classdone_special
                GoTo classdone
            End If

            If alphanumeric(c) Then
                lastt = 4: lastti = i

                If i < n Then nextc = Asc(getelement(a$, i + 1)) Else nextc = 0

                ' a constant?
                If nextc <> 40 Then '<>"(" (not an array)
                    If lastc <> 46 Then '<>"." (not an element of a UDT)

                        e$ = UCase$(f2$)
                        es$ = removesymbol$(e$)
                        If Error_Happened Then Exit Function

                        hashfound = 0
                        hashname$ = e$
                        hashchkflags = HASHFLAG_CONSTANT
                        hashres = HashFindRev(hashname$, hashchkflags, hashresflags, hashresref)
                        Do While hashres
                            If constsubfunc(hashresref) = subfuncn Or constsubfunc(hashresref) = 0 Then
                                If constdefined(hashresref) Then
                                    hashfound = 1
                                    Exit Do
                                End If
                            End If
                            If hashres <> 1 Then hashres = HashFindCont(hashresflags, hashresref) Else hashres = 0
                        Loop

                        If hashfound Then
                            i2 = hashresref
                            'FOR i2 = constlast TO 0 STEP -1
                            'IF e$ = constname(i2) THEN





                            'is a STATIC variable overriding this constant?
                            staticvariable = 0
                            try = findid(e$ + es$)
                            If Error_Happened Then Exit Function
                            Do While try
                                If id.arraytype = 0 Then staticvariable = 1: Exit Do 'if it's not an array, it's probably a static variable
                                If try = 2 Then findanotherid = 1: try = findid(e$ + es$) Else try = 0
                                If Error_Happened Then Exit Function
                            Loop
                            'add symbol and try again
                            If staticvariable = 0 Then
                                If Len(es$) = 0 Then
                                    a = Asc(UCase$(e$)): If a = 95 Then a = 91
                                    a = a - 64 'so A=1, Z=27 and _=28
                                    es2$ = defineextaz(a)
                                    try = findid(e$ + es2$)
                                    If Error_Happened Then Exit Function
                                    Do While try
                                        If id.arraytype = 0 Then staticvariable = 1: Exit Do 'if it's not an array, it's probably a static variable
                                        If try = 2 Then findanotherid = 1: try = findid(e$ + es2$) Else try = 0
                                        If Error_Happened Then Exit Function
                                    Loop
                                End If
                            End If

                            If staticvariable = 0 Then

                                t = consttype(i2)
                                If t And ISSTRING Then
                                    If Len(es$) > 0 And es$ <> "$" Then Give_Error "Type mismatch": Exit Function
                                    e$ = conststring(i2)
                                Else 'not a string
                                    If Len(es$) Then et = typname2typ(es$) Else et = 0
                                    If Error_Happened Then Exit Function
                                    If et And ISSTRING Then Give_Error "Type mismatch": Exit Function
                                    'convert value to general formats
                                    If t And ISFLOAT Then
                                        v## = constfloat(i2)
                                        v&& = v##
                                        v~&& = v&&
                                    Else
                                        If t And ISUNSIGNED Then
                                            v~&& = constuinteger(i2)
                                            v&& = v~&&
                                            v## = v&&
                                        Else
                                            v&& = constinteger(i2)
                                            v## = v&&
                                            v~&& = v&&
                                        End If
                                    End If
                                    'apply type conversion if necessary
                                    If et Then t = et
                                    '(todo: range checking)
                                    'convert value into string for returning
                                    If t And ISFLOAT Then
                                        e$ = LTrim$(RTrim$(Str$(v##)))
                                    Else
                                        If t And ISUNSIGNED Then
                                            e$ = LTrim$(RTrim$(Str$(v~&&)))
                                        Else
                                            e$ = LTrim$(RTrim$(Str$(v&&)))
                                        End If
                                    End If

                                    'floats returned by str$ must be converted to qb64 standard format
                                    If t And ISFLOAT Then
                                        t2 = t And 511
                                        'find E,D or F
                                        s$ = ""
                                        If InStr(e$, "E") Then s$ = "E"
                                        If InStr(e$, "D") Then s$ = "D"
                                        If InStr(e$, "F") Then s$ = "F"
                                        If Len(s$) Then
                                            'E,D,F found
                                            x = InStr(e$, s$)
                                            'as incorrect type letter may have been returned by STR$, override it
                                            If t2 = 32 Then s$ = "E"
                                            If t2 = 64 Then s$ = "D"
                                            If t2 = 256 Then s$ = "F"
                                            Mid$(e$, x, 1) = s$
                                            If InStr(e$, ".") = 0 Then e$ = Left$(e$, x - 1) + ".0" + Right$(e$, Len(e$) - x + 1): x = x + 2
                                            If Left$(e$, 1) = "." Then e$ = "0" + e$
                                            If Left$(e$, 2) = "-." Then e$ = "-0" + Right$(e$, Len(e$) - 1)
                                            If InStr(e$, "+") = 0 And InStr(e$, "-") = 0 Then
                                                e$ = Left$(e$, x) + "+" + Right$(e$, Len(e$) - x)
                                            End If
                                        Else
                                            'E,D,F not found
                                            If InStr(e$, ".") = 0 Then e$ = e$ + ".0"
                                            If Left$(e$, 1) = "." Then e$ = "0" + e$
                                            If Left$(e$, 2) = "-." Then e$ = "-0" + Right$(e$, Len(e$) - 1)
                                            If t2 = 32 Then e$ = e$ + "E+0"
                                            If t2 = 64 Then e$ = e$ + "D+0"
                                            If t2 = 256 Then e$ = e$ + "F+0"
                                        End If
                                    Else
                                        s$ = typevalue2symbol$(t)
                                        If Error_Happened Then Exit Function
                                        e$ = e$ + s$ 'simply append symbol to integer
                                    End If

                                End If 'not a string

                                removeelements a$, i, i, 0
                                insertelements a$, i - 1, e$
                                'alter f2$ here to original casing
                                f2$ = constcname(i2) + es$
                                GoTo classdone

                            End If 'not static
                            'END IF 'same name
                            'NEXT
                        End If 'hashfound
                    End If 'not udt element
                End If 'not array

                'variable/array/udt?
                u$ = f2$

                try_string$ = f2$
                try_string2$ = try_string$ 'pure version of try_string$

                For try_method = 1 To 4
                    try_string$ = try_string2$
                    If try_method = 2 Or try_method = 4 Then
                        dtyp$ = removesymbol(try_string$)
                        If Len(dtyp$) = 0 Then
                            If isoperator(try_string$) = 0 Then
                                If isvalidvariable(try_string$) Then
                                    If Left$(try_string$, 1) = "_" Then v = 27 Else v = Asc(UCase$(try_string$)) - 64
                                    try_string$ = try_string$ + defineextaz(v)
                                End If
                            End If
                        Else
                            try_string$ = try_string2$
                        End If
                    End If
                    try = findid(try_string$)
                    If Error_Happened Then Exit Function
                    Do While try
                        If (subfuncn = id.insubfuncn And try_method <= 2) Or try_method >= 3 Then

                            If Debug Then Print #9, "found id matching " + f2$

                            If nextc = 40 Or uboundlbound <> 0 Then '(

                                uboundlbound = 0

                                'function or array?
                                If id.arraytype <> 0 Or id.subfunc = 1 Then
                                    'note: even if it's an array of UDTs, the bracketted index will follow immediately

                                    'correct name
                                    f3$ = f2$
                                    s$ = removesymbol$(f3$)
                                    If Error_Happened Then Exit Function
                                    If id.internal_subfunc Then
                                        f2$ = SCase$(RTrim$(id.cn)) + s$
                                        If (UCase$(f2$) = "UBOUND" Or UCase$(f2$) = "LBOUND") Then
                                            uboundlbound = 2
                                        End If
                                    Else
                                        f2$ = RTrim$(id.cn) + s$
                                    End If
                                    removeelements a$, i, i, 0
                                    insertelements a$, i - 1, UCase$(f2$)
                                    f$ = f$ + f2$ + sp + "(" + sp

                                    'skip (but record with nothing inside them) brackets
                                    b2 = 1 'already in first bracket
                                    For i2 = i + 2 To n
                                        c2 = Asc(getelement(a$, i2))
                                        If c2 = 40 Then b2 = b2 + 1
                                        If c2 = 41 Then b2 = b2 - 1
                                        If b2 = 0 Then Exit For 'note: mismatched brackets check ensures this always succeeds
                                        f$ = f$ + sp
                                    Next

                                    'adjust i accordingly
                                    i = i2

                                    f$ = f$ + ")"

                                    'jump to UDT section if array is of UDT type (and elements are referenced)
                                    If id.arraytype And ISUDT Then
                                        If i < n Then nextc = Asc(getelement(a$, i + 1)) Else nextc = 0
                                        If nextc = 46 Then t = id.arraytype: GoTo fooudt
                                    End If

                                    f$ = f$ + sp
                                    GoTo classdone_special
                                End If 'id.arraytype
                            End If 'nextc "("

                            If nextc <> 40 Then 'not "(" (this avoids confusing simple variables with arrays)
                                If id.t <> 0 Or id.subfunc = 1 Then 'simple variable or function (without parameters)

                                    If id.t And ISUDT Then
                                        'note: it may or may not be followed by a period (eg. if whole udt is being referred to)
                                        'check if next item is a period

                                        'correct name
                                        If id.internal_subfunc Then
                                            f2$ = SCase$(RTrim$(id.cn)) + removesymbol$(f2$)
                                        Else
                                            f2$ = RTrim$(id.cn) + removesymbol$(f2$)
                                        End If
                                        If Error_Happened Then Exit Function
                                        removeelements a$, i, i, 0
                                        insertelements a$, i - 1, UCase$(f2$)
                                        f$ = f$ + f2$



                                        If nextc <> 46 Then f$ = f$ + sp: GoTo classdone_special 'no sub-elements referenced
                                        t = id.t

                                        fooudt:

                                        f$ = f$ + sp + "." + sp
                                        E = udtxnext(t And 511) 'next element to check
                                        i = i + 2

                                        'loop

                                        '"." encountered, i must be an element
                                        If i > n Then Give_Error "Expected .element": Exit Function
                                        f2$ = getelement(a$, i)
                                        s$ = removesymbol$(f2$)
                                        If Error_Happened Then Exit Function
                                        u$ = UCase$(f2$) + Space$(256 - Len(f2$)) 'fast scanning

                                        'is f$ the same as element e?
                                        fooudtnexte:
                                        If udtename(E) = u$ Then
                                            'match found
                                            'todo: check symbol(s$) matches element's type

                                            'correct name
                                            f2$ = RTrim$(udtecname(E)) + s$
                                            removeelements a$, i, i, 0
                                            insertelements a$, i - 1, UCase$(f2$)
                                            f$ = f$ + f2$

                                            If i = n Then f$ = f$ + sp: GoTo classdone_special
                                            nextc = Asc(getelement(a$, i + 1))
                                            If nextc <> 46 Then f$ = f$ + sp: GoTo classdone_special 'no sub-elements referenced
                                            'sub-element exists
                                            t = udtetype(E)
                                            If (t And ISUDT) = 0 Then Give_Error "Invalid . after element": Exit Function
                                            GoTo fooudt

                                        End If 'match found

                                        'no, so check next element
                                        E = udtenext(E)
                                        If E = 0 Then Give_Error "Element not defined": Exit Function
                                        GoTo fooudtnexte

                                    End If 'udt

                                    'non array/udt based variable
                                    f3$ = f2$
                                    s$ = removesymbol$(f3$)
                                    If Error_Happened Then Exit Function
                                    If id.internal_subfunc Then
                                        f2$ = SCase$(RTrim$(id.cn)) + s$
                                    Else
                                        f2$ = RTrim$(id.cn) + s$
                                    End If
                                    'change was is returned to uppercase
                                    removeelements a$, i, i, 0
                                    insertelements a$, i - 1, UCase$(f2$)
                                    GoTo CouldNotClassify
                                End If 'id.t

                            End If 'nextc not "("

                        End If
                        If try = 2 Then findanotherid = 1: try = findid(try_string$) Else try = 0
                        If Error_Happened Then Exit Function
                    Loop
                Next 'try method (1-4)
                CouldNotClassify:

                'alphanumeric, but item name is unknown... is it an internal type? if so, use capitals
                f3$ = UCase$(f2$)
                internaltype = 0
                If f3$ = "STRING" Then internaltype = 1
                If f3$ = "_UNSIGNED" Or (f3$ = "UNSIGNED" And qb64prefix_set = 1) Then internaltype = 1
                If f3$ = "_BIT" Or (f3$ = "BIT" And qb64prefix_set = 1) Then internaltype = 1
                If f3$ = "_BYTE" Or (f3$ = "BYTE" And qb64prefix_set = 1) Then internaltype = 1
                If f3$ = "INTEGER" Then internaltype = 1
                If f3$ = "LONG" Then internaltype = 1
                If f3$ = "_INTEGER64" Or (f3$ = "INTEGER64" And qb64prefix_set = 1) Then internaltype = 1
                If f3$ = "SINGLE" Then internaltype = 1
                If f3$ = "DOUBLE" Then internaltype = 1
                If f3$ = "_FLOAT" Or (f3$ = "FLOAT" And qb64prefix_set = 1) Then internaltype = 1
                If f3$ = "_OFFSET" Or (f3$ = "OFFSET" And qb64prefix_set = 1) Then internaltype = 1
                If internaltype = 1 Then
                    f2$ = SCase2$(f3$)
                    removeelements a$, i, i, 0
                    insertelements a$, i - 1, f3$
                    GoTo classdone
                End If

                GoTo classdone
            End If 'alphanumeric

            classdone:
            f$ = f$ + f2$
        End If 'b=0
        f$ = f$ + sp
        classdone_special:
    Next

    If Len(f$) Then f$ = Left$(f$, Len(f$) - 1) 'remove trailing 'sp'

    If Debug Then Print #9, "fixoperationorder:identification:" + a$, n
    If Debug Then Print #9, "fixoperationorder:identification(layout):" + f$, n


    '----------------I. Pass (){}bracketed items (if any) to fixoperationorder & build return----------------
    'note: items seperated by commas are done seperately

    ff$ = ""
    b = 0
    b2 = 0
    p1 = 0 'where level 1 began
    aa$ = ""
    n = numelements(a$)
    For i = 1 To n

        openbracket = 0

        a2$ = getelement(a$, i)

        c = Asc(a2$)



        If c = 40 Or c = 123 Then '({
            b = b + 1

            If b = 1 Then




                p1 = i + 1
                aa$ = aa$ + "(" + sp

            End If

            openbracket = 1

            GoTo foopass

        End If '({

        If c = 44 Then ',
            If b = 1 Then
                GoTo foopassit
            End If
        End If

        If c = 41 Or c = 125 Then ')}
            If uboundlbound Then uboundlbound = uboundlbound - 1
            b = b - 1

            If b = 0 Then
                foopassit:
                If p1 <> i Then
                    foo$ = fixoperationorder(getelements(a$, p1, i - 1))
                    If Error_Happened Then Exit Function
                    If Len(foo$) Then
                        aa$ = aa$ + foo$ + sp
                        If c = 125 Then ff$ = ff$ + tlayout$ + sp Else ff$ = ff$ + tlayout$ + sp2 'spacing between ) } , varies
                    End If
                End If
                If c = 44 Then aa$ = aa$ + "," + sp: ff$ = ff$ + "," + sp Else aa$ = aa$ + ")" + sp
                p1 = i + 1
            End If

            GoTo foopass
        End If ')}




        If b = 0 Then aa$ = aa$ + a2$ + sp


        foopass:

        f2$ = getelementspecial(f$, i)
        If Error_Happened Then Exit Function
        If Len(f2$) Then

            'use sp2 to join items connected by a period
            If c = 46 Then '"."
                If i > 1 And i < n Then 'stupidity check
                    If Len(ff$) Then Mid$(ff$, Len(ff$), 1) = sp2 'convert last spacer to a sp2
                    ff$ = ff$ + "." + sp2
                    GoTo fooloopnxt
                End If
            End If

            'spacing just before (
            If openbracket Then

                'convert last spacer?
                If i <> 1 Then
                    If isoperator(getelement$(a$, i - 1)) = 0 Then
                        Mid$(ff$, Len(ff$), 1) = sp2
                    End If
                End If
                ff$ = ff$ + f2$ + sp2
            Else 'not openbracket
                ff$ = ff$ + f2$ + sp
            End If

        End If 'len(f2$)

        fooloopnxt:

    Next

    If Len(aa$) Then aa$ = Left$(aa$, Len(aa$) - 1)
    If Len(ff$) Then ff$ = Left$(ff$, Len(ff$) - 1)

    If Debug Then Print #9, "fixoperationorder:return:" + aa$
    If Debug Then Print #9, "fixoperationorder:layout:" + ff$
    tlayout$ = ff$
    fixoperationorder$ = aa$

    fooindwel = fooindwel - 1
End Function




Function getelementspecial$ (savea$, elenum)
    a$ = savea$
    If a$ = "" Then Exit Function 'no elements!

    n = 1
    p = 1
    getelementspecialnext:
    i = InStr(p, a$, sp)

    'avoid sp inside "..."
    i2 = InStr(p, a$, Chr$(34))
    If i2 < i And i2 <> 0 Then
        i3 = InStr(i2 + 1, a$, Chr$(34)): If i3 = 0 Then Give_Error "Expected " + Chr$(34): Exit Function
        i = InStr(i3, a$, sp)
    End If

    If elenum = n Then
        If i Then
            getelementspecial$ = Mid$(a$, p, i - p)
        Else
            getelementspecial$ = Right$(a$, Len(a$) - p + 1)
        End If
        Exit Function
    End If

    If i = 0 Then Exit Function 'no more elements!
    n = n + 1
    p = i + 1
    GoTo getelementspecialnext
End Function



Function getelement$ (a$, elenum)
    If a$ = "" Then Exit Function 'no elements!

    n = 1
    p = 1
    getelementnext:
    i = InStr(p, a$, sp)

    If elenum = n Then
        If i Then
            getelement$ = Mid$(a$, p, i - p)
        Else
            getelement$ = Right$(a$, Len(a$) - p + 1)
        End If
        Exit Function
    End If

    If i = 0 Then Exit Function 'no more elements!
    n = n + 1
    p = i + 1
    GoTo getelementnext
End Function

Function getelements$ (a$, i1, i2)
    If i2 < i1 Then getelements$ = "": Exit Function
    n = 1
    p = 1
    getelementsnext:
    i = InStr(p, a$, sp)
    If n = i1 Then
        i1pos = p
    End If
    If n = i2 Then
        If i Then
            getelements$ = Mid$(a$, i1pos, i - i1pos)
        Else
            getelements$ = Right$(a$, Len(a$) - i1pos + 1)
        End If
        Exit Function
    End If
    n = n + 1
    p = i + 1
    GoTo getelementsnext
End Function

Sub getid (i As Long)
    If i = -1 Then Give_Error "-1 passed to getid!": Exit Sub

    id = ids(i)

    currentid = i
End Sub

Sub insertelements (a$, i, elements$)
    If i = 0 Then
        If a$ = "" Then
            a$ = elements$
            Exit Sub
        End If
        a$ = elements$ + sp + a$
        Exit Sub
    End If

    a2$ = ""
    n = numelements(a$)




    For i2 = 1 To n
        If i2 > 1 Then a2$ = a2$ + sp
        a2$ = a2$ + getelement$(a$, i2)
        If i = i2 Then a2$ = a2$ + sp + elements$
    Next

    a$ = a2$

End Sub

Function isoperator (a2$)
    a$ = UCase$(a2$)
    l = 0
    l = l + 1: If a$ = "IMP" Then GoTo opfound
    l = l + 1: If a$ = "EQV" Then GoTo opfound
    l = l + 1: If a$ = "XOR" Then GoTo opfound
    l = l + 1: If a$ = "OR" Then GoTo opfound
    l = l + 1: If a$ = "AND" Then GoTo opfound
    l = l + 1: If a$ = "NOT" Then GoTo opfound
    l = l + 1
    If a$ = "=" Then GoTo opfound
    If a$ = ">" Then GoTo opfound
    If a$ = "<" Then GoTo opfound
    If a$ = "<>" Then GoTo opfound
    If a$ = "<=" Then GoTo opfound
    If a$ = ">=" Then GoTo opfound
    l = l + 1
    If a$ = "+" Then GoTo opfound
    If a$ = "-" Then GoTo opfound '!CAREFUL! could be negation
    l = l + 1: If a$ = "MOD" Then GoTo opfound
    l = l + 1: If a$ = "\" Then GoTo opfound
    l = l + 1
    If a$ = "*" Then GoTo opfound
    If a$ = "/" Then GoTo opfound
    'NEGATION LEVEL (MUST BE SET AFTER CALLING ISOPERATOR BY CONTEXT)
    l = l + 1: If a$ = Chr$(241) Then GoTo opfound
    l = l + 1: If a$ = "^" Then GoTo opfound
    Exit Function
    opfound:
    isoperator = l
End Function

Function isuinteger (i$)
    If Len(i$) = 0 Then Exit Function
    If Asc(i$, 1) = 48 And Len(i$) > 1 Then Exit Function
    For c = 1 To Len(i$)
        v = Asc(i$, c)
        If v < 48 Or v > 57 Then Exit Function
    Next
    isuinteger = -1
End Function

Function isvalidvariable (a$)
    For i = 1 To Len(a$)
        c = Asc(a$, i)
        t = 0
        If c >= 48 And c <= 57 Then t = 1 'numeric
        If c >= 65 And c <= 90 Then t = 2 'uppercase
        If c >= 97 And c <= 122 Then t = 2 'lowercase
        If c = 95 Then t = 2 '_ underscore
        If t = 2 Or (t = 1 And i > 1) Then
            'valid (continue)
        Else
            If i = 1 Then isvalidvariable = 0: Exit Function
            Exit For
        End If
    Next

    isvalidvariable = 1
    If i > n Then Exit Function 'i is always greater than n because n is undefined here. Why didn't I remove this line and the ones below it, which will never run? Cause I'm a coward. F.h.
    e$ = Right$(a$, Len(a$) - i - 1)
    If e$ = "%%" Or e$ = "~%%" Then Exit Function
    If e$ = "%" Or e$ = "~%" Then Exit Function
    If e$ = "&" Or e$ = "~&" Then Exit Function
    If e$ = "&&" Or e$ = "~&&" Then Exit Function
    If e$ = "!" Or e$ = "#" Or e$ = "##" Then Exit Function
    If e$ = "$" Then Exit Function
    If e$ = "`" Then Exit Function
    If Left$(e$, 1) <> "$" And Left$(e$, 1) <> "`" Then isvalidvariable = 0: Exit Function
    e$ = Right$(e$, Len(e$) - 1)
    If isuinteger(e$) Then isvalidvariable = 1: Exit Function
    isvalidvariable = 0
End Function




Function lineformat$ (a$)
    a2$ = ""
    linecontinuation = 0

    continueline:

    a$ = a$ + "  " 'add 2 extra spaces to make reading next char easier

    ca$ = a$
    a$ = UCase$(a$)

    n = Len(a$)
    i = 1
    lineformatnext:
    If i >= n Then GoTo lineformatdone

    c = Asc(a$, i)
    c$ = Chr$(c) '***remove later***

    '----------------quoted string----------------
    If c = 34 Then '"
        a2$ = a2$ + sp + Chr$(34)
        p1 = i + 1
        For i2 = i + 1 To n - 2
            c2 = Asc(a$, i2)

            If c2 = 34 Then
                a2$ = a2$ + Mid$(ca$, p1, i2 - p1 + 1) + "," + str2$(i2 - (i + 1))
                i = i2 + 1
                Exit For
            End If

            If c2 = 92 Then '\
                a2$ = a2$ + Mid$(ca$, p1, i2 - p1) + "\\"
                p1 = i2 + 1
            End If

            If c2 < 32 Or c2 > 126 Then
                o$ = Oct$(c2)
                If Len(o$) < 3 Then
                    o$ = "0" + o$
                    If Len(o$) < 3 Then o$ = "0" + o$
                End If
                a2$ = a2$ + Mid$(ca$, p1, i2 - p1) + "\" + o$
                p1 = i2 + 1
            End If

        Next

        If i2 = n - 1 Then 'no closing "
            a2$ = a2$ + Mid$(ca$, p1, (n - 2) - p1 + 1) + Chr$(34) + "," + str2$((n - 2) - (i + 1) + 1)
            i = n - 1
        End If

        GoTo lineformatnext

    End If

    '----------------number----------------
    firsti = i
    If c = 46 Then
        c2$ = Mid$(a$, i + 1, 1): c2 = Asc(c2$)
        If (c2 >= 48 And c2 <= 57) Then GoTo lfnumber
    End If
    If (c >= 48 And c <= 57) Then '0-9
        lfnumber:

        'handle 'IF a=1 THEN a=2 ELSE 100' by assuming numeric after ELSE to be a
        If Right$(a2$, 5) = sp + "ELSE" Then
            a2$ = a2$ + sp + "GOTO"
        End If

        'Number will be converted to the following format:
        ' 999999  .        99999  E        +         999
        '[whole$][dp(0/1)][frac$][ed(1/2)][pm(1/-1)][ex$]
        ' 0                1               2         3    <-mode

        mode = 0
        whole$ = ""
        dp = 0
        frac$ = ""
        ed = 0 'E=1, D=2, F=3
        pm = 1
        ex$ = ""




        lfreadnumber:
        valid = 0

        If c = 46 Then
            If mode = 0 Then valid = 1: dp = 1: mode = 1
        End If

        If c >= 48 And c <= 57 Then '0-9
            valid = 1
            If mode = 0 Then whole$ = whole$ + c$
            If mode = 1 Then frac$ = frac$ + c$
            If mode = 2 Then mode = 3
            If mode = 3 Then ex$ = ex$ + c$
        End If

        If c = 69 Or c = 68 Or c = 70 Then 'E,D,F
            If mode < 2 Then
                valid = 1
                If c = 69 Then ed = 1
                If c = 68 Then ed = 2
                If c = 70 Then ed = 3
                mode = 2
            End If
        End If

        If c = 43 Or c = 45 Then '+,-
            If mode = 2 Then
                valid = 1
                If c = 45 Then pm = -1
                mode = 3
            End If
        End If

        If valid Then
            If i <= n Then i = i + 1: c$ = Mid$(a$, i, 1): c = Asc(c$): GoTo lfreadnumber
        End If



        'cull leading 0s off whole$
        Do While Left$(whole$, 1) = "0": whole$ = Right$(whole$, Len(whole$) - 1): Loop
        'cull trailing 0s off frac$
        Do While Right$(frac$, 1) = "0": frac$ = Left$(frac$, Len(frac$) - 1): Loop
        'cull leading 0s off ex$
        Do While Left$(ex$, 1) = "0": ex$ = Right$(ex$, Len(ex$) - 1): Loop

        If dp <> 0 Or ed <> 0 Then float = 1 Else float = 0

        extused = 1

        If ed Then e$ = "": GoTo lffoundext 'no extensions valid after E/D/F specified

        '3-character extensions
        If i <= n - 2 Then
            e$ = Mid$(a$, i, 3)
            If e$ = "~%%" And float = 0 Then i = i + 3: GoTo lffoundext
            If e$ = "~&&" And float = 0 Then i = i + 3: GoTo lffoundext
            If e$ = "~%&" And float = 0 Then Give_Error "Cannot use _OFFSET symbols after numbers": Exit Function
        End If
        '2-character extensions
        If i <= n - 1 Then
            e$ = Mid$(a$, i, 2)
            If e$ = "%%" And float = 0 Then i = i + 2: GoTo lffoundext
            If e$ = "~%" And float = 0 Then i = i + 2: GoTo lffoundext
            If e$ = "&&" And float = 0 Then i = i + 2: GoTo lffoundext
            If e$ = "~&" And float = 0 Then i = i + 2: GoTo lffoundext
            If e$ = "%&" And float = 0 Then Give_Error "Cannot use _OFFSET symbols after numbers": Exit Function
            If e$ = "##" Then
                i = i + 2
                ed = 3
                e$ = ""
                GoTo lffoundext
            End If
            If e$ = "~`" Then
                i = i + 2
                GoTo lffoundbitext
            End If
        End If
        '1-character extensions
        If i <= n Then
            e$ = Mid$(a$, i, 1)
            If e$ = "%" And float = 0 Then i = i + 1: GoTo lffoundext
            If e$ = "&" And float = 0 Then i = i + 1: GoTo lffoundext
            If e$ = "!" Then
                i = i + 1
                ed = 1
                e$ = ""
                GoTo lffoundext
            End If
            If e$ = "#" Then
                i = i + 1
                ed = 2
                e$ = ""
                GoTo lffoundext
            End If
            If e$ = "`" Then
                i = i + 1
                lffoundbitext:
                bitn$ = ""
                Do While i <= n
                    c2 = Asc(Mid$(a$, i, 1))
                    If c2 >= 48 And c2 <= 57 Then
                        bitn$ = bitn$ + Chr$(c2)
                        i = i + 1
                    Else
                        Exit Do
                    End If
                Loop
                If bitn$ = "" Then bitn$ = "1"
                'cull leading 0s off bitn$
                Do While Left$(bitn$, 1) = "0": bitn$ = Right$(bitn$, Len(bitn$) - 1): Loop
                e$ = e$ + bitn$
                GoTo lffoundext
            End If
        End If

        If float Then 'floating point types CAN be assumed
            'calculate first significant digit offset & number of significant digits
            If whole$ <> "" Then
                offset = Len(whole$) - 1
                sigdigits = Len(whole$) + Len(frac$)
            Else
                If frac$ <> "" Then
                    offset = -1
                    sigdigits = Len(frac$)
                    For i2 = 1 To Len(frac$)
                        If Mid$(frac$, i2, 1) <> "0" Then Exit For
                        offset = offset - 1
                        sigdigits = sigdigits - 1
                    Next
                Else
                    'number is 0
                    offset = 0
                    sigdigits = 0
                End If
            End If
            sigdig$ = Right$(whole$ + frac$, sigdigits)
            'SINGLE?
            If sigdigits <= 7 Then 'QBASIC interprets anything with more than 7 sig. digits as a DOUBLE
                If offset <= 38 And offset >= -38 Then 'anything outside this range cannot be represented as a SINGLE
                    If offset = 38 Then
                        If sigdig$ > "3402823" Then GoTo lfxsingle
                    End If
                    If offset = -38 Then
                        If sigdig$ < "1175494" Then GoTo lfxsingle
                    End If
                    ed = 1
                    e$ = ""
                    GoTo lffoundext
                End If
            End If
            lfxsingle:
            'DOUBLE?
            If sigdigits <= 16 Then 'QB64 handles DOUBLES with 16-digit precision
                If offset <= 308 And offset >= -308 Then 'anything outside this range cannot be represented as a DOUBLE
                    If offset = 308 Then
                        If sigdig$ > "1797693134862315" Then GoTo lfxdouble
                    End If
                    If offset = -308 Then
                        If sigdig$ < "2225073858507201" Then GoTo lfxdouble
                    End If
                    ed = 2
                    e$ = ""
                    GoTo lffoundext
                End If
            End If
            lfxdouble:
            'assume _FLOAT
            ed = 3
            e$ = "": GoTo lffoundext
        End If

        extused = 0
        e$ = ""
        lffoundext:

        'make sure a leading numberic character exists
        If whole$ = "" Then whole$ = "0"
        'if a float, ensure frac$<>"" and dp=1
        If float Then
            dp = 1
            If frac$ = "" Then frac$ = "0"
        End If
        'if ed is specified, make sure ex$ exists
        If ed <> 0 And ex$ = "" Then ex$ = "0"

        a2$ = a2$ + sp
        a2$ = a2$ + whole$
        If dp Then a2$ = a2$ + "." + frac$
        If ed Then
            If ed = 1 Then a2$ = a2$ + "E"
            If ed = 2 Then a2$ = a2$ + "D"
            If ed = 3 Then a2$ = a2$ + "F"
            If pm = -1 And ex$ <> "0" Then a2$ = a2$ + "-" Else a2$ = a2$ + "+"
            a2$ = a2$ + ex$
        End If
        a2$ = a2$ + e$

        If extused Then a2$ = a2$ + "," + Mid$(a$, firsti, i - firsti)

        GoTo lineformatnext
    End If

    '----------------(number)&H...----------------
    'note: the final value, not the number of hex characters, sets the default type
    If c = 38 Then '&
        If Mid$(a$, i + 1, 1) = "H" Then
            i = i + 2
            hx$ = ""
            lfreadhex:
            If i <= n Then
                c$ = Mid$(a$, i, 1): c = Asc(c$)
                If (c >= 48 And c <= 57) Or (c >= 65 And c <= 70) Then hx$ = hx$ + c$: i = i + 1: GoTo lfreadhex
            End If
            fullhx$ = "&H" + hx$

            'cull leading 0s off hx$
            Do While Left$(hx$, 1) = "0": hx$ = Right$(hx$, Len(hx$) - 1): Loop
            If hx$ = "" Then hx$ = "0"

            bitn$ = ""
            '3-character extensions
            If i <= n - 2 Then
                e$ = Mid$(a$, i, 3)
                If e$ = "~%%" Then i = i + 3: GoTo lfhxext
                If e$ = "~&&" Then i = i + 3: GoTo lfhxext
                If e$ = "~%&" Then Give_Error "Cannot use _OFFSET symbols after numbers": Exit Function
            End If
            '2-character extensions
            If i <= n - 1 Then
                e$ = Mid$(a$, i, 2)
                If e$ = "%%" Then i = i + 2: GoTo lfhxext
                If e$ = "~%" Then i = i + 2: GoTo lfhxext
                If e$ = "&&" Then i = i + 2: GoTo lfhxext
                If e$ = "%&" Then Give_Error "Cannot use _OFFSET symbols after numbers": Exit Function
                If e$ = "~&" Then i = i + 2: GoTo lfhxext
                If e$ = "~`" Then
                    i = i + 2
                    GoTo lfhxbitext
                End If
            End If
            '1-character extensions
            If i <= n Then
                e$ = Mid$(a$, i, 1)
                If e$ = "%" Then i = i + 1: GoTo lfhxext
                If e$ = "&" Then i = i + 1: GoTo lfhxext
                If e$ = "`" Then
                    i = i + 1
                    lfhxbitext:
                    Do While i <= n
                        c2 = Asc(Mid$(a$, i, 1))
                        If c2 >= 48 And c2 <= 57 Then
                            bitn$ = bitn$ + Chr$(c2)
                            i = i + 1
                        Else
                            Exit Do
                        End If
                    Loop
                    If bitn$ = "" Then bitn$ = "1"
                    'cull leading 0s off bitn$
                    Do While Left$(bitn$, 1) = "0": bitn$ = Right$(bitn$, Len(bitn$) - 1): Loop
                    GoTo lfhxext
                End If
            End If
            'if no valid extension context was given, assume one
            'note: leading 0s have been culled, so LEN(hx$) reflects its values size
            e$ = "&&"
            If Len(hx$) <= 8 Then e$ = "&" 'as in QBASIC, signed values must be used
            If Len(hx$) <= 4 Then e$ = "%" 'as in QBASIC, signed values must be used
            GoTo lfhxext2
            lfhxext:
            fullhx$ = fullhx$ + e$ + bitn$
            lfhxext2:

            'build 8-byte unsigned integer rep. of hx$
            If Len(hx$) > 16 Then Give_Error "Overflow": Exit Function
            v~&& = 0
            For i2 = 1 To Len(hx$)
                v2 = Asc(Mid$(hx$, i2, 1))
                If v2 <= 57 Then v2 = v2 - 48 Else v2 = v2 - 65 + 10
                v~&& = v~&& * 16 + v2
            Next

            finishhexoctbin:
            num$ = str2u64$(v~&&) 'correct for unsigned values (overflow of unsigned can be checked later)
            If Left$(e$, 1) <> "~" Then 'note: range checking will be performed later in fixop.order
                'signed

                If e$ = "%%" Then
                    If v~&& > 127 Then
                        If v~&& > 255 Then Give_Error "Overflow": Exit Function
                        v~&& = ((Not v~&&) And 255) + 1
                        num$ = "-" + sp + str2u64$(v~&&)
                    End If
                End If

                If e$ = "%" Then
                    If v~&& > 32767 Then
                        If v~&& > 65535 Then Give_Error "Overflow": Exit Function
                        v~&& = ((Not v~&&) And 65535) + 1
                        num$ = "-" + sp + str2u64$(v~&&)
                    End If
                End If

                If e$ = "&" Then
                    If v~&& > 2147483647 Then
                        If v~&& > 4294967295 Then Give_Error "Overflow": Exit Function
                        v~&& = ((Not v~&&) And 4294967295) + 1
                        num$ = "-" + sp + str2u64$(v~&&)
                    End If
                End If

                If e$ = "&&" Then
                    If v~&& > 9223372036854775807 Then
                        'note: no error checking necessary
                        v~&& = (Not v~&&) + 1
                        num$ = "-" + sp + str2u64$(v~&&)
                    End If
                End If

                If e$ = "`" Then
                    vbitn = Val(bitn$)
                    h~&& = 1: For i2 = 1 To vbitn - 1: h~&& = h~&& * 2: Next: h~&& = h~&& - 1 'build h~&&
                    If v~&& > h~&& Then
                        h~&& = 1: For i2 = 1 To vbitn: h~&& = h~&& * 2: Next: h~&& = h~&& - 1 'build h~&&
                        If v~&& > h~&& Then Give_Error "Overflow": Exit Function
                        v~&& = ((Not v~&&) And h~&&) + 1
                        num$ = "-" + sp + str2u64$(v~&&)
                    End If
                End If

            End If '<>"~"

            a2$ = a2$ + sp + num$ + e$ + bitn$ + "," + fullhx$

            GoTo lineformatnext
        End If
    End If

    '----------------(number)&O...----------------
    'note: the final value, not the number of oct characters, sets the default type
    If c = 38 Then '&
        If Mid$(a$, i + 1, 1) = "O" Then
            i = i + 2
            'note: to avoid mistakes, hx$ is used instead of 'ot$'
            hx$ = ""
            lfreadoct:
            If i <= n Then
                c$ = Mid$(a$, i, 1): c = Asc(c$)
                If c >= 48 And c <= 55 Then hx$ = hx$ + c$: i = i + 1: GoTo lfreadoct
            End If
            fullhx$ = "&O" + hx$

            'cull leading 0s off hx$
            Do While Left$(hx$, 1) = "0": hx$ = Right$(hx$, Len(hx$) - 1): Loop
            If hx$ = "" Then hx$ = "0"

            bitn$ = ""
            '3-character extensions
            If i <= n - 2 Then
                e$ = Mid$(a$, i, 3)
                If e$ = "~%%" Then i = i + 3: GoTo lfotext
                If e$ = "~&&" Then i = i + 3: GoTo lfotext
                If e$ = "~%&" Then Give_Error "Cannot use _OFFSET symbols after numbers": Exit Function
            End If
            '2-character extensions
            If i <= n - 1 Then
                e$ = Mid$(a$, i, 2)
                If e$ = "%%" Then i = i + 2: GoTo lfotext
                If e$ = "~%" Then i = i + 2: GoTo lfotext
                If e$ = "&&" Then i = i + 2: GoTo lfotext
                If e$ = "%&" Then Give_Error "Cannot use _OFFSET symbols after numbers": Exit Function
                If e$ = "~&" Then i = i + 2: GoTo lfotext
                If e$ = "~`" Then
                    i = i + 2
                    GoTo lfotbitext
                End If
            End If
            '1-character extensions
            If i <= n Then
                e$ = Mid$(a$, i, 1)
                If e$ = "%" Then i = i + 1: GoTo lfotext
                If e$ = "&" Then i = i + 1: GoTo lfotext
                If e$ = "`" Then
                    i = i + 1
                    lfotbitext:
                    bitn$ = ""
                    Do While i <= n
                        c2 = Asc(Mid$(a$, i, 1))
                        If c2 >= 48 And c2 <= 57 Then
                            bitn$ = bitn$ + Chr$(c2)
                            i = i + 1
                        Else
                            Exit Do
                        End If
                    Loop
                    If bitn$ = "" Then bitn$ = "1"
                    'cull leading 0s off bitn$
                    Do While Left$(bitn$, 1) = "0": bitn$ = Right$(bitn$, Len(bitn$) - 1): Loop
                    GoTo lfotext
                End If
            End If
            'if no valid extension context was given, assume one
            'note: leading 0s have been culled, so LEN(hx$) reflects its values size
            e$ = "&&"
            '37777777777
            If Len(hx$) <= 11 Then
                If Len(hx$) < 11 Or Asc(Left$(hx$, 1)) <= 51 Then e$ = "&"
            End If
            '177777
            If Len(hx$) <= 6 Then
                If Len(hx$) < 6 Or Left$(hx$, 1) = "1" Then e$ = "%"
            End If

            GoTo lfotext2
            lfotext:
            fullhx$ = fullhx$ + e$ + bitn$
            lfotext2:

            'build 8-byte unsigned integer rep. of hx$
            '1777777777777777777777 (22 digits)
            If Len(hx$) > 22 Then Give_Error "Overflow": Exit Function
            If Len(hx$) = 22 Then
                If Left$(hx$, 1) <> "1" Then Give_Error "Overflow": Exit Function
            End If
            '********change v& to v~&&********
            v~&& = 0
            For i2 = 1 To Len(hx$)
                v2 = Asc(Mid$(hx$, i2, 1))
                v2 = v2 - 48
                v~&& = v~&& * 8 + v2
            Next

            GoTo finishhexoctbin
        End If
    End If

    '----------------(number)&B...----------------
    'note: the final value, not the number of bin characters, sets the default type
    If c = 38 Then '&
        If Mid$(a$, i + 1, 1) = "B" Then
            i = i + 2
            'note: to avoid mistakes, hx$ is used instead of 'bi$'
            hx$ = ""
            lfreadbin:
            If i <= n Then
                c$ = Mid$(a$, i, 1): c = Asc(c$)
                If c >= 48 And c <= 49 Then hx$ = hx$ + c$: i = i + 1: GoTo lfreadbin
            End If
            fullhx$ = "&B" + hx$

            'cull leading 0s off hx$
            Do While Left$(hx$, 1) = "0": hx$ = Right$(hx$, Len(hx$) - 1): Loop
            If hx$ = "" Then hx$ = "0"

            bitn$ = ""
            '3-character extensions
            If i <= n - 2 Then
                e$ = Mid$(a$, i, 3)
                If e$ = "~%%" Then i = i + 3: GoTo lfbiext
                If e$ = "~&&" Then i = i + 3: GoTo lfbiext
                If e$ = "~%&" Then Give_Error "Cannot use _OFFSET symbols after numbers": Exit Function
            End If
            '2-character extensions
            If i <= n - 1 Then
                e$ = Mid$(a$, i, 2)
                If e$ = "%%" Then i = i + 2: GoTo lfbiext
                If e$ = "~%" Then i = i + 2: GoTo lfbiext
                If e$ = "&&" Then i = i + 2: GoTo lfbiext
                If e$ = "%&" Then Give_Error "Cannot use _OFFSET symbols after numbers": Exit Function
                If e$ = "~&" Then i = i + 2: GoTo lfbiext
                If e$ = "~`" Then
                    i = i + 2
                    GoTo lfbibitext
                End If
            End If


            '1-character extensions
            If i <= n Then
                e$ = Mid$(a$, i, 1)
                If e$ = "%" Then i = i + 1: GoTo lfbiext
                If e$ = "&" Then i = i + 1: GoTo lfbiext
                If e$ = "`" Then
                    i = i + 1
                    lfbibitext:
                    bitn$ = ""
                    Do While i <= n
                        c2 = Asc(Mid$(a$, i, 1))
                        If c2 >= 48 And c2 <= 57 Then
                            bitn$ = bitn$ + Chr$(c2)
                            i = i + 1
                        Else
                            Exit Do
                        End If
                    Loop
                    If bitn$ = "" Then bitn$ = "1"
                    'cull leading 0s off bitn$
                    Do While Left$(bitn$, 1) = "0": bitn$ = Right$(bitn$, Len(bitn$) - 1): Loop
                    GoTo lfbiext
                End If
            End If
            'if no valid extension context was given, assume one
            'note: leading 0s have been culled, so LEN(hx$) reflects its values size
            e$ = "&&"
            If Len(hx$) <= 32 Then e$ = "&"
            If Len(hx$) <= 16 Then e$ = "%"

            GoTo lfbiext2
            lfbiext:
            fullhx$ = fullhx$ + e$ + bitn$
            lfbiext2:

            'build 8-byte unsigned integer rep. of hx$
            If Len(hx$) > 64 Then Give_Error "Overflow": Exit Function

            v~&& = 0
            For i2 = 1 To Len(hx$)
                v2 = Asc(Mid$(hx$, i2, 1))
                v2 = v2 - 48
                v~&& = v~&& * 2 + v2
            Next

            GoTo finishhexoctbin
        End If
    End If


    '----------------(number)&H??? error----------------
    If c = 38 Then Give_Error "Expected &H... or &O...": Exit Function

    '----------------variable/name----------------
    '*trailing _ is treated as a seperate line extension*
    If (c >= 65 And c <= 90) Or c = 95 Then 'A-Z(a-z) or _
        If c = 95 Then p2 = 0 Else p2 = i
        For i2 = i + 1 To n
            c2 = Asc(a$, i2)
            If Not alphanumeric(c2) Then Exit For
            If c2 <> 95 Then p2 = i2
        Next
        If p2 Then 'not just underscores!
            'char is from i to p2
            n2 = p2 - i + 1
            a3$ = Mid$(a$, i, n2)

            '----(variable/name)rem----
            If n2 = 3 Then
                If a3$ = "REM" Then
                    i = i + n2
                    If i < n Then
                        c = Asc(a$, i)
                        If c = 46 Then a2$ = a2$ + sp + Mid$(ca$, i - n2, n2): GoTo extcheck 'rem.Variable is a valid variable name in QB45
                    End If

                    'note: In QBASIC 'IF cond THEN REM comment' counts as a single line IF statement, however use of ' instead of REM does not
                    If UCase$(Right$(a2$, 5)) = sp + "THEN" Then a2$ = a2$ + sp + "'" 'add nop
                    layoutcomment = SCase$("Rem")
                    GoTo comment
                End If
            End If

            '----(variable/name)data----
            If n2 = 4 Then
                If a3$ = "DATA" Then
                    x$ = ""
                    i = i + n2
                    If i < n Then
                        c = Asc(a$, i)
                        If c = 46 Then a2$ = a2$ + sp + Mid$(ca$, i - n2, n2): GoTo extcheck 'data.Variable is a valid variable name in QB45
                    End If

                    scan = 0
                    speechmarks = 0
                    commanext = 0
                    finaldata = 0
                    e$ = ""
                    p1 = 0
                    p2 = 0
                    nextdatachr:
                    If i < n Then
                        c = Asc(a$, i)
                        If c = 9 Or c = 32 Then
                            If scan = 0 Then GoTo skipwhitespace
                        End If

                        If c = 58 Then '":"
                            If speechmarks = 0 Then finaldata = 1: GoTo adddata
                        End If

                        If c = 44 Then '","
                            If speechmarks = 0 Then
                                adddata:
                                If prepass = 0 Then
                                    If p1 Then
                                        'FOR i2 = p1 TO p2
                                        '    DATA_add ASC(ca$, i2)
                                        'NEXT
                                        x$ = x$ + Mid$(ca$, p1, p2 - p1 + 1)
                                    End If
                                    'assume closing "
                                    If speechmarks Then
                                        'DATA_add 34
                                        x$ = x$ + Chr$(34)
                                    End If
                                    'append comma
                                    'DATA_add 44
                                    x$ = x$ + Chr$(44)
                                End If
                                If finaldata = 1 Then GoTo finisheddata
                                e$ = ""
                                p1 = 0
                                p2 = 0
                                speechmarks = 0
                                scan = 0
                                commanext = 0
                                i = i + 1
                                GoTo nextdatachr
                            End If
                        End If '","

                        If commanext = 1 Then
                            If c <> 32 And c <> 9 Then Give_Error "Expected , after quoted string in DATA statement": Exit Function
                        End If

                        If c = 34 Then
                            If speechmarks = 1 Then
                                commanext = 1
                                speechmarks = 0
                            End If
                            If scan = 0 Then speechmarks = 1
                        End If

                        scan = 1

                        If p1 = 0 Then p1 = i: p2 = i
                        If c <> 9 And c <> 32 Then p2 = i

                        skipwhitespace:
                        i = i + 1: GoTo nextdatachr
                    End If 'i<n
                    finaldata = 1: GoTo adddata
                    finisheddata:
                    e$ = ""
                    If prepass = 0 Then
                        WriteBufRawData DataBinBuf, x$
                        DataOffset = DataOffset + Len(x$)

                        e$ = Space$((Len(x$) - 1) * 2)
                        For ec = 1 To Len(x$) - 1
                            '2 chr hex encode each character
                            v1 = Asc(x$, ec)
                            v2 = v1 \ 16: If v2 <= 9 Then v2 = v2 + 48 Else v2 = v2 + 55
                            v1 = v1 And 15: If v1 <= 9 Then v1 = v1 + 48 Else v1 = v1 + 55
                            Asc(e$, ec * 2 - 1) = v1
                            Asc(e$, ec * 2) = v2
                        Next

                    End If

                    a2$ = a2$ + sp + "DATA": If Len(e$) Then a2$ = a2$ + sp + "_" + e$
                    GoTo lineformatnext
                End If
            End If

            a2$ = a2$ + sp + Mid$(ca$, i, n2)
            i = i + n2

            '----(variable/name)extensions----
            extcheck:
            If n2 > 40 Then Give_Error "Identifier longer than 40 character limit": Exit Function
            c3 = Asc(a$, i)
            m = 0
            If c3 = 126 Then '"~"
                e2$ = Mid$(a$, i + 1, 2)
                If e2$ = "&&" Then e2$ = "~&&": GoTo lfgetve
                If e2$ = "%%" Then e2$ = "~%%": GoTo lfgetve
                If e2$ = "%&" Then e2$ = "~%&": GoTo lfgetve
                e2$ = Chr$(Asc(e2$))
                If e2$ = "&" Then e2$ = "~&": GoTo lfgetve
                If e2$ = "%" Then e2$ = "~%": GoTo lfgetve
                If e2$ = "`" Then m = 1: e2$ = "~`": GoTo lfgetve
            End If
            If c3 = 37 Then
                c4 = Asc(a$, i + 1)
                If c4 = 37 Then e2$ = "%%": GoTo lfgetve
                If c4 = 38 Then e2$ = "%&": GoTo lfgetve
                e2$ = "%": GoTo lfgetve
            End If
            If c3 = 38 Then
                c4 = Asc(a$, i + 1)
                If c4 = 38 Then e2$ = "&&": GoTo lfgetve
                e2$ = "&": GoTo lfgetve
            End If
            If c3 = 33 Then e2$ = "!": GoTo lfgetve
            If c3 = 35 Then
                c4 = Asc(a$, i + 1)
                If c4 = 35 Then e2$ = "##": GoTo lfgetve
                e2$ = "#": GoTo lfgetve
            End If
            If c3 = 36 Then m = 1: e2$ = "$": GoTo lfgetve
            If c3 = 96 Then m = 1: e2$ = "`": GoTo lfgetve
            '(no symbol)

            'cater for unusual names/labels (eg a.0b%)
            If Asc(a$, i) = 46 Then '"."
                c2 = Asc(a$, i + 1)
                If c2 >= 48 And c2 <= 57 Then
                    'scan until no further alphanumerics
                    p2 = i + 1
                    For i2 = i + 2 To n
                        c = Asc(a$, i2)

                        If Not alphanumeric(c) Then Exit For
                        If c <> 95 Then p2 = i2 'don't including trailing _
                    Next
                    a2$ = a2$ + sp + "." + sp + Mid$(ca$, i + 1, p2 - (i + 1) + 1) 'case sensitive
                    n2 = n2 + 1 + (p2 - (i + 1) + 1)
                    i = p2 + 1
                    GoTo extcheck 'it may have an extension or be continued with another "."
                End If
            End If

            GoTo lineformatnext

            lfgetve:
            i = i + Len(e2$)
            a2$ = a2$ + e2$
            If m Then 'allow digits after symbol
                lfgetvd:
                If i < n Then
                    c = Asc(a$, i)
                    If c >= 48 And c <= 57 Then a2$ = a2$ + Chr$(c): i = i + 1: GoTo lfgetvd
                End If
            End If 'm

            GoTo lineformatnext

        End If 'p2
    End If 'variable/name
    '----------------variable/name end----------------

    '----------------spacing----------------
    If c = 32 Or c = 9 Then i = i + 1: GoTo lineformatnext

    '----------------symbols----------------
    '--------single characters--------
    If lfsinglechar(c) Then
        If (c = 60) Or (c = 61) Or (c = 62) Then
            count = 0
            Do
                count = count + 1
                If i + count >= Len(a$) - 2 Then Exit Do
            Loop Until Asc(a$, i + count) <> 32
            c2 = Asc(a$, i + count)
            If c = 60 Then '<
                If c2 = 61 Then a2$ = a2$ + sp + "<=": i = i + count + 1: GoTo lineformatnext
                If c2 = 62 Then a2$ = a2$ + sp + "<>": i = i + count + 1: GoTo lineformatnext
            ElseIf c = 62 Then '>
                If c2 = 61 Then a2$ = a2$ + sp + ">=": i = i + count + 1: GoTo lineformatnext
                If c2 = 60 Then a2$ = a2$ + sp + "<>": i = i + count + 1: GoTo lineformatnext '>< to <>
            ElseIf c = 61 Then '=
                If c2 = 62 Then a2$ = a2$ + sp + ">=": i = i + count + 1: GoTo lineformatnext '=> to >=
                If c2 = 60 Then a2$ = a2$ + sp + "<=": i = i + count + 1: GoTo lineformatnext '=< to <=
            End If
        End If

        If c = 36 And Len(a2$) Then GoTo badusage '$


        a2$ = a2$ + sp + Chr$(c)
        i = i + 1
        GoTo lineformatnext
    End If
    badusage:

    If c <> 39 Then Give_Error "Unexpected character on line": Exit Function 'invalid symbol encountered

    '----------------comment(')----------------
    layoutcomment = "'"
    i = i + 1
    comment:
    If i >= n Then GoTo lineformatdone2
    c$ = Right$(a$, Len(a$) - i + 1)
    cc$ = Right$(ca$, Len(ca$) - i + 1)
    If Len(c$) = 0 Then GoTo lineformatdone2
    layoutcomment$ = RTrim$(layoutcomment$ + cc$)

    c$ = LTrim$(c$)
    If Len(c$) = 0 Then GoTo lineformatdone2
    ac = Asc(c$)
    'note: any non-whitespace character between the comment leader and the
    '      first '$' renders this a plain comment
    '    : the leading '$' does NOT have to be part of a valid metacommand.
    '      E.g., REM $FOO $DYNAMIC is a valid metacommand line
    If ac <> 36 Then GoTo lineformatdone2
    nocasec$ = LTrim$(Right$(ca$, Len(ca$) - i + 1))
    memmode = 0
    x = 1
    Do
        'note: metacommands may appear on a line any number of times but only
        '      the last appearance of $INCLUDE, and either $STATIC or $DYNAMIC,
        '      is processed
        '    : metacommands do not need to be terminated by word boundaries.
        '      E.g., $STATICanychars$DYNAMIC is valid

        If Mid$(c$, x, 7) = "$STATIC" Then
            memmode = 1
        ElseIf Mid$(c$, x, 8) = "$DYNAMIC" Then
            memmode = 2
        ElseIf Mid$(c$, x, 8) = "$INCLUDE" Then
            'note: INCLUDE adds the file AFTER the line it is on has been processed
            'skip spaces until :
            For xx = x + 8 To Len(c$)
                ac = Asc(Mid$(c$, xx, 1))
                If ac = 58 Then Exit For ':
                If ac <> 32 And ac <> 9 Then Give_Error "Expected $INCLUDE:'filename'": Exit Function
            Next
            x = xx
            'skip spaces until '
            For xx = x + 1 To Len(c$)
                ac = Asc(Mid$(c$, xx, 1))
                If ac = 39 Then Exit For 'character:'
                If ac <> 32 And ac <> 9 Then Give_Error "Expected $INCLUDE:'filename'": Exit Function
            Next
            x = xx
            xx = InStr(x + 1, c$, "'")
            If xx = 0 Then Give_Error "Expected $INCLUDE:'filename'": Exit Function
            addmetainclude$ = Mid$(nocasec$, x + 1, xx - x - 1)
            If addmetainclude$ = "" Then Give_Error "Expected $INCLUDE:'filename'": Exit Function
        End If

        x = InStr(x + 1, c$, "$")
    Loop While x <> 0

    If memmode = 1 Then addmetastatic = 1
    If memmode = 2 Then addmetadynamic = 1

    GoTo lineformatdone2



    lineformatdone:

    'line continuation?
    'note: line continuation in idemode is illegal
    If Len(a2$) Then
        If Right$(a2$, 1) = "_" Then

            linecontinuation = 1 'avoids auto-format glitches
            layout$ = ""

            'remove _ from the end of the building string
            If Len(a2$) >= 2 Then
                If Right$(a2$, 2) = sp + "_" Then a2$ = Left$(a2$, Len(a2$) - 1)
            End If
            a2$ = Left$(a2$, Len(a2$) - 1)

            If inclevel Then
                fh = 99 + inclevel
                If EOF(fh) Then GoTo lineformatdone2
                Line Input #fh, a$
                inclinenumber(inclevel) = inclinenumber(inclevel) + 1
                GoTo includecont 'note: should not increase linenumber
            End If

            If idemode Then
                idecommand$ = Chr$(100)
                ignore = ide(0)
                ideerror = 0
                a$ = idereturn$
                If a$ = "" Then GoTo lineformatdone2
            Else
                a$ = lineinput3$
                If a$ = Chr$(13) Then GoTo lineformatdone2
            End If

            linenumber = linenumber + 1

            includecont:

            contline = 1
            GoTo continueline
        End If
    End If

    lineformatdone2:
    If Left$(a2$, 1) = sp Then a2$ = Right$(a2$, Len(a2$) - 1)

    'fix for trailing : error
    If Right$(a2$, 1) = ":" Then a2$ = a2$ + sp + "'" 'add nop

    If Debug Then Print #9, "lineformat():return:" + a2$
    If Error_Happened Then Exit Function
    lineformat$ = a2$

End Function


Sub makeidrefer (ref$, typ As Long)
    ref$ = str2$(currentid)
    typ = id.t + ISREFERENCE
End Sub

Function numelements (a$)
    If a$ = "" Then Exit Function
    n = 1
    p = 1
    numelementsnext:
    i = InStr(p, a$, sp)
    If i = 0 Then numelements = n: Exit Function
    n = n + 1
    p = i + 1
    GoTo numelementsnext
End Function

Function operatorusage (operator$, typ As Long, info$, lhs As Long, rhs As Long, result As Long)
    lhs = 7: rhs = 7: result = 0
    'return values
    '1 = use info$ as the operator without any other changes
    '2 = use the function returned in info$ to apply this operator
    '    upon left and right side of equation
    '3=  bracket left and right side with negation and change operator to info$
    '4=  BINARY NOT l.h.s, then apply operator in info$
    '5=  UNARY, bracket up rhs, apply operator info$ to left, rebracket again

    'lhs & rhs bit-field values
    '1=integeral
    '2=floating point
    '4=string
    '8=bool

    'string operator
    If (typ And ISSTRING) Then
        lhs = 4: rhs = 4
        result = 4
        If operator$ = "+" Then info$ = "qbs_add": operatorusage = 2: Exit Function
        result = 8
        If operator$ = "=" Then info$ = "qbs_equal": operatorusage = 2: Exit Function
        If operator$ = "<>" Then info$ = "qbs_notequal": operatorusage = 2: Exit Function
        If operator$ = ">" Then info$ = "qbs_greaterthan": operatorusage = 2: Exit Function
        If operator$ = "<" Then info$ = "qbs_lessthan": operatorusage = 2: Exit Function
        If operator$ = ">=" Then info$ = "qbs_greaterorequal": operatorusage = 2: Exit Function
        If operator$ = "<=" Then info$ = "qbs_lessorequal": operatorusage = 2: Exit Function
        If Debug Then Print #9, "INVALID STRING OPERATOR!": End
    End If

    'assume numeric operator
    lhs = 1 + 2: rhs = 1 + 2
    If operator$ = "^" Then result = 2: info$ = "pow2": operatorusage = 2: Exit Function
    If operator$ = Chr$(241) Then info$ = "-": operatorusage = 5: Exit Function
    If operator$ = "/" Then
        info$ = "/ ": operatorusage = 1
        'for / division, either the lhs or the rhs must be a float to make
        'c++ return a result in floating point form
        If (typ And ISFLOAT) Then
            'lhs is a float
            lhs = 2
            rhs = 1 + 2
        Else
            'lhs isn't a float!
            lhs = 1 + 2
            rhs = 2
        End If
        result = 2
        Exit Function
    End If
    If operator$ = "*" Then info$ = "*": operatorusage = 1: Exit Function
    If operator$ = "+" Then info$ = "+": operatorusage = 1: Exit Function
    If operator$ = "-" Then info$ = "-": operatorusage = 1: Exit Function

    result = 8
    If operator$ = "=" Then info$ = "==": operatorusage = 3: Exit Function
    If operator$ = ">" Then info$ = ">": operatorusage = 3: Exit Function
    If operator$ = "<" Then info$ = "<": operatorusage = 3: Exit Function
    If operator$ = "<>" Then info$ = "!=": operatorusage = 3: Exit Function
    If operator$ = "<=" Then info$ = "<=": operatorusage = 3: Exit Function
    If operator$ = ">=" Then info$ = ">=": operatorusage = 3: Exit Function

    lhs = 1: rhs = 1: result = 1
    operator$ = UCase$(operator$)
    If operator$ = "MOD" Then info$ = "%": operatorusage = 1: Exit Function
    If operator$ = "\" Then info$ = "/ ": operatorusage = 1: Exit Function
    If operator$ = "IMP" Then info$ = "|": operatorusage = 4: Exit Function
    If operator$ = "EQV" Then info$ = "^": operatorusage = 4: Exit Function
    If operator$ = "XOR" Then info$ = "^": operatorusage = 1: Exit Function
    If operator$ = "OR" Then info$ = "|": operatorusage = 1: Exit Function
    If operator$ = "AND" Then info$ = "&": operatorusage = 1: Exit Function

    lhs = 7
    If operator$ = "NOT" Then info$ = "~": operatorusage = 5: Exit Function

    If Debug Then Print #9, "INVALID NUMBERIC OPERATOR!": End

End Function

Function refer$ (a2$, typ As Long, method As Long)
    typbak = typ
    'method: 0 return an equation which calculates the value of the "variable"
    '        1 return the C name of the variable, typ will be left unchanged

    a$ = a2$

    'retrieve ID
    i = InStr(a$, sp3)
    If i Then
        idnumber = Val(Left$(a$, i - 1)): a$ = Right$(a$, Len(a$) - i)
    Else
        idnumber = Val(a$)
    End If
    getid idnumber
    If Error_Happened Then Exit Function

    'UDT?
    If typ And ISUDT Then
        If method = 1 Then
            n$ = "UDT_" + RTrim$(id.n)
            If id.t = 0 Then n$ = "ARRAY_" + n$
            n$ = scope$ + n$
            refer$ = n$
            Exit Function
        End If

        'print "UDTSUBSTRING[idX|u|e|o]:"+a$

        u = Val(a$)
        i = InStr(a$, sp3): a$ = Right$(a$, Len(a$) - i): E = Val(a$)
        i = InStr(a$, sp3): o$ = Right$(a$, Len(a$) - i)
        n$ = "UDT_" + RTrim$(id.n): If id.t = 0 Then n$ = "ARRAY_" + n$ + "[0]"
        If E = 0 Then Give_Error "User defined types in expressions are invalid": Exit Function
        If typ And ISOFFSETINBITS Then Give_Error "Cannot resolve bit-length variables inside user defined types": Exit Function

        If typ And ISSTRING Then
            If typ And ISFIXEDLENGTH Then
                o2$ = "(((uint8*)" + scope$ + n$ + ")+(" + o$ + "))"
                r$ = "qbs_new_fixed(" + o2$ + "," + str2(udtetypesize(E)) + ",1)"
                typ = STRINGTYPE + ISFIXEDLENGTH 'ISPOINTER retained, it is still a pointer!
            Else
                r$ = "*((qbs**)((char*)" + scope$ + n$ + "+(" + o$ + ")))"
                typ = STRINGTYPE
            End If
        Else
            typ = typ - ISUDT - ISREFERENCE - ISPOINTER
            If typ And ISARRAY Then typ = typ - ISARRAY
            t$ = typ2ctyp$(typ, "")
            If Error_Happened Then Exit Function
            o2$ = "(((char*)" + scope$ + n$ + ")+(" + o$ + "))"
            r$ = "*" + "(" + t$ + "*)" + o2$
        End If

        'print "REFER:"+r$+","+str2$(typ)
        refer$ = r$
        Exit Function
    End If


    'array?
    If id.arraytype Then

        n$ = RTrim$(id.callname)
        If method = 1 Then
            refer$ = n$
            typ = typbak
            Exit Function
        End If
        typ = typ - ISPOINTER - ISREFERENCE 'typ now looks like a regular value

        If (typ And ISSTRING) Then
            If (typ And ISFIXEDLENGTH) Then
                offset$ = "&((uint8*)(" + n$ + "[0]))[(" + a$ + ")*" + str2(id.tsize) + "]"
                r$ = "qbs_new_fixed(" + offset$ + "," + str2(id.tsize) + ",1)"
            Else
                r$ = "((qbs*)(((uint64*)(" + n$ + "[0]))[" + a$ + "]))"
            End If
            stringprocessinghappened = 1
            refer$ = r$
            Exit Function
        End If

        If (typ And ISOFFSETINBITS) Then
            'IF (typ AND ISUNSIGNED) THEN r$ = "getubits_" ELSE r$ = "getbits_"
            'r$ = r$ + str2(typ AND 511) + "("
            If (typ And ISUNSIGNED) Then r$ = "getubits" Else r$ = "getbits"
            r$ = r$ + "(" + str2(typ And 511) + ","
            r$ = r$ + "(uint8*)(" + n$ + "[0])" + ","
            r$ = r$ + a$ + ")"
            refer$ = r$
            Exit Function
        Else
            t$ = ""
            If (typ And ISFLOAT) Then
                If (typ And 511) = 32 Then t$ = "float"
                If (typ And 511) = 64 Then t$ = "double"
                If (typ And 511) = 256 Then t$ = "long double"
            Else
                If (typ And ISUNSIGNED) Then
                    If (typ And 511) = 8 Then t$ = "uint8"
                    If (typ And 511) = 16 Then t$ = "uint16"
                    If (typ And 511) = 32 Then t$ = "uint32"
                    If (typ And 511) = 64 Then t$ = "uint64"
                    If typ And ISOFFSET Then t$ = "uptrszint"
                Else
                    If (typ And 511) = 8 Then t$ = "int8"
                    If (typ And 511) = 16 Then t$ = "int16"
                    If (typ And 511) = 32 Then t$ = "int32"
                    If (typ And 511) = 64 Then t$ = "int64"
                    If typ And ISOFFSET Then t$ = "ptrszint"
                End If
            End If
        End If
        If t$ = "" Then Give_Error "Cannot find C type to return array data": Exit Function
        r$ = "((" + t$ + "*)(" + n$ + "[0]))[" + a$ + "]"
        refer$ = r$
        Exit Function
    End If 'array

    'variable?
    If id.t Then
        r$ = RTrim$(id.n)
        t = id.t
        'remove irrelavant flags
        If (t And ISINCONVENTIONALMEMORY) Then t = t - ISINCONVENTIONALMEMORY
        'string?
        If (t And ISSTRING) Then
            If (t And ISFIXEDLENGTH) Then
                r$ = scope$ + "STRING" + str2(id.tsize) + "_" + r$: GoTo ref
            End If
            r$ = scope$ + "STRING_" + r$: GoTo ref
        End If
        'bit-length single variable?
        If (t And ISOFFSETINBITS) Then
            If (t And ISUNSIGNED) Then
                r$ = "*" + scope$ + "UBIT" + str2(t And 511) + "_" + r$
            Else
                r$ = "*" + scope$ + "BIT" + str2(t And 511) + "_" + r$
            End If
            GoTo ref
        End If
        If t = BYTETYPE Then r$ = "*" + scope$ + "BYTE_" + r$: GoTo ref
        If t = UBYTETYPE Then r$ = "*" + scope$ + "UBYTE_" + r$: GoTo ref
        If t = INTEGERTYPE Then r$ = "*" + scope$ + "INTEGER_" + r$: GoTo ref
        If t = UINTEGERTYPE Then r$ = "*" + scope$ + "UINTEGER_" + r$: GoTo ref
        If t = LONGTYPE Then r$ = "*" + scope$ + "LONG_" + r$: GoTo ref
        If t = ULONGTYPE Then r$ = "*" + scope$ + "ULONG_" + r$: GoTo ref
        If t = INTEGER64TYPE Then r$ = "*" + scope$ + "INTEGER64_" + r$: GoTo ref
        If t = UINTEGER64TYPE Then r$ = "*" + scope$ + "UINTEGER64_" + r$: GoTo ref
        If t = SINGLETYPE Then r$ = "*" + scope$ + "SINGLE_" + r$: GoTo ref
        If t = DOUBLETYPE Then r$ = "*" + scope$ + "DOUBLE_" + r$: GoTo ref
        If t = FLOATTYPE Then r$ = "*" + scope$ + "FLOAT_" + r$: GoTo ref
        If t = OFFSETTYPE Then r$ = "*" + scope$ + "OFFSET_" + r$: GoTo ref
        If t = UOFFSETTYPE Then r$ = "*" + scope$ + "UOFFSET_" + r$: GoTo ref
        ref:
        If (t And ISSTRING) Then stringprocessinghappened = 1
        If (t And ISPOINTER) Then t = t - ISPOINTER
        typ = t
        If method = 1 Then
            If Left$(r$, 1) = "*" Then r$ = Right$(r$, Len(r$) - 1)
            typ = typbak
        End If
        refer$ = r$
        Exit Function
    End If 'variable



End Function

Sub regid
    idn = idn + 1

    If idn > ids_max Then
        ids_max = ids_max * 2
        ReDim _Preserve ids(1 To ids_max) As idstruct
        ReDim _Preserve cmemlist(1 To ids_max + 1) As Integer
        ReDim _Preserve sfcmemargs(1 To ids_max + 1) As String * 100
        ReDim _Preserve arrayelementslist(1 To ids_max + 1) As Integer
    End If

    n$ = RTrim$(id.n)

    If reginternalsubfunc = 0 Then
        If validname(n$) = 0 Then Give_Error "Invalid name": Exit Sub
    End If

    'register case sensitive name if none given
    If Asc(id.cn) = 32 Then
        n$ = RTrim$(id.n)
        id.n = UCase$(n$)
        id.cn = n$
    End If

    id.insubfunc = subfunc
    id.insubfuncn = subfuncn

    'note: cannot be STATIC and SHARED at the same time
    If dimshared Then
        id.share = dimshared
    Else
        If dimstatic Then id.staticscope = 1
    End If

    ids(idn) = id

    currentid = idn

    'prepare hash flags and check for conflicts
    hashflags = 1

    'sub/function?
    'Note: QBASIC does not allow: Internal type names (INTEGER,LONG,...)
    If id.subfunc Then
        ids(currentid).internal_subfunc = reginternalsubfunc
        If id.subfunc = 1 Then hashflags = hashflags + HASHFLAG_FUNCTION Else hashflags = hashflags + HASHFLAG_SUB
        If reginternalsubfunc = 0 Then 'allow internal definition of subs/functions without checks
            hashchkflags = HASHFLAG_RESERVED + HASHFLAG_CONSTANT
            If id.subfunc = 1 Then hashchkflags = hashchkflags + HASHFLAG_FUNCTION Else hashchkflags = hashchkflags + HASHFLAG_SUB
            hashres = HashFind(n$, hashchkflags, hashresflags, hashresref)
            Do While hashres
                If hashres Then
                    'Note: Numeric sub/function names like 'mid' do not clash with Internal string sub/function names
                    '      like 'MID$' because MID$ always requires a '$'. For user defined string sub/function names
                    '      the '$' would be optional so the rule should not be applied there.
                    allow = 0
                    If hashresflags And (HASHFLAG_FUNCTION + HASHFLAG_SUB) Then
                        If RTrim$(ids(hashresref).musthave) = "$" Then
                            If InStr(ids(currentid).mayhave, "$") = 0 Then allow = 1
                        End If
                    End If
                    If allow = 0 Then Give_Error "Name already in use (" + n$ + ")": Exit Sub
                End If 'hashres
                If hashres <> 1 Then hashres = HashFindCont(hashresflags, hashresref) Else hashres = 0
            Loop
            If idemode Then
                If InStr(listOfCustomKeywords$, "@" + UCase$(n$) + "@") = 0 Then
                    listOfCustomKeywords$ = listOfCustomKeywords$ + "@" + UCase$(n$) + "@"
                End If
            End If
        End If 'reginternalsubfunc = 0
    End If

    'variable?
    If id.t Then
        hashflags = hashflags + HASHFLAG_VARIABLE
        If reginternalvariable = 0 Then
            allow = 0
            var_recheck:
            If Asc(id.musthave) = 32 Then astype2 = 1 '"AS type" declaration?
            scope2 = subfuncn
            hashchkflags = HASHFLAG_RESERVED + HASHFLAG_SUB + HASHFLAG_FUNCTION + HASHFLAG_CONSTANT + HASHFLAG_VARIABLE
            hashres = HashFind(n$, hashchkflags, hashresflags, hashresref)
            Do While hashres

                'conflict with reserved word?
                If hashresflags And HASHFLAG_RESERVED Then
                    musthave$ = RTrim$(id.musthave)
                    If InStr(musthave$, "$") Then
                        'All reserved words can be used as variables in QBASIC if "$" is appended to the variable name!
                        '(allow)
                    Else
                        Give_Error "Name already in use (" + n$ + ")": Exit Sub 'Conflicts with reserved word
                    End If
                End If 'HASHFLAG_RESERVED

                'conflict with sub/function?
                If hashresflags And (HASHFLAG_FUNCTION + HASHFLAG_SUB) Then
                    If ids(hashresref).internal_subfunc = 0 Then Give_Error "Name already in use (" + n$ + ")": Exit Sub 'QBASIC doesn't allow a variable of the same name as a user-defined sub/func
                    If RTrim$(id.n) = "WIDTH" And ids(hashresref).subfunc = 2 Then GoTo varname_exception
                    musthave$ = RTrim$(id.musthave)
                    If Len(musthave$) = 0 Then
                        If RTrim$(ids(hashresref).musthave) = "$" Then
                            'a sub/func requiring "$" can co-exist with implicit numeric variables
                            If InStr(id.mayhave, "$") Then Give_Error "Name already in use (" + n$ + ")": Exit Sub
                        Else
                            Give_Error "Name already in use (" + n$ + ")": Exit Sub 'Implicitly defined variables cannot conflict with sub/func names
                        End If
                    End If 'len(musthave$)=0
                    If InStr(musthave$, "$") Then
                        If RTrim$(ids(hashresref).musthave) = "$" Then Give_Error "Name already in use (" + n$ + ")": Exit Sub 'A sub/function name already exists as a string
                        '(allow)
                    Else
                        If RTrim$(ids(hashresref).musthave) <> "$" Then Give_Error "Name already in use (" + n$ + ")": Exit Sub 'A non-"$" sub/func name already exists with this name
                    End If
                End If 'HASHFLAG_FUNCTION + HASHFLAG_SUB

                'conflict with constant?
                If hashresflags And HASHFLAG_CONSTANT Then
                    scope1 = constsubfunc(hashresref)
                    If (scope1 = 0 And AllowLocalName = 0) Or scope1 = scope2 Then Give_Error "Name already in use (" + n$ + ")": Exit Sub
                End If

                'conflict with variable?
                If hashresflags And HASHFLAG_VARIABLE Then
                    astype1 = 0: If Asc(ids(hashresref).musthave) = 32 Then astype1 = 1
                    scope1 = ids(hashresref).insubfuncn
                    If astype1 = 1 And astype2 = 1 Then
                        If scope1 = scope2 Then Give_Error "Name already in use (" + n$ + ")": Exit Sub
                    End If
                    'same type?
                    If id.t = ids(hashresref).t Then
                        If id.tsize = ids(hashresref).tsize Then
                            If scope1 = scope2 Then Give_Error "Name already in use (" + n$ + ")": Exit Sub
                        End If
                    End If
                    'will astype'd fixed STRING-variable mask a non-fixed string?
                    If id.t And ISFIXEDLENGTH Then
                        If astype2 = 1 Then
                            If ids(hashresref).t And ISSTRING Then
                                If (ids(hashresref).t And ISFIXEDLENGTH) = 0 Then
                                    If scope1 = scope2 Then Give_Error "Name already in use (" + n$ + ")": Exit Sub
                                End If
                            End If
                        End If
                    End If
                End If

                varname_exception:
                If hashres <> 1 Then hashres = HashFindCont(hashresflags, hashresref) Else hashres = 0
            Loop
        End If 'reginternalvariable
    End If 'variable

    'array?
    If id.arraytype Then
        hashflags = hashflags + HASHFLAG_ARRAY
        allow = 0
        ary_recheck:
        scope2 = subfuncn
        If Asc(id.musthave) = 32 Then astype2 = 1 '"AS type" declaration?
        hashchkflags = HASHFLAG_RESERVED + HASHFLAG_SUB + HASHFLAG_FUNCTION + HASHFLAG_ARRAY
        hashres = HashFind(n$, hashchkflags, hashresflags, hashresref)
        Do While hashres

            'conflict with reserved word?
            If hashresflags And HASHFLAG_RESERVED Then
                musthave$ = RTrim$(id.musthave)
                If InStr(musthave$, "$") Then
                    'All reserved words can be used as variables in QBASIC if "$" is appended to the variable name!
                    '(allow)
                Else
                    Give_Error "Name already in use (" + n$ + ")": Exit Sub 'Conflicts with reserved word
                End If
            End If 'HASHFLAG_RESERVED

            'conflict with sub/function?
            If hashresflags And (HASHFLAG_FUNCTION + HASHFLAG_SUB) Then
                If ids(hashresref).internal_subfunc = 0 Then Give_Error "Name already in use (" + n$ + ")": Exit Sub 'QBASIC doesn't allow a variable of the same name as a user-defined sub/func
                If RTrim$(id.n) = "WIDTH" And ids(hashresref).subfunc = 2 Then GoTo arrayname_exception
                musthave$ = RTrim$(id.musthave)

                If Len(musthave$) = 0 Then
                    If RTrim$(ids(hashresref).musthave) = "$" Then
                        'a sub/func requiring "$" can co-exist with implicit numeric variables
                        If InStr(id.mayhave, "$") Then Give_Error "Name already in use (" + n$ + ")": Exit Sub
                    Else
                        Give_Error "Name already in use (" + n$ + ")": Exit Sub 'Implicitly defined variables cannot conflict with sub/func names
                    End If
                End If 'len(musthave$)=0
                If InStr(musthave$, "$") Then
                    If RTrim$(ids(hashresref).musthave) = "$" Then Give_Error "Name already in use (" + n$ + ")": Exit Sub 'A sub/function name already exists as a string
                    '(allow)
                Else
                    If RTrim$(ids(hashresref).musthave) <> "$" Then Give_Error "Name already in use (" + n$ + ")": Exit Sub 'A non-"$" sub/func name already exists with this name
                End If
            End If 'HASHFLAG_FUNCTION + HASHFLAG_SUB

            'conflict with array?
            If hashresflags And HASHFLAG_ARRAY Then
                astype1 = 0: If Asc(ids(hashresref).musthave) = 32 Then astype1 = 1
                scope1 = ids(hashresref).insubfuncn
                If astype1 = 1 And astype2 = 1 Then
                    If scope1 = scope2 Then Give_Error "Name already in use (" + n$ + ")": Exit Sub
                End If
                'same type?
                If id.arraytype = ids(hashresref).arraytype Then
                    If id.tsize = ids(hashresref).tsize Then
                        If scope1 = scope2 Then Give_Error "Name already in use (" + n$ + ")": Exit Sub
                    End If
                End If
                'will astype'd fixed STRING-variable mask a non-fixed string?
                If id.arraytype And ISFIXEDLENGTH Then
                    If astype2 = 1 Then
                        If ids(hashresref).arraytype And ISSTRING Then
                            If (ids(hashresref).arraytype And ISFIXEDLENGTH) = 0 Then
                                If scope1 = scope2 Then Give_Error "Name already in use (" + n$ + ")": Exit Sub
                            End If
                        End If
                    End If
                End If
            End If

            arrayname_exception:
            If hashres <> 1 Then hashres = HashFindCont(hashresflags, hashresref) Else hashres = 0
        Loop
    End If 'array

    'add it to the hash table
    HashAdd n$, hashflags, currentid

End Sub

Sub reginternal
    reginternalsubfunc = 1
    '$INCLUDE:'subs_functions\subs_functions.bas'
    reginternalsubfunc = 0
End Sub

'this sub is faulty atm!
'sub replacelement (a$, i, newe$)
''note: performs no action for out of range values of i
'e=1
's=1
'do
'x=instr(s,a$,sp)
'if x then
'if e=i then
'a1$=left$(a$,s-1): a2$=right$(a$,len(a$)-x+1)
'a$=a1$+sp+newe$+a2$ 'note: a2 includes spacer
'exit sub
'end if
's=x+1
'e=e+1
'end if
'loop until x=0
'if e=i then
'a$=left$(a$,s-1)+sp+newe$
'end if
'end sub


Sub removeelements (a$, first, last, keepindexing)
    a2$ = ""
    'note: first and last MUST be valid
    '      keepindexing means the number of elements will stay the same
    '       but some elements will be equal to ""

    n = numelements(a$)
    For i = 1 To n
        If i < first Or i > last Then
            a2$ = a2$ + sp + getelement(a$, i)
        Else
            If keepindexing Then a2$ = a2$ + sp
        End If
    Next
    If Left$(a2$, 1) = sp Then a2$ = Right$(a2$, Len(a2$) - 1)

    a$ = a2$

End Sub



Function symboltype (s$) 'returns type or 0(not a valid symbol)
    'note: sets symboltype_size for fixed length strings
    'created: 2011 (fast & comprehensive)
    If Len(s$) = 0 Then Exit Function
    'treat common cases first
    a = Asc(s$)
    l = Len(s$)
    If a = 37 Then '%
        If l = 1 Then symboltype = 16: Exit Function
        If l > 2 Then Exit Function
        If Asc(s$, 2) = 37 Then symboltype = 8: Exit Function
        If Asc(s$, 2) = 38 Then symboltype = OFFSETTYPE - ISPOINTER: Exit Function '%&
        Exit Function
    End If
    If a = 38 Then '&
        If l = 1 Then symboltype = 32: Exit Function
        If l > 2 Then Exit Function
        If Asc(s$, 2) = 38 Then symboltype = 64: Exit Function
        Exit Function
    End If
    If a = 33 Then '!
        If l = 1 Then symboltype = 32 + ISFLOAT: Exit Function
        Exit Function
    End If
    If a = 35 Then '#
        If l = 1 Then symboltype = 64 + ISFLOAT: Exit Function
        If l > 2 Then Exit Function
        If Asc(s$, 2) = 35 Then symboltype = 64 + ISFLOAT: Exit Function
        Exit Function
    End If
    If a = 36 Then '$
        If l = 1 Then symboltype = ISSTRING: Exit Function
        If isuinteger(Right$(s$, l - 1)) Then
            If l >= (1 + 10) Then
                If l > (1 + 10) Then Exit Function
                If s$ > "$2147483647" Then Exit Function
            End If
            symboltype_size = Val(Right$(s$, l - 1))
            symboltype = ISSTRING + ISFIXEDLENGTH
            Exit Function
        End If
        Exit Function
    End If
    If a = 96 Then '`
        If l = 1 Then symboltype = 1 + ISOFFSETINBITS: Exit Function
        If isuinteger(Right$(s$, l - 1)) Then
            If l > 3 Then Exit Function
            n = Val(Right$(s$, l - 1))
            If n > 64 Then Exit Function
            symboltype = n + ISOFFSETINBITS: Exit Function
        End If
        Exit Function
    End If
    If a = 126 Then '~
        If l = 1 Then Exit Function
        a = Asc(s$, 2)
        If a = 37 Then '%
            If l = 2 Then symboltype = 16 + ISUNSIGNED: Exit Function
            If l > 3 Then Exit Function
            If Asc(s$, 3) = 37 Then symboltype = 8 + ISUNSIGNED: Exit Function
            If Asc(s$, 3) = 38 Then symboltype = UOFFSETTYPE - ISPOINTER: Exit Function '~%&
            Exit Function
        End If
        If a = 38 Then '&
            If l = 2 Then symboltype = 32 + ISUNSIGNED: Exit Function
            If l > 3 Then Exit Function
            If Asc(s$, 3) = 38 Then symboltype = 64 + ISUNSIGNED: Exit Function
            Exit Function
        End If
        If a = 96 Then '`
            If l = 2 Then symboltype = 1 + ISOFFSETINBITS + ISUNSIGNED: Exit Function
            If isuinteger(Right$(s$, l - 2)) Then
                If l > 4 Then Exit Function
                n = Val(Right$(s$, l - 2))
                If n > 64 Then Exit Function
                symboltype = n + ISOFFSETINBITS + ISUNSIGNED: Exit Function
            End If
            Exit Function
        End If
    End If '~
End Function

Function removesymbol$ (varname$)
    i = InStr(varname$, "~"): If i Then GoTo foundsymbol
    i = InStr(varname$, "`"): If i Then GoTo foundsymbol
    i = InStr(varname$, "%"): If i Then GoTo foundsymbol
    i = InStr(varname$, "&"): If i Then GoTo foundsymbol
    i = InStr(varname$, "!"): If i Then GoTo foundsymbol
    i = InStr(varname$, "#"): If i Then GoTo foundsymbol
    i = InStr(varname$, "$"): If i Then GoTo foundsymbol
    Exit Function
    foundsymbol:
    If i = 1 Then Give_Error "Expected variable name before symbol": Exit Function
    symbol$ = Right$(varname$, Len(varname$) - i + 1)
    If symboltype(symbol$) = 0 Then Give_Error "Invalid symbol": Exit Function
    removesymbol$ = symbol$
    varname$ = Left$(varname$, i - 1)
End Function

Function scope$
    If id.share Then scope$ = module$ + "__": Exit Function
    scope$ = module$ + "_" + subfunc$ + "_"
End Function

Function seperateargs (a$, ca$, pass&)
    pass& = 0

    For i = 1 To OptMax: separgs(i) = "": Next
    For i = 1 To OptMax + 1: separgslayout(i) = "": Next
    For i = 1 To OptMax
        Lev(i) = 0
        EntryLev(i) = 0
        DitchLev(i) = 0
        DontPass(i) = 0
        TempList(i) = 0
        PassRule(i) = 0
        LevelEntered(i) = 0
    Next

    Dim id2 As idstruct

    id2 = id

    If id2.args = 0 Then Exit Function 'no arguments!


    s$ = id2.specialformat
    s$ = RTrim$(s$)

    'build a special format if none exists
    If s$ = "" Then
        For i = 1 To id2.args
            If i <> 1 Then s$ = s$ + ",?" Else s$ = "?"
        Next
    End If

    'note: dim'd arrays moved to global to prevent high recreation cost

    PassFlag = 1
    nextentrylevel = 0
    nextentrylevelset = 1
    level = 0
    lastt = 0
    ditchlevel = 0
    For i = 1 To Len(s$)
        s2$ = Mid$(s$, i, 1)

        If s2$ = "[" Then
            level = level + 1
            LevelEntered(level) = 0
            GoTo nextsymbol
        End If

        If s2$ = "]" Then
            level = level - 1
            If level < ditchlevel Then ditchlevel = level
            GoTo nextsymbol
        End If

        If s2$ = "{" Then
            lastt = lastt + 1: Lev(lastt) = level: PassRule(lastt) = 0
            DitchLev(lastt) = ditchlevel: ditchlevel = level 'store & reset ditch level
            i = i + 1
            i2 = InStr(i, s$, "}")
            numopts = 0
            nextopt:
            numopts = numopts + 1
            i3 = InStr(i + 1, s$, "|")
            If i3 <> 0 And i3 < i2 Then
                Opt(lastt, numopts) = Mid$(s$, i, i3 - i)
                i = i3 + 1: GoTo nextopt
            End If
            Opt(lastt, numopts) = Mid$(s$, i, i2 - i)
            T(lastt) = numopts
            'calculate words in each option
            For x = 1 To T(lastt)
                w = 1
                x2 = 1
                newword:
                If InStr(x2, RTrim$(Opt(lastt, x)), " ") Then w = w + 1: x2 = InStr(x2, RTrim$(Opt(lastt, x)), " ") + 1: GoTo newword
                OptWords(lastt, x) = w
            Next
            i = i2

            'set entry level routine
            EntryLev(lastt) = level 'default level when continuing a previously entered level
            If LevelEntered(level) = 0 Then
                EntryLev(lastt) = 0
                For i2 = 1 To level - 1
                    If LevelEntered(i2) = 1 Then EntryLev(lastt) = i2
                Next
            End If
            LevelEntered(level) = 1

            GoTo nextsymbol
        End If

        If s2$ = "?" Then
            lastt = lastt + 1: Lev(lastt) = level: PassRule(lastt) = 0
            DitchLev(lastt) = ditchlevel: ditchlevel = level 'store & reset ditch level
            T(lastt) = 0
            'set entry level routine
            EntryLev(lastt) = level 'default level when continuing a previously entered level
            If LevelEntered(level) = 0 Then
                EntryLev(lastt) = 0
                For i2 = 1 To level - 1
                    If LevelEntered(i2) = 1 Then EntryLev(lastt) = i2
                Next
            End If
            LevelEntered(level) = 1

            GoTo nextsymbol
        End If

        'assume "special" character (like ( ) , . - etc.)
        lastt = lastt + 1: Lev(lastt) = level: PassRule(lastt) = 0
        DitchLev(lastt) = ditchlevel: ditchlevel = level 'store & reset ditch level
        T(lastt) = 1: Opt(lastt, 1) = s2$: OptWords(lastt, 1) = 1: DontPass(lastt) = 1

        'set entry level routine
        EntryLev(lastt) = level 'default level when continuing a previously entered level
        If LevelEntered(level) = 0 Then
            EntryLev(lastt) = 0
            For i2 = 1 To level - 1
                If LevelEntered(i2) = 1 Then EntryLev(lastt) = i2
            Next
        End If
        LevelEntered(level) = 1

        GoTo nextsymbol

        nextsymbol:
    Next


    If Debug Then
        Print #9, "--------SEPERATE ARGUMENTS REPORT #1:1--------"
        For i = 1 To lastt
            Print #9, i, "OPT=" + Chr$(34) + RTrim$(Opt(i, 1)) + Chr$(34)
            Print #9, i, "OPTWORDS="; OptWords(i, 1)
            Print #9, i, "T="; T(i)
            Print #9, i, "DONTPASS="; DontPass(i)
            Print #9, i, "PASSRULE="; PassRule(i)
            Print #9, i, "LEV="; Lev(i)
            Print #9, i, "ENTRYLEV="; EntryLev(i)
        Next
    End If


    'Any symbols already have dontpass() set to 1
    'This sets any {}blocks with only one option/word (eg. {PRINT}) at the lowest level to dontpass()=1
    'because their content is manadatory and there is no choice as to which word to use
    For x = 1 To lastt
        If Lev(x) = 0 Then
            If T(x) = 1 Then DontPass(x) = 1
        End If
    Next

    If Debug Then
        Print #9, "--------SEPERATE ARGUMENTS REPORT #1:2--------"
        For i = 1 To lastt
            Print #9, i, "OPT=" + Chr$(34) + RTrim$(Opt(i, 1)) + Chr$(34)
            Print #9, i, "OPTWORDS="; OptWords(i, 1)
            Print #9, i, "T="; T(i)
            Print #9, i, "DONTPASS="; DontPass(i)
            Print #9, i, "PASSRULE="; PassRule(i)
            Print #9, i, "LEV="; Lev(i)
            Print #9, i, "ENTRYLEV="; EntryLev(i)
        Next
    End If




    x1 = 0 'the 'x' position of the beginning element of the current levelled block
    MustPassOpt = 0 'the 'x' position of the FIRST opt () in the block which must be passed
    MustPassOptNeedsFlag = 0 '{}blocks don't need a flag, ? blocks do

    'Note: For something like [{HELLO}x] a choice between passing 'hello' or passing a flag to signify x was specified
    '      has to be made, in such cases, a flag is preferable to wasting a full new int32 on 'hello'

    templistn = 0
    For l = 1 To 32767
        scannextlevel = 0
        For x = 1 To lastt
            If Lev(x) > l Then scannextlevel = 1

            If x1 Then
                If EntryLev(x) < l Then 'end of block reached
                    If MustPassOpt Then
                        'If there's an opt () which must be passed that will be identified,
                        'all the 1 option {}blocks can be assumed...
                        If MustPassOptNeedsFlag Then
                            'The MustPassOpt requires a flag, so use the same flag for everything
                            For x2 = 1 To templistn
                                PassRule(TempList(x2)) = PassFlag
                            Next
                            PassFlag = PassFlag * 2
                        Else
                            'The MustPassOpt is a {}block which doesn't need a flag, so everything else needs to
                            'reference it
                            For x2 = 1 To templistn
                                If TempList(x2) <> MustPassOpt Then PassRule(TempList(x2)) = -MustPassOpt
                            Next
                        End If
                    Else
                        'if not, use a unique flag for everything in this block
                        For x2 = 1 To templistn: PassRule(TempList(x2)) = PassFlag: Next
                        If templistn <> 0 Then PassFlag = PassFlag * 2
                    End If
                    x1 = 0
                End If
            End If


            If Lev(x) = l Then 'on same level
                If EntryLev(x) < l Then 'just (re)entered this level (not continuing along it)
                    x1 = x 'set x1 to the starting element of this level
                    MustPassOpt = 0
                    templistn = 0
                End If
            End If

            If x1 Then
                If Lev(x) = l Then 'same level

                    If T(x) <> 1 Then
                        'It isn't a symbol or a {}block with only one option therefore this opt () must be passed
                        If MustPassOpt = 0 Then
                            MustPassOpt = x 'Only record the first instance (it MAY require a flag)
                            If T(x) = 0 Then MustPassOptNeedsFlag = 1 Else MustPassOptNeedsFlag = 0
                        Else
                            'Update current MustPassOpt to non-flag-based {}block if possible (to save flag usage)
                            '(Consider [{A|B}?], where a flag is not required)
                            If MustPassOptNeedsFlag = 1 Then
                                If T(x) > 1 Then
                                    MustPassOpt = x: MustPassOptNeedsFlag = 0
                                End If
                            End If
                        End If
                        'add to list
                        templistn = templistn + 1: TempList(templistn) = x
                    End If

                    If T(x) = 1 Then
                        'It is a symbol or a {}block with only one option
                        'a {}block with only one option MAY not need to be passed
                        'depending on if anything else is in this block could make the existance of this opt () assumed
                        'Note: Symbols which are not encapsulated inside a {}block never need to be passed
                        '      Symbols already have dontpass() set to 1
                        If DontPass(x) = 0 Then templistn = templistn + 1: TempList(templistn) = x: DontPass(x) = 1
                    End If

                End If
            End If

        Next

        'scan last run (mostly just a copy of code from above)
        If x1 Then
            If MustPassOpt Then
                'If there's an opt () which must be passed that will be identified,
                'all the 1 option {}blocks can be assumed...
                If MustPassOptNeedsFlag Then
                    'The MustPassOpt requires a flag, so use the same flag for everything
                    For x2 = 1 To templistn
                        PassRule(TempList(x2)) = PassFlag
                    Next
                    PassFlag = PassFlag * 2
                Else
                    'The MustPassOpt is a {}block which doesn't need a flag, so everything else needs to
                    'reference it
                    For x2 = 1 To templistn
                        If TempList(x2) <> MustPassOpt Then PassRule(TempList(x2)) = -MustPassOpt
                    Next
                End If
            Else
                'if not, use a unique flag for everything in this block
                For x2 = 1 To templistn: PassRule(TempList(x2)) = PassFlag: Next
                If templistn <> 0 Then PassFlag = PassFlag * 2
            End If
            x1 = 0
        End If

        If scannextlevel = 0 Then Exit For
    Next

    If Debug Then
        Print #9, "--------SEPERATE ARGUMENTS REPORT #1:3--------"
        For i = 1 To lastt
            Print #9, i, "OPT=" + Chr$(34) + RTrim$(Opt(i, 1)) + Chr$(34)
            Print #9, i, "OPTWORDS="; OptWords(i, 1)
            Print #9, i, "T="; T(i)
            Print #9, i, "DONTPASS="; DontPass(i)
            Print #9, i, "PASSRULE="; PassRule(i)
            Print #9, i, "LEV="; Lev(i)
            Print #9, i, "ENTRYLEV="; EntryLev(i)
        Next
    End If



    For i = 1 To lastt: separgs(i) = "n-ll": Next




    'Consider: "?,[?]"
    'Notes: The comma is mandatory but the second ? is entirely optional
    'Consider: "[?[{B}?]{A}]?"
    'Notes: As unlikely as the above is, it is still valid, but pivots on the outcome of {A} being present
    'Consider: "[?]{A}"
    'Consider: "[?{A}][?{B}][?{C}]?"
    'Notes: The trick here is to realize {A} has greater priority than {B}, so all lines of enquiry must
    '       be exhausted before considering {B}

    'Use inquiry approach to solve format
    'Each line of inquiry must be exhausted
    'An expression ("?") simply means a branch where you can scan ahead

    Branches = 0
    Dim BranchFormatPos(1 To 100) As Long
    Dim BranchTaken(1 To 100) As Long
    '1=taken (this usually involves moving up a level)
    '0=not taken
    Dim BranchInputPos(1 To 100) As Long
    Dim BranchWithExpression(1 To 100) As Long
    'non-zero=expression expected before next item for format item value represents
    '0=no expression allowed before next item
    Dim BranchLevel(1 To 100) As Long 'Level before this branch was/wasn't taken

    n = numelements(ca$)
    i = 1 'Position within ca$

    level = 0
    Expression = 0
    For x = 1 To lastt

        ContinueScan:

        If DitchLev(x) < level Then 'dropping down to a lower level
            'we can only go as low as the 'ditch' will allow us, which will limit our options
            level = DitchLev(x)
        End If

        If EntryLev(x) <= level Then 'possible to enter level

            'But was this optional or were we forced to be on this level?
            If EntryLev(x) < Lev(x) Then
                optional = 1
                If level > EntryLev(x) Then optional = 0
            Else
                'entrylev=lev
                optional = 0
            End If

            t = T(x)

            If t = 0 Then 'A "?" expression
                If Expression Then
                    '*********backtrack************
                    'We are tracking an expression which we assumed would be present but was not
                    GoTo Backtrack
                    '******************************
                End If
                If optional Then
                    Branches = Branches + 1
                    BranchFormatPos(Branches) = x
                    BranchTaken(Branches) = 1
                    BranchInputPos(Branches) = i
                    BranchWithExpression(Branches) = 0
                    BranchLevel(Branches) = level
                    level = Lev(x)
                End If
                Expression = x
            End If 'A "?" expression

            If t Then

                currentlev = level

                'Add new branch if new level will be entered
                If optional Then
                    Branches = Branches + 1
                    BranchFormatPos(Branches) = x
                    BranchTaken(Branches) = 1
                    BranchInputPos(Branches) = i
                    BranchWithExpression(Branches) = Expression
                    BranchLevel(Branches) = level
                End If

                'Scan for Opt () options
                i1 = i: i2 = i
                If Expression Then i2 = n
                'Scan a$ for opt () x
                'Note: Finding the closest opt option is necessary
                'Note: This needs to be bracket sensitive
                OutOfRange = 2147483647
                position = OutOfRange
                which = 0
                removePrefix = 0
                If i <= n Then 'Past end of contect check
                    For o = 1 To t
                        words = OptWords(x, o)
                        b = 0
                        For i3 = i1 To i2
                            If i3 + words - 1 <= n Then 'enough elements exist
                                c$ = getelement$(a$, i3)
                                If b = 0 Then
                                    'Build comparison string (spacing elements)
                                    For w = 2 To words
                                        c$ = c$ + " " + getelement$(a$, i3 + w - 1)
                                    Next w
                                    'Compare
                                    noPrefixMatch = Left$(Opt(x, o), 1) = "_" And qb64prefix_set = 1 And c$ = UCase$(Mid$(RTrim$(Opt(x, o)), 2))
                                    If c$ = UCase$(RTrim$(Opt(x, o))) Or noPrefixMatch Then
                                        'Record Match
                                        If i3 < position Then
                                            position = i3
                                            which = o
                                            If noPrefixMatch Then removePrefix = 1
                                            bvalue = b
                                            Exit For 'Exit the i3 loop
                                        End If 'position check
                                    End If 'match
                                End If

                                If Asc(c$) = 44 And b = 0 Then
                                    Exit For 'Expressions cannot contain a "," in their base level
                                    'Because this wasn't interceppted by the above code it isn't the Opt either
                                End If
                                If Asc(c$) = 40 Then
                                    b = b + 1
                                End If
                                If Asc(c$) = 41 Then
                                    b = b - 1
                                    If b = -1 Then Exit For 'Exited current bracketting level, making any following match invalid
                                End If

                            End If 'enough elements exist
                        Next i3
                    Next o
                End If 'Past end of contect check

                If position <> OutOfRange Then 'Found?
                    'Found...
                    level = Lev(x) 'Adjust level
                    If Expression Then
                        'Found...Expression...
                        'Has an expression been provided?
                        If position > i And bvalue = 0 Then
                            'Found...Expression...Provided...
                            separgs(Expression) = getelements$(ca$, i, position - 1)
                            Expression = 0
                            i = position
                        Else
                            'Found...Expression...Omitted...
                            '*********backtrack************
                            GoTo OptCheckBacktrack
                            '******************************
                        End If
                    End If 'Expression
                    i = i + OptWords(x, which)
                    separgslayout(x) = Chr$(Len(RTrim$(Opt(x, which))) - removePrefix) + SCase$(Mid$(RTrim$(Opt(x, which)), removePrefix + 1))
                    separgs(x) = Chr$(0) + str2(which)
                Else
                    'Not Found...
                    '*********backtrack************
                    OptCheckBacktrack:
                    'Was this optional?
                    If Lev(x) > EntryLev(x) Then 'Optional Opt ()?
                        'Not Found...Optional...
                        'Simply don't enter the optional higher level and continue as normal
                        BranchTaken(Branches) = 0
                        level = currentlev 'We aren't entering the level after all, so our level should remain at the opt's entrylevel
                    Else
                        Backtrack:
                        'Not Found...Mandatory...
                        '1)Erase previous branches where both options have been tried
                        For branch = Branches To 1 Step -1 'Remove branches until last taken branch is found
                            If BranchTaken(branch) Then Exit For
                            Branches = Branches - 1 'Remove branch (it has already been tried with both possible combinations)
                        Next
                        If Branches = 0 Then 'All options have been exhausted
                            seperateargs_error = 1
                            seperateargs_error_message = "Syntax error"
                            If Len(id2.hr_syntax) > 0 Then seperateargs_error_message = seperateargs_error_message + " - Reference: " + id2.hr_syntax
                            Exit Function
                        End If
                        '2)Toggle taken branch to untaken and revert
                        BranchTaken(Branches) = 0 'toggle branch to untaken
                        Expression = BranchWithExpression(Branches)
                        i = BranchInputPos(Branches)
                        x = BranchFormatPos(Branches)
                        level = BranchLevel(Branches)
                        '3)Erase any content created after revert position
                        If Expression Then separgs(Expression) = "n-ll"
                        For x2 = x To lastt
                            separgs(x2) = "n-ll"
                            separgslayout(x2) = ""
                        Next
                    End If 'Optional Opt ()?
                    '******************************

                End If 'Found?

            End If 't

        End If 'possible to enter level

    Next x

    'Final expression?
    If Expression Then
        If i <= n Then
            separgs(Expression) = getelements$(ca$, i, n)

            'can this be an expression?
            'check it passes bracketting and comma rules
            b = 0
            For i2 = i To n
                c$ = getelement$(a$, i2)
                If Asc(c$) = 44 And b = 0 Then
                    GoTo Backtrack
                End If
                If Asc(c$) = 40 Then
                    b = b + 1
                End If
                If Asc(c$) = 41 Then
                    b = b - 1
                    If b = -1 Then GoTo Backtrack
                End If
            Next
            If b <> 0 Then GoTo Backtrack

            i = n + 1 'So it passes the test below
        Else
            GoTo Backtrack
        End If
    End If 'Expression

    If i <> n + 1 Then GoTo Backtrack 'Trailing content?

    If Debug Then
        Print #9, "--------SEPERATE ARGUMENTS REPORT #2--------"
        For i = 1 To lastt
            Print #9, i, separgs(i)
        Next
    End If

    '   DIM PassRule(1 TO 100) AS LONG
    '   '0 means no pass rule
    '   'negative values refer to an opt () element
    '   'positive values refer to a flag value
    '   PassFlag = 1


    If PassFlag <> 1 Then seperateargs = 1 'Return whether a 'passed' flags variable is required
    pass& = 0 'The 'passed' value (shared by argument reference)

    'Note: The separgs() elements will be compacted to the C++ function arguments
    x = 1 'The new index to move compacted content to within separgs()

    For i = 1 To lastt

        If DontPass(i) = 0 Then

            If PassRule(i) > 0 Then
                If separgs(i) <> "n-ll" Then pass& = pass& Or PassRule(i) 'build 'passed' flags
            End If

            separgs(x) = separgs(i)
            separgslayout(x) = separgslayout(i)

            If Len(separgs(x)) Then
                If Asc(separgs(x)) = 0 Then
                    'switch omit layout tag from item to layout info
                    separgs(x) = Right$(separgs(x), Len(separgs(x)) - 1)
                    separgslayout(x) = separgslayout(x) + Chr$(0)
                End If
            End If

            If separgs(x) = "n-ll" Then separgs(x) = "N-LL"
            x = x + 1

        Else
            'its gonna be skipped!
            'add layout to the next one to be safe

            'for syntax such as [{HELLO}] which uses a flag instead of being passed
            If PassRule(i) > 0 Then
                If separgs(i) <> "n-ll" Then pass& = pass& Or PassRule(i) 'build 'passed' flags
            End If

            separgslayout(i + 1) = separgslayout(i) + separgslayout(i + 1)

        End If
    Next
    separgslayout(x) = separgslayout(i) 'set final layout

    'x = x - 1
    'PRINT "total arguments:"; x
    'PRINT "pass omit (0/1):"; omit
    'PRINT "pass&="; pass&

End Function

Sub setrefer (a2$, typ2 As Long, e2$, method As Long)
    a$ = a2$: typ = typ2: e$ = e2$
    If method <> 1 Then e$ = fixoperationorder$(e$)
    If Error_Happened Then Exit Sub
    tl$ = tlayout$

    'method: 0 evaulatetotyp e$
    '        1 skip evaluation of e$ and use as is
    '*due to the complexity of setting a reference with a value/string
    ' this function handles the problem

    'retrieve ID
    i = InStr(a$, sp3)
    If i Then
        idnumber = Val(Left$(a$, i - 1)): a$ = Right$(a$, Len(a$) - i)
    Else
        idnumber = Val(a$)
    End If
    getid idnumber
    If Error_Happened Then Exit Sub

    'UDT?
    If typ And ISUDT Then

        'print "setrefer-ing a UDT!"
        u = Val(a$)
        i = InStr(a$, sp3): a$ = Right$(a$, Len(a$) - i): E = Val(a$)
        i = InStr(a$, sp3): o$ = Right$(a$, Len(a$) - i)
        n$ = "UDT_" + RTrim$(id.n): If id.t = 0 Then n$ = "ARRAY_" + n$ + "[0]"

        If E <> 0 And u = 1 Then 'Setting _MEM type elements is not allowed!
            Give_Error "Cannot set read-only element of _MEM TYPE": Exit Sub
        End If

        If E = 0 Then
            'use u and u's size

            If method <> 0 Then Give_Error "Unexpected internal code reference to UDT": Exit Sub
            lhsscope$ = scope$
            e$ = evaluate(e$, t2)
            If Error_Happened Then Exit Sub
            If (t2 And ISUDT) = 0 Then Give_Error "Expected = similar user defined type": Exit Sub

            If (t2 And ISREFERENCE) = 0 Then
                If t2 And ISPOINTER Then
                    src$ = "((char*)" + e$ + ")"
                    e2 = 0: u2 = t2 And 511
                Else
                    src$ = "((char*)&" + e$ + ")"
                    e2 = 0: u2 = t2 And 511
                End If
                GoTo directudt
            End If

            '****problem****
            idnumber2 = Val(e$)
            getid idnumber2


            If Error_Happened Then Exit Sub
            n2$ = "UDT_" + RTrim$(id.n): If id.t = 0 Then n2$ = "ARRAY_" + n2$ + "[0]"
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i): u2 = Val(e$)
            i = InStr(e$, sp3): e$ = Right$(e$, Len(e$) - i): e2 = Val(e$)
            i = InStr(e$, sp3): o2$ = Right$(e$, Len(e$) - i)
            'WARNING: u2 may need minor modifications based on e to see if they are the same

            'we have now established we have 2 pointers to similar data types!
            'ASSUME BYTE TYPE!!!
            src$ = "((char*)" + scope$ + n2$ + ")+(" + o2$ + ")"
            directudt:
            If u <> u2 Or e2 <> 0 Then Give_Error "Expected = similar user defined type": Exit Sub
            dst$ = "((char*)" + lhsscope$ + n$ + ")+(" + o$ + ")"
            copy_full_udt dst$, src$, MainTxtBuf, 0, u

            'print "setFULLUDTrefer!"

            tlayout$ = tl$
            Exit Sub

        End If 'e=0

        If typ And ISOFFSETINBITS Then Give_Error "Cannot resolve bit-length variables inside user defined types": Exit Sub
        If typ And ISSTRING Then
            If typ And ISFIXEDLENGTH Then
                o2$ = "(((uint8*)" + scope$ + n$ + ")+(" + o$ + "))"
                r$ = "qbs_new_fixed(" + o2$ + "," + str2(udtetypesize(E)) + ",1)"
            Else
                r$ = "*((qbs**)((char*)(" + scope$ + n$ + ")+(" + o$ + ")))"
            End If
            If method = 0 Then e$ = evaluatetotyp(e$, STRINGTYPE - ISPOINTER)
            If Error_Happened Then Exit Sub
            WriteBufLine MainTxtBuf, "qbs_set(" + r$ + "," + e$ + ");"
            WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
        Else
            typ = typ - ISUDT - ISREFERENCE - ISPOINTER
            If typ And ISARRAY Then typ = typ - ISARRAY
            t$ = typ2ctyp$(typ, "")
            If Error_Happened Then Exit Sub
            o2$ = "(((char*)" + scope$ + n$ + ")+(" + o$ + "))"
            r$ = "*" + "(" + t$ + "*)" + o2$
            If method = 0 Then e$ = evaluatetotyp(e$, typ)
            If Error_Happened Then Exit Sub
            WriteBufLine MainTxtBuf, r$ + "=" + e$ + ";"
        End If

        'print "setUDTrefer:"+r$,e$
        tlayout$ = tl$
        If Left$(r$, 1) = "*" Then r$ = Mid$(r$, 2)
        Exit Sub
    End If


    'array?
    If id.arraytype Then
        n$ = RTrim$(id.callname)
        typ = typ - ISPOINTER - ISREFERENCE 'typ now looks like a regular value

        If (typ And ISSTRING) Then
            If (typ And ISFIXEDLENGTH) Then
                offset$ = "&((uint8*)(" + n$ + "[0]))[tmp_long*" + str2(id.tsize) + "]"
                r$ = "qbs_new_fixed(" + offset$ + "," + str2(id.tsize) + ",1)"
                WriteBufLine MainTxtBuf, "tmp_long=" + a$ + ";"
                If method = 0 Then
                    l$ = "if (!new_error) qbs_set(" + r$ + "," + evaluatetotyp(e$, typ) + ");"
                    If Error_Happened Then Exit Sub
                Else
                    l$ = "if (!new_error) qbs_set(" + r$ + "," + e$ + ");"
                End If
                WriteBufLine MainTxtBuf, l$
            Else
                WriteBufLine MainTxtBuf, "tmp_long=" + a$ + ";"
                If method = 0 Then
                    l$ = "if (!new_error) qbs_set( ((qbs*)(((uint64*)(" + n$ + "[0]))[tmp_long]))," + evaluatetotyp(e$, typ) + ");"
                    If Error_Happened Then Exit Sub
                Else
                    l$ = "if (!new_error) qbs_set( ((qbs*)(((uint64*)(" + n$ + "[0]))[tmp_long]))," + e$ + ");"
                End If
                WriteBufLine MainTxtBuf, l$
            End If
            WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
            tlayout$ = tl$
            If Left$(r$, 1) = "*" Then r$ = Mid$(r$, 2)
            Exit Sub
        End If

        If (typ And ISOFFSETINBITS) Then
            'r$ = "setbits_" + str2(typ AND 511) + "("
            r$ = "setbits(" + str2(typ And 511) + ","
            r$ = r$ + "(uint8*)(" + n$ + "[0])" + ",tmp_long,"
            WriteBufLine MainTxtBuf, "tmp_long=" + a$ + ";"
            If method = 0 Then
                l$ = "if (!new_error) " + r$ + evaluatetotyp(e$, typ) + ");"
                If Error_Happened Then Exit Sub
            Else
                l$ = "if (!new_error) " + r$ + e$ + ");"
            End If
            WriteBufLine MainTxtBuf, l$
            tlayout$ = tl$
            Exit Sub
        Else
            t$ = ""
            If (typ And ISFLOAT) Then
                If (typ And 511) = 32 Then t$ = "float"
                If (typ And 511) = 64 Then t$ = "double"
                If (typ And 511) = 256 Then t$ = "long double"
            Else
                If (typ And ISUNSIGNED) Then
                    If (typ And 511) = 8 Then t$ = "uint8"
                    If (typ And 511) = 16 Then t$ = "uint16"
                    If (typ And 511) = 32 Then t$ = "uint32"
                    If (typ And 511) = 64 Then t$ = "uint64"
                    If typ And ISOFFSET Then t$ = "uptrszint"
                Else
                    If (typ And 511) = 8 Then t$ = "int8"
                    If (typ And 511) = 16 Then t$ = "int16"
                    If (typ And 511) = 32 Then t$ = "int32"
                    If (typ And 511) = 64 Then t$ = "int64"
                    If typ And ISOFFSET Then t$ = "ptrszint"
                End If
            End If
        End If
        If t$ = "" Then Give_Error "Cannot find C type to return array data": Exit Sub
        WriteBufLine MainTxtBuf, "tmp_long=" + a$ + ";"
        If method = 0 Then
            l$ = "if (!new_error) ((" + t$ + "*)(" + n$ + "[0]))[tmp_long]=" + evaluatetotyp(e$, typ) + ";"
            If Error_Happened Then Exit Sub
        Else
            l$ = "if (!new_error) ((" + t$ + "*)(" + n$ + "[0]))[tmp_long]=" + e$ + ";"
        End If

        WriteBufLine MainTxtBuf, l$
        tlayout$ = tl$
        Exit Sub
    End If 'array

    'variable?
    If id.t Then
        r$ = RTrim$(id.n)
        t = id.t
        'remove irrelavant flags
        If (t And ISINCONVENTIONALMEMORY) Then t = t - ISINCONVENTIONALMEMORY
        typ = t

        'string variable?
        If (t And ISSTRING) Then
            If (t And ISFIXEDLENGTH) Then
                r$ = scope$ + "STRING" + str2(id.tsize) + "_" + r$
            Else
                r$ = scope$ + "STRING_" + r$
            End If
            If method = 0 Then e$ = evaluatetotyp(e$, ISSTRING)
            If Error_Happened Then Exit Sub
            WriteBufLine MainTxtBuf, "qbs_set(" + r$ + "," + e$ + ");"
            WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
            If arrayprocessinghappened Then arrayprocessinghappened = 0
            tlayout$ = tl$
            If Left$(r$, 1) = "*" Then r$ = Mid$(r$, 2)
            Exit Sub
        End If

        'bit-length variable?
        If (t And ISOFFSETINBITS) Then
            b = t And 511
            If (t And ISUNSIGNED) Then
                r$ = "*" + scope$ + "UBIT" + str2(t And 511) + "_" + r$
                If method = 0 Then e$ = evaluatetotyp(e$, 64& + ISUNSIGNED)
                If Error_Happened Then Exit Sub
                l$ = r$ + "=(" + e$ + ")&" + str2(bitmask(b)) + ";"
                WriteBufLine MainTxtBuf, l$
            Else
                r$ = "*" + scope$ + "BIT" + str2(t And 511) + "_" + r$
                If method = 0 Then e$ = evaluatetotyp(e$, 64&)
                If Error_Happened Then Exit Sub
                l$ = "if ((" + r$ + "=" + e$ + ")&" + str2(2 ^ (b - 1)) + "){"
                WriteBufLine MainTxtBuf, l$
                'signed bit is set
                l$ = r$ + "|=" + str2(bitmaskinv(b)) + ";"
                WriteBufLine MainTxtBuf, l$
                WriteBufLine MainTxtBuf, "}else{"
                'signed bit is not set
                l$ = r$ + "&=" + str2(bitmask(b)) + ";"
                WriteBufLine MainTxtBuf, l$
                WriteBufLine MainTxtBuf, "}"
            End If
            If stringprocessinghappened Then WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);": stringprocessinghappened = 0
            If arrayprocessinghappened Then arrayprocessinghappened = 0
            tlayout$ = tl$
            If Left$(r$, 1) = "*" Then r$ = Mid$(r$, 2)
            Exit Sub
        End If

        'standard variable?
        If t = BYTETYPE Then r$ = "*" + scope$ + "BYTE_" + r$: GoTo sref
        If t = UBYTETYPE Then r$ = "*" + scope$ + "UBYTE_" + r$: GoTo sref
        If t = INTEGERTYPE Then r$ = "*" + scope$ + "INTEGER_" + r$: GoTo sref
        If t = UINTEGERTYPE Then r$ = "*" + scope$ + "UINTEGER_" + r$: GoTo sref
        If t = LONGTYPE Then r$ = "*" + scope$ + "LONG_" + r$: GoTo sref
        If t = ULONGTYPE Then r$ = "*" + scope$ + "ULONG_" + r$: GoTo sref
        If t = INTEGER64TYPE Then r$ = "*" + scope$ + "INTEGER64_" + r$: GoTo sref
        If t = UINTEGER64TYPE Then r$ = "*" + scope$ + "UINTEGER64_" + r$: GoTo sref
        If t = SINGLETYPE Then r$ = "*" + scope$ + "SINGLE_" + r$: GoTo sref
        If t = DOUBLETYPE Then r$ = "*" + scope$ + "DOUBLE_" + r$: GoTo sref
        If t = FLOATTYPE Then r$ = "*" + scope$ + "FLOAT_" + r$: GoTo sref
        If t = OFFSETTYPE Then r$ = "*" + scope$ + "OFFSET_" + r$: GoTo sref
        If t = UOFFSETTYPE Then r$ = "*" + scope$ + "UOFFSET_" + r$: GoTo sref
        sref:
        t2 = t - ISPOINTER
        If method = 0 Then e$ = evaluatetotyp(e$, t2)
        If Error_Happened Then Exit Sub
        l$ = r$ + "=" + e$ + ";"
        WriteBufLine MainTxtBuf, l$
        If stringprocessinghappened Then WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);": stringprocessinghappened = 0
        If arrayprocessinghappened Then arrayprocessinghappened = 0
        tlayout$ = tl$

        If Left$(r$, 1) = "*" Then r$ = Mid$(r$, 2)
        Exit Sub
    End If 'variable

    tlayout$ = tl$
End Sub

Function str2$ (v As Long)
    str2$ = _Trim$(Str$(v))
End Function

Function str2u64$ (v~&&)
    str2u64$ = LTrim$(RTrim$(Str$(v~&&)))
End Function

Function str2i64$ (v&&)
    str2i64$ = LTrim$(RTrim$(Str$(v&&)))
End Function

Function typ2ctyp$ (t As Long, tstr As String)
    ctyp$ = ""
    'typ can be passed as either: (the unused value is ignored)
    'i. as a typ value in t
    'ii. as a typ symbol (eg. "~%") in tstr
    'iii. as a typ name (eg. _UNSIGNED INTEGER) in tstr
    If tstr$ = "" Then
        If (t And ISARRAY) Then Exit Function 'cannot return array types
        If (t And ISSTRING) Then typ2ctyp$ = "qbs": Exit Function
        b = t And 511
        If (t And ISUDT) Then typ2ctyp$ = "void": Exit Function
        If (t And ISOFFSETINBITS) Then
            If b <= 32 Then ctyp$ = "int32" Else ctyp$ = "int64"
            If (t And ISUNSIGNED) Then ctyp$ = "u" + ctyp$
            typ2ctyp$ = ctyp$: Exit Function
        End If
        If (t And ISFLOAT) Then
            If b = 32 Then ctyp$ = "float"
            If b = 64 Then ctyp$ = "double"
            If b = 256 Then ctyp$ = "long double"
        Else
            If b = 8 Then ctyp$ = "int8"
            If b = 16 Then ctyp$ = "int16"
            If b = 32 Then ctyp$ = "int32"
            If b = 64 Then ctyp$ = "int64"
            If t And ISOFFSET Then ctyp$ = "ptrszint"
            If (t And ISUNSIGNED) Then ctyp$ = "u" + ctyp$
        End If
        If t And ISOFFSET Then
            ctyp$ = "ptrszint": If (t And ISUNSIGNED) Then ctyp$ = "uptrszint"
        End If
        typ2ctyp$ = ctyp$: Exit Function
    End If

    ts$ = tstr$
    'is ts$ a symbol?
    If ts$ = "$" Then ctyp$ = "qbs"
    If ts$ = "!" Then ctyp$ = "float"
    If ts$ = "#" Then ctyp$ = "double"
    If ts$ = "##" Then ctyp$ = "long double"
    If Left$(ts$, 1) = "~" Then unsgn = 1: ts$ = Right$(ts$, Len(ts$) - 1)
    If Left$(ts$, 1) = "`" Then
        n$ = Right$(ts$, Len(ts$) - 1)
        b = 1
        If n$ <> "" Then
            If isuinteger(n$) = 0 Then Give_Error "Invalid index after _BIT type": Exit Function
            b = Val(n$)
            If b > 64 Then Give_Error "Invalid index after _BIT type": Exit Function
        End If
        If b <= 32 Then ctyp$ = "int32" Else ctyp$ = "int64"
        If unsgn Then ctyp$ = "u" + ctyp$
        typ2ctyp$ = ctyp$: Exit Function
    End If
    If ts$ = "%&" Then
        typ2ctyp$ = "ptrszint": If (t And ISUNSIGNED) Then typ2ctyp$ = "uptrszint"
        Exit Function
    End If
    If ts$ = "%%" Then ctyp$ = "int8"
    If ts$ = "%" Then ctyp$ = "int16"
    If ts$ = "&" Then ctyp$ = "int32"
    If ts$ = "&&" Then ctyp$ = "int64"
    If ctyp$ <> "" Then
        If unsgn Then ctyp$ = "u" + ctyp$
        typ2ctyp$ = ctyp$: Exit Function
    End If
    'is tstr$ a named type? (eg. 'LONG')
    s$ = type2symbol$(tstr$)
    If Error_Happened Then Exit Function
    If Len(s$) Then
        typ2ctyp$ = typ2ctyp$(0, s$)
        If Error_Happened Then Exit Function
        Exit Function
    End If

    Give_Error "Invalid type": Exit Function

End Function

Function type2symbol$ (typ$)
    t$ = typ$
    For i = 1 To Len(t$)
        If Mid$(t$, i, 1) = sp Then Mid$(t$, i, 1) = " "
    Next
    e$ = "Cannot convert type (" + typ$ + ") to symbol"

    t2$ = "INTEGER": s$ = "%": If t$ = t2$ Then GoTo t2sfound
    t2$ = "LONG": s$ = "&": If t$ = t2$ Then GoTo t2sfound
    t2$ = "SINGLE": s$ = "!": If t$ = t2$ Then GoTo t2sfound
    t2$ = "DOUBLE": s$ = "#": If t$ = t2$ Then GoTo t2sfound

    t2$ = "_BYTE": s$ = "%%": If t$ = t2$ Then GoTo t2sfound
    t2$ = "BYTE": s$ = "%%": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound

    t2$ = "_UNSIGNED LONG": s$ = "~&": If t$ = t2$ Then GoTo t2sfound
    t2$ = "UNSIGNED LONG": s$ = "~&": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound

    t2$ = "_UNSIGNED INTEGER": s$ = "~%": If t$ = t2$ Then GoTo t2sfound
    t2$ = "UNSIGNED INTEGER": s$ = "~%": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound

    t2$ = "_UNSIGNED _BYTE": s$ = "~%%": If t$ = t2$ Then GoTo t2sfound
    t2$ = "_UNSIGNED BYTE": s$ = "~%%": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound
    t2$ = "UNSIGNED _BYTE": s$ = "~%%": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound
    t2$ = "UNSIGNED BYTE": s$ = "~%%": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound

    t2$ = "_UNSIGNED _OFFSET": s$ = "~%&": If t$ = t2$ Then GoTo t2sfound
    t2$ = "_UNSIGNED OFFSET": s$ = "~%&": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound
    t2$ = "UNSIGNED _OFFSET": s$ = "~%&": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound
    t2$ = "UNSIGNED OFFSET": s$ = "~%&": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound

    t2$ = "_UNSIGNED _INTEGER64": s$ = "~&&": If t$ = t2$ Then GoTo t2sfound
    t2$ = "_UNSIGNED INTEGER64": s$ = "~&&": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound
    t2$ = "UNSIGNED _INTEGER64": s$ = "~&&": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound
    t2$ = "UNSIGNED INTEGER64": s$ = "~&&": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound

    t2$ = "_INTEGER64": s$ = "&&": If t$ = t2$ Then GoTo t2sfound
    t2$ = "INTEGER64": s$ = "&&": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound

    t2$ = "_OFFSET": s$ = "%&": If t$ = t2$ Then GoTo t2sfound
    t2$ = "OFFSET": s$ = "%&": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound

    t2$ = "_FLOAT": s$ = "##": If t$ = t2$ Then GoTo t2sfound
    t2$ = "FLOAT": s$ = "##": If qb64prefix_set = 1 And t$ = t2$ Then GoTo t2sfound

    ' These can have a length after them, so LEFT$() is used
    t2$ = "STRING": s$ = "$": If Left$(t$, Len(t2$)) = t2$ Then GoTo t2sfound
    t2$ = "_UNSIGNED _BIT": s$ = "~`1": If Left$(t$, Len(t2$)) = t2$ Then GoTo t2sfound
    t2$ = "_UNSIGNED BIT": s$ = "~`1": If qb64prefix_set = 1 And Left$(t$, Len(t2$)) = t2$ Then GoTo t2sfound
    t2$ = "UNSIGNED _BIT": s$ = "~`1": If qb64prefix_set = 1 And Left$(t$, Len(t2$)) = t2$ Then GoTo t2sfound
    t2$ = "UNSIGNED BIT": s$ = "~`1": If qb64prefix_set = 1 And Left$(t$, Len(t2$)) = t2$ Then GoTo t2sfound
    t2$ = "_BIT": s$ = "`1": If Left$(t$, Len(t2$)) = t2$ Then GoTo t2sfound
    t2$ = "BIT": s$ = "`1": If qb64prefix_set = 1 And Left$(t$, Len(t2$)) = t2$ Then GoTo t2sfound

    Give_Error e$: Exit Function
    t2sfound:
    type2symbol$ = s$
    If Len(t2$) <> Len(t$) Then
        If s$ <> "$" And s$ <> "~`1" And s$ <> "`1" Then Give_Error e$: Exit Function
        t$ = Right$(t$, Len(t$) - Len(t2$))
        If Left$(t$, 3) <> " * " Then Give_Error e$: Exit Function
        t$ = Right$(t$, Len(t$) - 3)
        If isuinteger(t$) = 0 Then Give_Error e$: Exit Function
        v = Val(t$)
        If v = 0 Then Give_Error e$: Exit Function
        If s$ <> "$" And v > 64 Then Give_Error e$: Exit Function
        If s$ = "$" Then
            s$ = s$ + str2$(v)
        Else
            s$ = Left$(s$, Len(s$) - 1) + str2$(v)
        End If
        type2symbol$ = s$
    End If
End Function

'Strips away bits/indentifiers which make locating a variables source difficult
Function typecomp (typ)
    typ2 = typ
    If (typ2 And ISINCONVENTIONALMEMORY) Then typ2 = typ2 - ISINCONVENTIONALMEMORY
    typecomp = typ2
End Function

Function typname2typ& (t2$)
    typname2typsize = 0 'the default

    t$ = t2$

    'symbol?
    ts$ = t$
    If ts$ = "$" Then typname2typ& = STRINGTYPE: Exit Function
    If ts$ = "!" Then typname2typ& = SINGLETYPE: Exit Function
    If ts$ = "#" Then typname2typ& = DOUBLETYPE: Exit Function
    If ts$ = "##" Then typname2typ& = FLOATTYPE: Exit Function

    'fixed length string?
    If Left$(ts$, 1) = "$" Then
        n$ = Right$(ts$, Len(ts$) - 1)
        If isuinteger(n$) = 0 Then Give_Error "Invalid index after STRING * type": Exit Function
        b = Val(n$)
        If b = 0 Then Give_Error "Invalid index after STRING * type": Exit Function
        typname2typsize = b
        typname2typ& = STRINGTYPE + ISFIXEDLENGTH
        Exit Function
    End If

    'unsigned?
    If Left$(ts$, 1) = "~" Then unsgn = 1: ts$ = Right$(ts$, Len(ts$) - 1)

    'bit-type?
    If Left$(ts$, 1) = "`" Then
        n$ = Right$(ts$, Len(ts$) - 1)
        b = 1
        If n$ <> "" Then
            If isuinteger(n$) = 0 Then Give_Error "Invalid index after _BIT type": Exit Function
            b = Val(n$)
            If b > 64 Then Give_Error "Invalid index after _BIT type": Exit Function
        End If
        If unsgn Then typname2typ& = UBITTYPE + (b - 1) Else typname2typ& = BITTYPE + (b - 1)
        Exit Function
    End If

    t = 0
    If ts$ = "%%" Then t = BYTETYPE
    If ts$ = "%" Then t = INTEGERTYPE
    If ts$ = "&" Then t = LONGTYPE
    If ts$ = "&&" Then t = INTEGER64TYPE
    If ts$ = "%&" Then t = OFFSETTYPE

    If t Then
        If unsgn Then t = t + ISUNSIGNED
        typname2typ& = t: Exit Function
    End If
    'not a valid symbol

    'type name?
    For i = 1 To Len(t$)
        If Mid$(t$, i, 1) = sp Then Mid$(t$, i, 1) = " "
    Next
    If t$ = "STRING" Then typname2typ& = STRINGTYPE: Exit Function

    If Left$(t$, 9) = "STRING * " Then

        n$ = Right$(t$, Len(t$) - 9)

        'constant check 2011
        hashfound = 0
        hashname$ = n$
        hashchkflags = HASHFLAG_CONSTANT
        hashres = HashFindRev(hashname$, hashchkflags, hashresflags, hashresref)
        Do While hashres
            If constsubfunc(hashresref) = subfuncn Or constsubfunc(hashresref) = 0 Then
                If constdefined(hashresref) Then
                    hashfound = 1
                    Exit Do
                End If
            End If
            If hashres <> 1 Then hashres = HashFindCont(hashresflags, hashresref) Else hashres = 0
        Loop
        If hashfound Then
            i2 = hashresref
            t = consttype(i2)
            If t And ISSTRING Then Give_Error "Expected STRING * numeric-constant": Exit Function
            'convert value to general formats
            If t And ISFLOAT Then
                v## = constfloat(i2)
                v&& = v##
                v~&& = v&&
            Else
                If t And ISUNSIGNED Then
                    v~&& = constuinteger(i2)
                    v&& = v~&&
                    v## = v&&
                Else
                    v&& = constinteger(i2)
                    v## = v&&
                    v~&& = v&&
                End If
            End If
            If v&& < 1 Or v&& > 9999999999 Then Give_Error "STRING * out-of-range constant": Exit Function
            b = v&&
            GoTo constantlenstr
        End If

        If isuinteger(n$) = 0 Or Len(n$) > 10 Then Give_Error "Invalid number/constant after STRING * type": Exit Function
        b = Val(n$)
        If b = 0 Or Len(n$) > 10 Then Give_Error "Invalid number after STRING * type": Exit Function
        constantlenstr:
        typname2typsize = b
        typname2typ& = STRINGTYPE + ISFIXEDLENGTH
        Exit Function
    End If

    If t$ = "SINGLE" Then typname2typ& = SINGLETYPE: Exit Function
    If t$ = "DOUBLE" Then typname2typ& = DOUBLETYPE: Exit Function
    If t$ = "_FLOAT" Or (t$ = "FLOAT" And qb64prefix_set = 1) Then typname2typ& = FLOATTYPE: Exit Function
    If Left$(t$, 10) = "_UNSIGNED " Or (Left$(t$, 9) = "UNSIGNED " And qb64prefix_set = 1) Then
        u = 1
        t$ = Mid$(t$, InStr(t$, Chr$(32)) + 1)
    End If
    If Left$(t$, 4) = "_BIT" Or (Left$(t$, 3) = "BIT" And qb64prefix_set = 1) Then
        If t$ = "_BIT" Or (t$ = "BIT" And qb64prefix_set = 1) Then
            If u Then typname2typ& = UBITTYPE Else typname2typ& = BITTYPE
            Exit Function
        End If

        If Left$(t$, 7) <> "_BIT * " And Left$(t$, 6) <> "BIT * " Then Give_Error "Expected " + qb64prefix$ + "BIT * number": Exit Function

        If Left$(t$, 4) = "_BIT" Then
            n$ = Right$(t$, Len(t$) - 7)
        Else
            n$ = Right$(t$, Len(t$) - 6)
        End If

        If isuinteger(n$) = 0 Then Give_Error "Invalid size after " + qb64prefix$ + "BIT *": Exit Function
        b = Val(n$)
        If b = 0 Or b > 64 Then Give_Error "Invalid size after " + qb64prefix$ + "BIT *": Exit Function
        t = BITTYPE - 1 + b: If u Then t = t + ISUNSIGNED
        typname2typ& = t
        Exit Function
    End If

    t = 0
    If t$ = "_BYTE" Or (t$ = "BYTE" And qb64prefix_set = 1) Then t = BYTETYPE
    If t$ = "INTEGER" Then t = INTEGERTYPE
    If t$ = "LONG" Then t = LONGTYPE
    If t$ = "_INTEGER64" Or (t$ = "INTEGER64" And qb64prefix_set = 1) Then t = INTEGER64TYPE
    If t$ = "_OFFSET" Or (t$ = "OFFSET" And qb64prefix_set = 1) Then t = OFFSETTYPE
    If t Then
        If u Then t = t + ISUNSIGNED
        typname2typ& = t
        Exit Function
    End If
    If u Then Exit Function '_UNSIGNED (nothing)

    'UDT?
    For i = 1 To lasttype
        If t$ = RTrim$(udtxname(i)) Then
            typname2typ& = ISUDT + ISPOINTER + i
            Exit Function
        ElseIf RTrim$(udtxname(i)) = "_MEM" And t$ = "MEM" And qb64prefix_set = 1 Then
            typname2typ& = ISUDT + ISPOINTER + i
            Exit Function
        End If
    Next

    'return 0 (failed)
End Function

Function uniquenumber&
    uniquenumbern = uniquenumbern + 1
    uniquenumber& = uniquenumbern
End Function

Function validlabel (LABEL2$)
    create = CreatingLabel: CreatingLabel = 0
    validlabel = 0
    If Len(LABEL2$) = 0 Then Exit Function
    clabel$ = LABEL2$
    label$ = UCase$(LABEL2$)

    n = numelements(label$)

    If n = 1 Then

        'Note: Reserved words and internal sub/function names are invalid
        hashres = HashFind(label$, HASHFLAG_RESERVED + HASHFLAG_SUB + HASHFLAG_FUNCTION, hashresflags, hashresref)
        Do While hashres
            If hashresflags And (HASHFLAG_SUB + HASHFLAG_FUNCTION) Then
                If ids(hashresref).internal_subfunc Then Exit Function

                If hashresflags And HASHFLAG_SUB Then 'could be a label or a sub call!

                    'analyze format
                    If Asc(ids(hashresref).specialformat) = 32 Then
                        If ids(hashresref).args = 0 Then onecommandsub = 1 Else onecommandsub = 0
                    Else
                        If Asc(ids(hashresref).specialformat) <> 91 Then '"["
                            onecommandsub = 0
                        Else
                            onecommandsub = 1
                            a$ = RTrim$(ids(hashresref).specialformat)
                            b = 1
                            For x = 2 To Len(a$)
                                a = Asc(a$, x)
                                If a = 91 Then b = b + 1
                                If a = 93 Then b = b - 1
                                If b = 0 And x <> Len(a$) Then onecommandsub = 0: Exit For
                            Next
                        End If
                    End If
                    If create <> 0 And onecommandsub = 1 Then
                        If InStr(SubNameLabels$, sp + UCase$(label$) + sp) = 0 Then PossibleSubNameLabels$ = PossibleSubNameLabels$ + UCase$(label$) + sp: Exit Function 'treat as sub call
                    End If

                End If 'sub name

            Else
                'reserved
                Exit Function
            End If
            If hashres <> 1 Then hashres = HashFindCont(hashresflags, hashresref) Else hashres = 0
        Loop

        'Numeric label?
        'quasi numbers are possible, but:
        'a) They may only have one decimal place
        'b) They must be typed with the exact same characters to match
        t$ = label$
        'numeric?
        a = Asc(t$)
        If (a >= 48 And a <= 57) Or a = 46 Then

            'refer to original formatting if possible (eg. 1.10 not 1.1)
            x = InStr(t$, Chr$(44))
            If x Then
                t$ = Right$(t$, Len(t$) - x)
            End If

            'note: The symbols ! and # are valid trailing symbols in QBASIC, regardless of the number's size,
            '      so they are allowed in QB64 for compatibility reasons
            addsymbol$ = removesymbol$(t$)
            If Error_Happened Then Exit Function
            If Len(addsymbol$) Then
                If InStr(addsymbol$, "$") Then Exit Function
                If addsymbol$ <> "#" And addsymbol$ <> "!" Then addsymbol$ = ""
            End If

            If a = 46 Then dp = 1
            For x = 2 To Len(t$)
                a = Asc(Mid$(t$, x, 1))
                If a = 46 Then dp = dp + 1
                If (a < 48 Or a > 57) And a <> 46 Then Exit Function 'not numeric
            Next x
            If dp > 1 Then Exit Function 'too many decimal points
            If dp = 1 And Len(t$) = 1 Then Exit Function 'cant have '.' as a label

            tlayout$ = t$ + addsymbol$

            i = InStr(t$, "."): If i Then Mid$(t$, i, 1) = "p"
            If addsymbol$ = "#" Then t$ = t$ + "d"
            If addsymbol$ = "!" Then t$ = t$ + "s"

            If Len(t$) > 40 Then Exit Function

            LABEL2$ = t$
            validlabel = 1
            Exit Function
        End If 'numeric

    End If 'n=1

    'Alpha-numeric label?
    'Build label

    'structure check (???.???.???.???)
    If (n And 1) = 0 Then Exit Function 'must be an odd number of elements
    For nx = 2 To n - 1 Step 2
        a$ = getelement$(LABEL2$, nx)
        If a$ <> "." Then Exit Function 'every 2nd element must be a period
    Next

    'cannot begin with numeric
    c = Asc(clabel$): If c >= 48 And c <= 57 Then Exit Function

    'elements check
    label3$ = ""
    For nx = 1 To n Step 2
        label$ = getelement$(clabel$, nx)

        'alpha-numeric?
        For x = 1 To Len(label$)
            If alphanumeric(Asc(label$, x)) = 0 Then Exit Function
        Next

        'build label
        If label3$ = "" Then label3$ = UCase$(label$): tlayout$ = label$ Else label3$ = label3$ + fix046$ + UCase$(label$): tlayout$ = tlayout$ + "." + label$
    Next nx

    validlabel = 1
    LABEL2$ = label3$

End Function

Sub xend
    If vWatchOn = 1 Then
        'check if closedmain = 0 in case a main module ends in an include.
        If (inclinenumber(inclevel) = 0 Or closedmain = 0) Then vWatchAddLabel 0, -1
        WriteBufLine MainTxtBuf, "*__LONG_VWATCH_LINENUMBER= 0; SUB_VWATCH((ptrszint*)vwatch_global_vars,(ptrszint*)vwatch_local_vars);"
    End If
    WriteBufLine MainTxtBuf, "sub_end();"
End Sub

Sub xfileprint (a$, ca$, n)
    u$ = str2$(uniquenumber)
    WriteBufLine MainTxtBuf, "tab_spc_cr_size=2;"
    If n = 2 Then Give_Error "Expected # ... , ...": Exit Sub
    a3$ = ""
    b = 0
    For i = 3 To n
        a2$ = getelement$(ca$, i)
        If a2$ = "(" Then b = b + 1
        If a2$ = ")" Then b = b - 1
        If a2$ = "," And b = 0 Then
            If a3$ = "" Then Give_Error "Expected # ... , ...": Exit Sub
            GoTo printgotfn
        End If
        If a3$ = "" Then a3$ = a2$ Else a3$ = a3$ + sp + a2$
    Next
    Give_Error "Expected # ... ,": Exit Sub
    printgotfn:
    e$ = fixoperationorder$(a3$)
    If Error_Happened Then Exit Sub
    l$ = SCase$("Print") + sp + "#" + sp2 + tlayout$ + sp2 + ","
    e$ = evaluatetotyp(e$, 64&)
    If Error_Happened Then Exit Sub
    WriteBufLine MainTxtBuf, "tab_fileno=tmp_fileno=" + e$ + ";"
    WriteBufLine MainTxtBuf, "if (new_error) goto skip" + u$ + ";"
    i = i + 1

    'PRINT USING? (file)
    If n >= i Then
        If getelement(a$, i) = "USING" Then
            'get format string
            fpujump:
            l$ = l$ + sp + SCase$("Using")
            e$ = "": b = 0: puformat$ = ""
            For i = i + 1 To n
                a2$ = getelement(ca$, i)
                If a2$ = "(" Then b = b + 1
                If a2$ = ")" Then b = b - 1
                If b = 0 Then
                    If a2$ = "," Then Give_Error "Expected PRINT USING #filenumber, formatstring ; ...": Exit Sub
                    If a2$ = ";" Then
                        e$ = fixoperationorder$(e$)
                        If Error_Happened Then Exit Sub
                        l$ = l$ + sp + tlayout$ + sp2 + ";"
                        e$ = evaluate(e$, typ)
                        If Error_Happened Then Exit Sub
                        If (typ And ISREFERENCE) Then e$ = refer(e$, typ, 0)
                        If Error_Happened Then Exit Sub
                        If (typ And ISSTRING) = 0 Then Give_Error "Expected PRINT USING #filenumber, formatstring ; ...": Exit Sub
                        puformat$ = e$
                        Exit For
                    End If ';
                End If 'b
                If Len(e$) Then e$ = e$ + sp + a2$ Else e$ = a2$
            Next
            If puformat$ = "" Then Give_Error "Expected PRINT USING #filenumber, formatstring ; ...": Exit Sub
            If i = n Then Give_Error "Expected PRINT USING #filenumber, formatstring ; ...": Exit Sub
            'create build string
            WriteBufLine MainTxtBuf, "tqbs=qbs_new(0,0);"
            'set format start/index variable
            WriteBufLine MainTxtBuf, "tmp_long=0;" 'scan format from beginning
            'create string to hold format in for multiple references
            puf$ = "print_using_format" + u$
            If subfunc = "" Then
                WriteBufLine DataTxtBuf, "static qbs *" + puf$ + ";"
            Else
                WriteBufLine DataTxtBuf, "qbs *" + puf$ + ";"
            End If
            WriteBufLine MainTxtBuf, puf$ + "=qbs_new(0,0); qbs_set(" + puf$ + "," + puformat$ + ");"
            WriteBufLine MainTxtBuf, "if (new_error) goto skip" + u$ + ";"
            'print expressions
            b = 0
            e$ = ""
            last = 0
            For i = i + 1 To n
                a2$ = getelement(ca$, i)
                If a2$ = "(" Then b = b + 1
                If a2$ = ")" Then b = b - 1
                If b = 0 Then
                    If a2$ = ";" Or a2$ = "," Then
                        fprintulast:
                        e$ = fixoperationorder$(e$)
                        If Error_Happened Then Exit Sub
                        If last Then l$ = l$ + sp + tlayout$ Else l$ = l$ + sp + tlayout$ + sp2 + a2$
                        e$ = evaluate(e$, typ)
                        If Error_Happened Then Exit Sub
                        If (typ And ISREFERENCE) Then e$ = refer(e$, typ, 0)
                        If Error_Happened Then Exit Sub
                        If typ And ISSTRING Then

                            If Left$(e$, 9) = "func_tab(" Or Left$(e$, 9) = "func_spc(" Then

                                'TAB/SPC exception
                                'note: position in format-string must be maintained
                                '-print any string up until now
                                WriteBufLine MainTxtBuf, "sub_file_print(tmp_fileno,tqbs,0,0,0);"
                                '-print e$
                                WriteBufLine MainTxtBuf, "qbs_set(tqbs," + e$ + ");"
                                WriteBufLine MainTxtBuf, "if (new_error) goto skip_pu" + u$ + ";"
                                WriteBufLine MainTxtBuf, "sub_file_print(tmp_fileno,tqbs,0,0,0);"
                                '-set length of tqbs to 0
                                WriteBufLine MainTxtBuf, "tqbs->len=0;"

                            Else

                                'regular string
                                WriteBufLine MainTxtBuf, "tmp_long=print_using(" + puf$ + ",tmp_long,tqbs," + e$ + ");"

                            End If

                        Else 'not a string
                            If typ And ISFLOAT Then
                                If (typ And 511) = 32 Then WriteBufLine MainTxtBuf, "tmp_long=print_using_single(" + puf$ + "," + e$ + ",tmp_long,tqbs);"
                                If (typ And 511) = 64 Then WriteBufLine MainTxtBuf, "tmp_long=print_using_double(" + puf$ + "," + e$ + ",tmp_long,tqbs);"
                                If (typ And 511) > 64 Then WriteBufLine MainTxtBuf, "tmp_long=print_using_float(" + puf$ + "," + e$ + ",tmp_long,tqbs);"
                            Else
                                If ((typ And 511) = 64) And (typ And ISUNSIGNED) <> 0 Then
                                    WriteBufLine MainTxtBuf, "tmp_long=print_using_uinteger64(" + puf$ + "," + e$ + ",tmp_long,tqbs);"
                                Else
                                    WriteBufLine MainTxtBuf, "tmp_long=print_using_integer64(" + puf$ + "," + e$ + ",tmp_long,tqbs);"
                                End If
                            End If
                        End If 'string/not string
                        WriteBufLine MainTxtBuf, "if (new_error) goto skip_pu" + u$ + ";"
                        e$ = ""
                        If last Then Exit For
                        GoTo fprintunext
                    End If
                End If
                If Len(e$) Then e$ = e$ + sp + a2$ Else e$ = a2$
                fprintunext:
            Next
            If e$ <> "" Then a2$ = "": last = 1: GoTo fprintulast
            WriteBufLine MainTxtBuf, "skip_pu" + u$ + ":"
            'check for errors
            WriteBufLine MainTxtBuf, "if (new_error){"
            WriteBufLine MainTxtBuf, "g_tmp_long=new_error; new_error=0; sub_file_print(tmp_fileno,tqbs,0,0,0); new_error=g_tmp_long;"
            WriteBufLine MainTxtBuf, "}else{"
            If a2$ = "," Or a2$ = ";" Then nl = 0 Else nl = 1 'note: a2$ is set to the last element of a$
            WriteBufLine MainTxtBuf, "sub_file_print(tmp_fileno,tqbs,0,0," + str2$(nl) + ");"
            WriteBufLine MainTxtBuf, "}"
            WriteBufLine MainTxtBuf, "qbs_free(tqbs);"
            WriteBufLine MainTxtBuf, "qbs_free(" + puf$ + ");"
            WriteBufLine MainTxtBuf, "skip" + u$ + ":"
            WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
            WriteBufLine MainTxtBuf, "tab_spc_cr_size=1;"
            tlayout$ = l$
            Exit Sub
        End If
    End If
    'end of print using code

    If i > n Then
        WriteBufLine MainTxtBuf, "sub_file_print(tmp_fileno,nothingstring,0,0,1);"
        GoTo printblankline
    End If
    b = 0
    e$ = ""
    last = 0
    For i = i To n
        a2$ = getelement(ca$, i)
        If a2$ = "(" Then b = b + 1
        If a2$ = ")" Then b = b - 1
        If b = 0 Then
            If a2$ = ";" Or a2$ = "," Or UCase$(a2$) = "USING" Then
                printfilelast:

                If UCase$(a2$) = "USING" Then
                    If e$ <> "" Then gotofpu = 1 Else GoTo fpujump
                End If

                If a2$ = "," Then usetab = 1 Else usetab = 0
                If last = 1 Then newline = 1 Else newline = 0
                extraspace = 0

                If Len(e$) Then
                    ebak$ = e$
                    pnrtnum = 0
                    printfilenumber:
                    e$ = fixoperationorder$(e$)
                    If Error_Happened Then Exit Sub
                    If pnrtnum = 0 Then
                        If last Then l$ = l$ + sp + tlayout$ Else l$ = l$ + sp + tlayout$ + sp2 + a2$
                    End If
                    e$ = evaluate(e$, typ)
                    If Error_Happened Then Exit Sub
                    If (typ And ISSTRING) = 0 Then
                        e$ = "STR$" + sp + "(" + sp + ebak$ + sp + ")"
                        extraspace = 1
                        pnrtnum = 1
                        GoTo printfilenumber 'force re-evaluation
                    End If
                    If (typ And ISREFERENCE) Then e$ = refer(e$, typ, 0)
                    If Error_Happened Then Exit Sub
                    'format: string, (1/0) extraspace, (1/0) tab, (1/0)begin a new line
                    WriteBufLine MainTxtBuf, "sub_file_print(tmp_fileno," + e$ + "," + Str$(extraspace) + "," + Str$(usetab) + "," + Str$(newline) + ");"
                Else 'len(e$)=0
                    If a2$ = "," Then l$ = l$ + sp + a2$
                    If a2$ = ";" Then
                        If Right$(l$, 1) <> ";" Then l$ = l$ + sp + a2$ 'concat ;; to ;
                    End If
                    If usetab Then WriteBufLine MainTxtBuf, "sub_file_print(tmp_fileno,nothingstring,0,1,0);"
                End If 'len(e$)
                WriteBufLine MainTxtBuf, "if (new_error) goto skip" + u$ + ";"

                e$ = ""
                If gotofpu Then GoTo fpujump
                If last Then Exit For
                GoTo printfilenext
            End If ', or ;
        End If 'b=0
        If e$ <> "" Then e$ = e$ + sp + a2$ Else e$ = a2$
        printfilenext:
    Next
    If e$ <> "" Then a2$ = "": last = 1: GoTo printfilelast
    printblankline:
    WriteBufLine MainTxtBuf, "skip" + u$ + ":"
    WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
    WriteBufLine MainTxtBuf, "tab_spc_cr_size=1;"
    tlayout$ = l$
End Sub

Sub xfilewrite (ca$, n)
    l$ = SCase$("Write") + sp + "#"
    u$ = str2$(uniquenumber)
    WriteBufLine MainTxtBuf, "tab_spc_cr_size=2;"
    If n = 2 Then Give_Error "Expected # ...": Exit Sub
    a3$ = ""
    b = 0
    For i = 3 To n
        a2$ = getelement$(ca$, i)
        If a2$ = "(" Then b = b + 1
        If a2$ = ")" Then b = b - 1
        If a2$ = "," And b = 0 Then
            If a3$ = "" Then Give_Error "Expected # ... , ...": Exit Sub
            GoTo writegotfn
        End If
        If a3$ = "" Then a3$ = a2$ Else a3$ = a3$ + sp + a2$
    Next
    Give_Error "Expected # ... ,": Exit Sub
    writegotfn:
    e$ = fixoperationorder$(a3$)
    If Error_Happened Then Exit Sub
    l$ = l$ + sp2 + tlayout$ + sp2 + ","
    e$ = evaluatetotyp(e$, 64&)
    If Error_Happened Then Exit Sub
    WriteBufLine MainTxtBuf, "tab_fileno=tmp_fileno=" + e$ + ";"
    WriteBufLine MainTxtBuf, "if (new_error) goto skip" + u$ + ";"
    i = i + 1
    If i > n Then
        WriteBufLine MainTxtBuf, "sub_file_print(tmp_fileno,nothingstring,0,0,1);"
        GoTo writeblankline
    End If
    b = 0
    e$ = ""
    last = 0
    For i = i To n
        a2$ = getelement(ca$, i)
        If a2$ = "(" Then b = b + 1
        If a2$ = ")" Then b = b - 1
        If b = 0 Then
            If a2$ = "," Then
                writefilelast:
                If last = 1 Then newline = 1 Else newline = 0
                ebak$ = e$
                reevaled = 0
                writefilenumber:
                e$ = fixoperationorder$(e$)
                If Error_Happened Then Exit Sub
                If reevaled = 0 Then
                    l$ = l$ + sp + tlayout$
                    If last = 0 Then l$ = l$ + sp2 + ","
                End If
                e$ = evaluate(e$, typ)
                If Error_Happened Then Exit Sub
                If reevaled = 0 Then
                    If (typ And ISSTRING) = 0 Then
                        e$ = "LTRIM$" + sp + "(" + sp + "STR$" + sp + "(" + sp + ebak$ + sp + ")" + sp + ")"
                        If last = 0 Then e$ = e$ + sp + "+" + sp + Chr$(34) + "," + Chr$(34) + ",1"
                        reevaled = 1
                        GoTo writefilenumber 'force re-evaluation
                    Else
                        e$ = Chr$(34) + "\042" + Chr$(34) + ",1" + sp + "+" + sp + ebak$ + sp + "+" + sp + Chr$(34) + "\042" + Chr$(34) + ",1"
                        If last = 0 Then e$ = e$ + sp + "+" + sp + Chr$(34) + "," + Chr$(34) + ",1"
                        reevaled = 1
                        GoTo writefilenumber 'force re-evaluation
                    End If
                End If
                If (typ And ISREFERENCE) Then e$ = refer(e$, typ, 0)
                If Error_Happened Then Exit Sub
                'format: string, (1/0) extraspace, (1/0) tab, (1/0)begin a new line
                WriteBufLine MainTxtBuf, "sub_file_print(tmp_fileno," + e$ + ",0,0," + Str$(newline) + ");"
                WriteBufLine MainTxtBuf, "if (new_error) goto skip" + u$ + ";"
                e$ = ""
                If last Then Exit For
                GoTo writefilenext
            End If ',
        End If 'b=0
        If e$ <> "" Then e$ = e$ + sp + a2$ Else e$ = a2$
        writefilenext:
    Next
    If e$ <> "" Then a2$ = ",": last = 1: GoTo writefilelast
    writeblankline:
    'WriteBufLine MainTxtBuf, "}"'new_error
    WriteBufLine MainTxtBuf, "skip" + u$ + ":"
    WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
    WriteBufLine MainTxtBuf, "tab_spc_cr_size=1;"
    layoutdone = 1: If Len(layout$) Then layout$ = layout$ + sp + l$ Else layout$ = l$
End Sub

Sub xgosub (ca$)
    a2$ = getelement(ca$, 2)
    If validlabel(a2$) = 0 Then Give_Error "Invalid label": Exit Sub

    v = HashFind(a2$, HASHFLAG_LABEL, ignore, r)
    x = 1
    labchk200:
    If v Then
        s = Labels(r).Scope
        If s = subfuncn Or s = -1 Then 'same scope?
            If s = -1 Then Labels(r).Scope = subfuncn 'acquire scope
            x = 0 'already defined
            tlayout$ = RTrim$(Labels(r).cn)
        Else
            If v = 2 Then v = HashFindCont(ignore, r): GoTo labchk200
        End If
    End If
    If x Then
        'does not exist
        nLabels = nLabels + 1: If nLabels > Labels_Ubound Then Labels_Ubound = Labels_Ubound * 2: ReDim _Preserve Labels(1 To Labels_Ubound) As Label_Type
        Labels(nLabels) = Empty_Label
        HashAdd a2$, HASHFLAG_LABEL, nLabels
        r = nLabels
        Labels(r).State = 0
        Labels(r).cn = tlayout$
        Labels(r).Scope = subfuncn
        Labels(r).Error_Line = linenumber
    End If 'x

    l$ = SCase$("GoSub") + sp + tlayout$
    layoutdone = 1: If Len(layout$) Then layout$ = layout$ + sp + l$ Else layout$ = l$
    'note: This code fragment also used by ON ... GOTO/GOSUB
    'assume label is reachable (revise)
    WriteBufLine MainTxtBuf, "return_point[next_return_point++]=" + str2(gosubid) + ";"
    WriteBufLine MainTxtBuf, "if (next_return_point>=return_points) more_return_points();"
    WriteBufLine MainTxtBuf, "goto LABEL_" + a2$ + ";"
    'add return point jump
    WriteBufLine RetTxtBuf, "case " + str2(gosubid) + ":"
    WriteBufLine RetTxtBuf, "goto RETURN_" + str2(gosubid) + ";"
    WriteBufLine RetTxtBuf, "break;"
    WriteBufLine MainTxtBuf, "RETURN_" + str2(gosubid) + ":;"
    gosubid = gosubid + 1
End Sub

Sub xongotogosub (a$, ca$, n)
    If n < 4 Then Give_Error "Expected ON expression GOTO/GOSUB label,label,...": Exit Sub
    l$ = SCase$("On")
    b = 0
    For i = 2 To n
        e2$ = getelement$(a$, i)
        If e2$ = "(" Then b = b + 1
        If e2$ = ")" Then b = b - 1
        If e2$ = "GOTO" Or e2$ = "GOSUB" Then Exit For
    Next
    If i >= n Or i = 2 Then Give_Error "Expected ON expression GOTO/GOSUB label,label,...": Exit Sub
    e$ = getelements$(ca$, 2, i - 1)

    g = 0: If e2$ = "GOSUB" Then g = 1
    e$ = fixoperationorder(e$)
    If Error_Happened Then Exit Sub
    l$ = l$ + sp + tlayout$
    e$ = evaluate(e$, typ)
    If Error_Happened Then Exit Sub
    If (typ And ISREFERENCE) Then e$ = refer(e$, typ, 0)
    If Error_Happened Then Exit Sub
    If (typ And ISSTRING) Then Give_Error "Expected numeric expression": Exit Sub
    If (typ And ISFLOAT) Then
        e$ = "qbr_float_to_long(" + e$ + ")"
    End If
    l$ = l$ + sp + e2$
    u$ = str2$(uniquenumber)
    WriteBufLine DataTxtBuf, "static int32 ongo_" + u$ + "=0;"
    WriteBufLine MainTxtBuf, "ongo_" + u$ + "=" + e$ + ";"
    ln = 1
    labelwaslast = 0
    For i = i + 1 To n
        e$ = getelement$(ca$, i)
        If e$ = "," Then
            l$ = l$ + sp2 + ","
            If i = n Then Give_Error "Trailing , invalid": Exit Sub
            ln = ln + 1
            labelwaslast = 0
        Else
            If labelwaslast Then Give_Error "Expected ,": Exit Sub
            If validlabel(e$) = 0 Then Give_Error "Invalid label!": Exit Sub

            v = HashFind(e$, HASHFLAG_LABEL, ignore, r)
            x = 1
            labchk507:
            If v Then
                s = Labels(r).Scope
                If s = subfuncn Or s = -1 Then 'same scope?
                    If s = -1 Then Labels(r).Scope = subfuncn 'acquire scope
                    x = 0 'already defined
                    tlayout$ = RTrim$(Labels(r).cn)
                Else
                    If v = 2 Then v = HashFindCont(ignore, r): GoTo labchk507
                End If
            End If
            If x Then
                'does not exist
                nLabels = nLabels + 1: If nLabels > Labels_Ubound Then Labels_Ubound = Labels_Ubound * 2: ReDim _Preserve Labels(1 To Labels_Ubound) As Label_Type
                Labels(nLabels) = Empty_Label
                HashAdd e$, HASHFLAG_LABEL, nLabels
                r = nLabels
                Labels(r).State = 0
                Labels(r).cn = tlayout$
                Labels(r).Scope = subfuncn
                Labels(r).Error_Line = linenumber
            End If 'x

            l$ = l$ + sp + tlayout$
            If g Then 'gosub
                lb$ = e$
                WriteBufLine MainTxtBuf, "if (ongo_" + u$ + "==" + str2$(ln) + "){"
                'note: This code fragment also used by ON ... GOTO/GOSUB
                'assume label is reachable (revise)
                WriteBufLine MainTxtBuf, "return_point[next_return_point++]=" + str2(gosubid) + ";"
                WriteBufLine MainTxtBuf, "if (next_return_point>=return_points) more_return_points();"
                WriteBufLine MainTxtBuf, "goto LABEL_" + lb$ + ";"
                'add return point jump
                WriteBufLine RetTxtBuf, "case " + str2(gosubid) + ":"
                WriteBufLine RetTxtBuf, "goto RETURN_" + str2(gosubid) + ";"
                WriteBufLine RetTxtBuf, "break;"
                WriteBufLine MainTxtBuf, "RETURN_" + str2(gosubid) + ":;"
                gosubid = gosubid + 1
                WriteBufLine MainTxtBuf, "goto ongo_" + u$ + "_skip;"
                WriteBufLine MainTxtBuf, "}"
            Else 'goto
                WriteBufLine MainTxtBuf, "if (ongo_" + u$ + "==" + str2$(ln) + ") goto LABEL_" + e$ + ";"
            End If
            labelwaslast = 1
        End If
    Next
    WriteBufLine MainTxtBuf, "if (ongo_" + u$ + "<0) error(5);"
    If g = 1 Then WriteBufLine MainTxtBuf, "ongo_" + u$ + "_skip:;"
    layoutdone = 1: If Len(layout$) Then layout$ = layout$ + sp + l$ Else layout$ = l$
End Sub

Sub xprint (a$, ca$, n)
    u$ = str2$(uniquenumber)

    l$ = SCase$("Print")
    If Asc(a$) = 76 Then lp = 1: lp$ = "l": l$ = SCase$("LPrint"): WriteBufLine MainTxtBuf, "tab_LPRINT=1;": DEPENDENCY(DEPENDENCY_PRINTER) = 1 '"L"

    'PRINT USING?
    If n >= 2 Then
        If getelement(a$, 2) = "USING" Then
            'get format string
            i = 3
            pujump:
            l$ = l$ + sp + SCase$("Using")
            e$ = "": b = 0: puformat$ = ""
            For i = i To n
                a2$ = getelement(ca$, i)
                If a2$ = "(" Then b = b + 1
                If a2$ = ")" Then b = b - 1
                If b = 0 Then
                    If a2$ = "," Then Give_Error "Expected PRINT USING formatstring ; ...": Exit Sub
                    If a2$ = ";" Then
                        e$ = fixoperationorder$(e$)
                        If Error_Happened Then Exit Sub
                        l$ = l$ + sp + tlayout$ + sp2 + ";"
                        e$ = evaluate(e$, typ)
                        If Error_Happened Then Exit Sub
                        If (typ And ISREFERENCE) Then e$ = refer(e$, typ, 0)
                        If Error_Happened Then Exit Sub
                        If (typ And ISSTRING) = 0 Then Give_Error "Expected PRINT USING formatstring ; ...": Exit Sub
                        puformat$ = e$
                        Exit For
                    End If ';
                End If 'b
                If Len(e$) Then e$ = e$ + sp + a2$ Else e$ = a2$
            Next
            If puformat$ = "" Then Give_Error "Expected PRINT USING formatstring ; ...": Exit Sub
            If i = n Then Give_Error "Expected PRINT USING formatstring ; ...": Exit Sub
            'create build string
            If TQBSset = 0 Then
                WriteBufLine MainTxtBuf, "tqbs=qbs_new(0,0);"
            Else
                WriteBufLine MainTxtBuf, "qbs_set(tqbs,qbs_new_txt_len(" + Chr$(34) + Chr$(34) + ",0));"
            End If
            'set format start/index variable
            WriteBufLine MainTxtBuf, "tmp_long=0;" 'scan format from beginning


            'create string to hold format in for multiple references
            puf$ = "print_using_format" + u$
            If subfunc = "" Then
                WriteBufLine DataTxtBuf, "static qbs *" + puf$ + ";"
            Else
                WriteBufLine DataTxtBuf, "qbs *" + puf$ + ";"
            End If
            WriteBufLine MainTxtBuf, puf$ + "=qbs_new(0,0); qbs_set(" + puf$ + "," + puformat$ + ");"
            WriteBufLine MainTxtBuf, "if (new_error) goto skip_pu" + u$ + ";"

            'print expressions
            b = 0
            e$ = ""
            last = 0
            For i = i + 1 To n
                a2$ = getelement(ca$, i)
                If a2$ = "(" Then b = b + 1
                If a2$ = ")" Then b = b - 1
                If b = 0 Then
                    If a2$ = ";" Or a2$ = "," Then
                        printulast:
                        e$ = fixoperationorder$(e$)
                        If Error_Happened Then Exit Sub
                        If last Then l$ = l$ + sp + tlayout$ Else l$ = l$ + sp + tlayout$ + sp2 + a2$
                        e$ = evaluate(e$, typ)
                        If Error_Happened Then Exit Sub
                        If (typ And ISREFERENCE) Then e$ = refer(e$, typ, 0)
                        If Error_Happened Then Exit Sub
                        If typ And ISSTRING Then

                            If Left$(e$, 9) = "func_tab(" Or Left$(e$, 9) = "func_spc(" Then

                                'TAB/SPC exception
                                'note: position in format-string must be maintained
                                '-print any string up until now
                                WriteBufLine MainTxtBuf, "qbs_" + lp$ + "print(tqbs,0);"
                                '-print e$
                                WriteBufLine MainTxtBuf, "qbs_set(tqbs," + e$ + ");"
                                WriteBufLine MainTxtBuf, "if (new_error) goto skip_pu" + u$ + ";"
                                If lp Then WriteBufLine MainTxtBuf, "lprint_makefit(tqbs);" Else WriteBufLine MainTxtBuf, "makefit(tqbs);"
                                WriteBufLine MainTxtBuf, "qbs_" + lp$ + "print(tqbs,0);"
                                '-set length of tqbs to 0
                                WriteBufLine MainTxtBuf, "tqbs->len=0;"

                            Else

                                'regular string
                                WriteBufLine MainTxtBuf, "tmp_long=print_using(" + puf$ + ",tmp_long,tqbs," + e$ + ");"

                            End If



                        Else 'not a string
                            If typ And ISFLOAT Then
                                If (typ And 511) = 32 Then WriteBufLine MainTxtBuf, "tmp_long=print_using_single(" + puf$ + "," + e$ + ",tmp_long,tqbs);"
                                If (typ And 511) = 64 Then WriteBufLine MainTxtBuf, "tmp_long=print_using_double(" + puf$ + "," + e$ + ",tmp_long,tqbs);"
                                If (typ And 511) > 64 Then WriteBufLine MainTxtBuf, "tmp_long=print_using_float(" + puf$ + "," + e$ + ",tmp_long,tqbs);"
                            Else
                                If ((typ And 511) = 64) And (typ And ISUNSIGNED) <> 0 Then
                                    WriteBufLine MainTxtBuf, "tmp_long=print_using_uinteger64(" + puf$ + "," + e$ + ",tmp_long,tqbs);"
                                Else
                                    WriteBufLine MainTxtBuf, "tmp_long=print_using_integer64(" + puf$ + "," + e$ + ",tmp_long,tqbs);"
                                End If
                            End If
                        End If 'string/not string
                        WriteBufLine MainTxtBuf, "if (new_error) goto skip_pu" + u$ + ";"
                        e$ = ""
                        If last Then Exit For
                        GoTo printunext
                    End If
                End If
                If Len(e$) Then e$ = e$ + sp + a2$ Else e$ = a2$
                printunext:
            Next
            If e$ <> "" Then a2$ = "": last = 1: GoTo printulast
            WriteBufLine MainTxtBuf, "skip_pu" + u$ + ":"
            'check for errors
            WriteBufLine MainTxtBuf, "if (new_error){"
            WriteBufLine MainTxtBuf, "g_tmp_long=new_error; new_error=0; qbs_" + lp$ + "print(tqbs,0); new_error=g_tmp_long;"
            WriteBufLine MainTxtBuf, "}else{"
            If a2$ = "," Or a2$ = ";" Then nl = 0 Else nl = 1 'note: a2$ is set to the last element of a$
            WriteBufLine MainTxtBuf, "qbs_" + lp$ + "print(tqbs," + str2$(nl) + ");"
            WriteBufLine MainTxtBuf, "}"
            WriteBufLine MainTxtBuf, "qbs_free(tqbs);"
            WriteBufLine MainTxtBuf, "qbs_free(" + puf$ + ");"
            WriteBufLine MainTxtBuf, "skip" + u$ + ":"
            WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
            If lp Then WriteBufLine MainTxtBuf, "tab_LPRINT=0;"
            tlayout$ = l$
            Exit Sub
        End If
    End If
    'end of print using code

    b = 0
    e$ = ""
    last = 0
    WriteBufLine MainTxtBuf, "tqbs=qbs_new(0,0);" 'initialize the temp string
    TQBSset = -1 'set the temporary flag so we don't create a temp string twice, in case USING comes after something
    For i = 2 To n
        a2$ = getelement(ca$, i)
        If a2$ = "(" Then b = b + 1
        If a2$ = ")" Then b = b - 1
        If b = 0 Then
            If a2$ = ";" Or a2$ = "," Or UCase$(a2$) = "USING" Then
                printlast:

                If UCase$(a2$) = "USING" Then
                    If e$ <> "" Then gotopu = 1 Else i = i + 1: GoTo pujump
                End If

                If Len(e$) Then
                    ebak$ = e$
                    pnrtnum = 0
                    printnumber:
                    e$ = fixoperationorder$(e$)
                    If Error_Happened Then Exit Sub
                    If pnrtnum = 0 Then
                        If last Then l$ = l$ + sp + tlayout$ Else l$ = l$ + sp + tlayout$ + sp2 + a2$
                    End If
                    e$ = evaluate(e$, typ)
                    If Error_Happened Then Exit Sub
                    If (typ And ISSTRING) = 0 Then
                        'not a string expresion!
                        e$ = "STR$" + sp + "(" + sp + ebak$ + sp + ")" + sp + "+" + sp + Chr$(34) + " " + Chr$(34)
                        pnrtnum = 1
                        GoTo printnumber
                    End If
                    If (typ And ISREFERENCE) Then e$ = refer(e$, typ, 0)
                    If Error_Happened Then Exit Sub
                    WriteBufLine MainTxtBuf, "qbs_set(tqbs," + e$ + ");"
                    WriteBufLine MainTxtBuf, "if (new_error) goto skip" + u$ + ";"
                    If lp Then WriteBufLine MainTxtBuf, "lprint_makefit(tqbs);" Else WriteBufLine MainTxtBuf, "makefit(tqbs);"
                    WriteBufLine MainTxtBuf, "qbs_" + lp$ + "print(tqbs,0);"
                Else
                    If a2$ = "," Then l$ = l$ + sp + a2$
                    If a2$ = ";" Then
                        If Right$(l$, 1) <> ";" Then l$ = l$ + sp + a2$ 'concat ;; to ;
                    End If
                End If 'len(e$)
                If a2$ = "," Then WriteBufLine MainTxtBuf, "tab();"
                e$ = ""

                If gotopu Then i = i + 1: GoTo pujump

                If last Then
                    WriteBufLine MainTxtBuf, "qbs_" + lp$ + "print(nothingstring,1);" 'go to new line
                    Exit For
                End If

                GoTo printnext
            End If 'a2$
        End If 'b=0

        If Len(e$) Then e$ = e$ + sp + a2$ Else e$ = a2$
        printnext:
    Next
    If Len(e$) Then a2$ = "": last = 1: GoTo printlast
    If n = 1 Then WriteBufLine MainTxtBuf, "qbs_" + lp$ + "print(nothingstring,1);"
    WriteBufLine MainTxtBuf, "skip" + u$ + ":"
    WriteBufLine MainTxtBuf, "qbs_free(tqbs);"
    WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
    If lp Then WriteBufLine MainTxtBuf, "tab_LPRINT=0;"
    tlayout$ = l$
End Sub




Sub xread (ca$, n)
    l$ = SCase$("Read")
    If n = 1 Then Give_Error "Expected variable": Exit Sub
    i = 2
    If i > n Then Give_Error "Expected , ...": Exit Sub
    a3$ = ""
    b = 0
    For i = i To n
        a2$ = getelement$(ca$, i)
        If a2$ = "(" Then b = b + 1
        If a2$ = ")" Then b = b - 1
        If (a2$ = "," And b = 0) Or i = n Then
            If i = n Then
                If a3$ = "" Then a3$ = a2$ Else a3$ = a3$ + sp + a2$
            End If
            If a3$ = "" Then Give_Error "Expected , ...": Exit Sub
            e$ = fixoperationorder$(a3$)
            If Error_Happened Then Exit Sub
            l$ = l$ + sp + tlayout$: If i <> n Then l$ = l$ + sp2 + ","
            e$ = evaluate(e$, t)
            If Error_Happened Then Exit Sub
            If (t And ISREFERENCE) = 0 Then Give_Error "Expected variable": Exit Sub

            If (t And ISSTRING) Then
                e$ = refer(e$, t, 0)
                If Error_Happened Then Exit Sub
                WriteBufLine MainTxtBuf, "sub_read_string(data,&data_offset,data_size," + e$ + ");"
                stringprocessinghappened = 1
            Else
                'numeric variable
                If (t And ISFLOAT) <> 0 Or (t And 511) <> 64 Then
                    If (t And ISOFFSETINBITS) Then
                        setrefer e$, t, "((int64)func_read_float(data,&data_offset,data_size," + str2(t) + "))", 1
                        If Error_Happened Then Exit Sub
                    Else
                        setrefer e$, t, "func_read_float(data,&data_offset,data_size," + str2(t) + ")", 1
                        If Error_Happened Then Exit Sub
                    End If
                Else
                    If t And ISUNSIGNED Then
                        setrefer e$, t, "func_read_uint64(data,&data_offset,data_size)", 1
                        If Error_Happened Then Exit Sub
                    Else
                        setrefer e$, t, "func_read_int64(data,&data_offset,data_size)", 1
                        If Error_Happened Then Exit Sub
                    End If
                End If
            End If 'string/numeric
            If i = n Then Exit For
            a3$ = "": a2$ = ""
        End If
        If a3$ = "" Then a3$ = a2$ Else a3$ = a3$ + sp + a2$
    Next
    If stringprocessinghappened Then WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
    layoutdone = 1: If Len(layout$) Then layout$ = layout$ + sp + l$ Else layout$ = l$
End Sub

Sub xwrite (ca$, n)
    l$ = SCase$("Write")
    u$ = str2$(uniquenumber)
    If n = 1 Then
        WriteBufLine MainTxtBuf, "qbs_print(nothingstring,1);"
        GoTo writeblankline2
    End If
    b = 0
    e$ = ""
    last = 0
    For i = 2 To n
        a2$ = getelement(ca$, i)
        If a2$ = "(" Then b = b + 1
        If a2$ = ")" Then b = b - 1
        If b = 0 Then
            If a2$ = "," Then
                writelast:
                If last = 1 Then newline = 1 Else newline = 0
                ebak$ = e$
                reevaled = 0
                writechecked:
                e$ = fixoperationorder$(e$)
                If Error_Happened Then Exit Sub
                If reevaled = 0 Then
                    l$ = l$ + sp + tlayout$
                    If last = 0 Then l$ = l$ + sp2 + ","
                End If
                e$ = evaluate(e$, typ)
                If Error_Happened Then Exit Sub
                If reevaled = 0 Then
                    If (typ And ISSTRING) = 0 Then
                        e$ = "LTRIM$" + sp + "(" + sp + "STR$" + sp + "(" + sp + ebak$ + sp + ")" + sp + ")"
                        If last = 0 Then e$ = e$ + sp + "+" + sp + Chr$(34) + "," + Chr$(34) + ",1"
                        reevaled = 1
                        GoTo writechecked 'force re-evaluation
                    Else
                        e$ = Chr$(34) + "\042" + Chr$(34) + ",1" + sp + "+" + sp + ebak$ + sp + "+" + sp + Chr$(34) + "\042" + Chr$(34) + ",1"
                        If last = 0 Then e$ = e$ + sp + "+" + sp + Chr$(34) + "," + Chr$(34) + ",1"
                        reevaled = 1
                        GoTo writechecked 'force re-evaluation
                    End If
                End If
                If (typ And ISREFERENCE) Then e$ = refer(e$, typ, 0)
                If Error_Happened Then Exit Sub
                'format: string, (1/0) extraspace, (1/0) tab, (1/0)begin a new line
                WriteBufLine MainTxtBuf, "qbs_print(" + e$ + "," + Str$(newline) + ");"
                WriteBufLine MainTxtBuf, "if (new_error) goto skip" + u$ + ";"
                e$ = ""
                If last Then Exit For
                GoTo writenext
            End If ',
        End If 'b=0
        If e$ <> "" Then e$ = e$ + sp + a2$ Else e$ = a2$
        writenext:
    Next
    If e$ <> "" Then a2$ = ",": last = 1: GoTo writelast
    writeblankline2:
    WriteBufLine MainTxtBuf, "skip" + u$ + ":"
    WriteBufLine MainTxtBuf, cleanupstringprocessingcall$ + "0);"
    layoutdone = 1: If Len(layout$) Then layout$ = layout$ + sp + l$ Else layout$ = l$
End Sub

Function evaluateconst$ (a2$, t As Long)
    a$ = a2$
    If Debug Then Print #9, "evaluateconst:in:" + a$


    Dim block(1000) As String
    Dim status(1000) As Integer
    '0=unprocessed (can be "")
    '1=processed
    Dim btype(1000) As Long 'for status=1 blocks

    'put a$ into blocks
    n = numelements(a$)
    For i = 1 To n
        block(i) = getelement$(a$, i)
    Next

    evalconstevalbrack:

    'find highest bracket level
    l = 0
    b = 0
    For i = 1 To n
        If block(i) = "(" Then b = b + 1
        If block(i) = ")" Then b = b - 1
        If b > l Then l = b
    Next

    'if brackets exist, evaluate that item first
    If l Then

        b = 0
        e$ = ""
        For i = 1 To n

            If block(i) = ")" Then
                If b = l Then block(i) = "": Exit For
                b = b - 1
            End If

            If b >= l Then
                If Len(e$) = 0 Then e$ = block(i) Else e$ = e$ + sp + block(i)
                block(i) = ""
            End If

            If block(i) = "(" Then
                b = b + 1
                If b = l Then i2 = i: block(i) = ""
            End If

        Next i

        status(i) = 1
        block(i) = evaluateconst$(e$, btype(i))
        If Error_Happened Then Exit Function
        GoTo evalconstevalbrack

    End If 'l

    'linear equation remains with some pre-calculated & non-pre-calc blocks

    'problem: type QBASIC assumes and type required to store calc. value may
    '         differ dramatically. in qbasic, this would have caused an overflow,
    '         but in qb64 it MUST work. eg. 32767% * 32767%
    'solution: all interger calc. will be performed using a signed _INTEGER64
    '          all float calc. will be performed using a _FLOAT

    'convert non-calc block numbers into binary form with QBASIC-like type
    For i = 1 To n
        If status(i) = 0 Then
            If Len(block(i)) Then

                a = Asc(block(i))
                If (a = 45 And Len(block(i)) > 1) Or (a >= 48 And a <= 57) Then 'number?

                    'integers
                    e$ = Right$(block(i), 3)
                    If e$ = "~&&" Then btype(i) = UINTEGER64TYPE - ISPOINTER: GoTo gotconstblkityp
                    If e$ = "~%%" Then btype(i) = UBYTETYPE - ISPOINTER: GoTo gotconstblkityp
                    e$ = Right$(block(i), 2)
                    If e$ = "&&" Then btype(i) = INTEGER64TYPE - ISPOINTER: GoTo gotconstblkityp
                    If e$ = "%%" Then btype(i) = BYTETYPE - ISPOINTER: GoTo gotconstblkityp
                    If e$ = "~%" Then btype(i) = UINTEGERTYPE - ISPOINTER: GoTo gotconstblkityp
                    If e$ = "~&" Then btype(i) = ULONGTYPE - ISPOINTER: GoTo gotconstblkityp
                    e$ = Right$(block(i), 1)
                    If e$ = "%" Then btype(i) = INTEGERTYPE - ISPOINTER: GoTo gotconstblkityp
                    If e$ = "&" Then btype(i) = LONGTYPE - ISPOINTER: GoTo gotconstblkityp

                    'ubit-type?
                    If InStr(block(i), "~`") Then
                        x = InStr(block(i), "~`")
                        If x = Len(block(i)) - 1 Then block(i) = block(i) + "1"
                        btype(i) = UBITTYPE - ISPOINTER - 1 + Val(Right$(block(i), Len(block(i)) - x - 1))
                        block(i) = _MK$(_Integer64, Val(Left$(block(i), x - 1)))
                        status(i) = 1
                        GoTo gotconstblktyp
                    End If

                    'bit-type?
                    If InStr(block(i), "`") Then
                        x = InStr(block(i), "`")
                        If x = Len(block(i)) Then block(i) = block(i) + "1"
                        btype(i) = BITTYPE - ISPOINTER - 1 + Val(Right$(block(i), Len(block(i)) - x))
                        block(i) = _MK$(_Integer64, Val(Left$(block(i), x - 1)))
                        status(i) = 1
                        GoTo gotconstblktyp
                    End If

                    'floats
                    If InStr(block(i), "E") Then
                        block(i) = _MK$(_Float, Val(block(i)))
                        btype(i) = SINGLETYPE - ISPOINTER
                        status(i) = 1
                        GoTo gotconstblktyp
                    End If
                    If InStr(block(i), "D") Then
                        block(i) = _MK$(_Float, Val(block(i)))
                        btype(i) = DOUBLETYPE - ISPOINTER
                        status(i) = 1
                        GoTo gotconstblktyp
                    End If
                    If InStr(block(i), "F") Then
                        block(i) = _MK$(_Float, Val(block(i)))
                        btype(i) = FLOATTYPE - ISPOINTER
                        status(i) = 1
                        GoTo gotconstblktyp
                    End If

                    Give_Error "Invalid CONST expression.1": Exit Function

                    gotconstblkityp:
                    block(i) = Left$(block(i), Len(block(i)) - Len(e$))
                    block(i) = _MK$(_Integer64, Val(block(i)))
                    status(i) = 1
                    gotconstblktyp:

                End If 'a

                If a = 34 Then 'string?
                    'no changes need to be made to block(i) which is of format "CHARACTERS",size
                    btype(i) = STRINGTYPE - ISPOINTER
                    status(i) = 1
                End If

            End If 'len<>0
        End If 'status
    Next

    'remove NULL blocks
    n2 = 0
    For i = 1 To n
        If block(i) <> "" Then
            n2 = n2 + 1
            block(n2) = block(i)
            status(n2) = status(i)
            btype(n2) = btype(i)
        End If
    Next
    n = n2

    'only one block?
    If n = 1 Then
        If status(1) = 0 Then Give_Error "Invalid CONST expression.2": Exit Function
        t = btype(1)
        evaluateconst$ = block(1)
        Exit Function
    End If 'n=1

    'evaluate equation (equation cannot contain any STRINGs)

    '[negation/not][variable]
    e$ = block(1)
    If status(1) = 0 Then
        If n <> 2 Then Give_Error "Invalid CONST expression.4": Exit Function
        If status(2) = 0 Then Give_Error "Invalid CONST expression.5": Exit Function
        If btype(2) And ISSTRING Then Give_Error "Invalid CONST expression.6": Exit Function
        o$ = block(1)

        If o$ = Chr$(241) Then
            If btype(2) And ISFLOAT Then
                r## = -_CV(_Float, block(2))
                evaluateconst$ = _MK$(_Float, r##)
            Else
                r&& = -_CV(_Integer64, block(2))
                evaluateconst$ = _MK$(_Integer64, r&&)
            End If
            t = btype(2)
            Exit Function
        End If

        If UCase$(o$) = "NOT" Then
            If btype(2) And ISFLOAT Then
                r&& = _CV(_Float, block(2))
            Else
                r&& = _CV(_Integer64, block(2))
            End If
            r&& = Not r&&
            t = btype(2)
            If t And ISFLOAT Then t = LONGTYPE - ISPOINTER 'markdown to LONG
            evaluateconst$ = _MK$(_Integer64, r&&)
            Exit Function
        End If

        Give_Error "Invalid CONST expression.7": Exit Function
    End If

    '[variable][bool-operator][variable]...

    'get first variable
    et = btype(1)
    ev$ = block(1)

    i = 2

    evalconstequ:

    'get operator
    If i >= n Then Give_Error "Invalid CONST expression.8": Exit Function
    o$ = UCase$(block(i))
    i = i + 1
    If isoperator(o$) = 0 Then Give_Error "Invalid CONST expression.9": Exit Function
    If i > n Then Give_Error "Invalid CONST expression.10": Exit Function

    'string/numeric mismatch?
    If (btype(i) And ISSTRING) <> (et And ISSTRING) Then Give_Error "Invalid CONST expression.11": Exit Function

    ' The left and right operands needs to have valid types. They might not if
    ' the user wrote something invalid like `1 OR OR 2`
    If et = 0 Then Give_Error "Invalid CONST expression.14": Exit Function
    If btype(i) = 0 Then Give_Error "Invalid CONST expression.15": Exit Function

    If et And ISSTRING Then
        If o$ <> "+" Then Give_Error "Invalid CONST expression.12": Exit Function
        'concat strings
        s1$ = Right$(ev$, Len(ev$) - 1)
        s1$ = Left$(s1$, InStr(s1$, Chr$(34)) - 1)
        s1size = Val(Right$(ev$, Len(ev$) - Len(s1$) - 3))
        s2$ = Right$(block(i), Len(block(i)) - 1)
        s2$ = Left$(s2$, InStr(s2$, Chr$(34)) - 1)
        s2size = Val(Right$(block(i), Len(block(i)) - Len(s2$) - 3))
        ev$ = Chr$(34) + s1$ + s2$ + Chr$(34) + "," + str2$(s1size + s2size)
        GoTo econstmarkedup
    End If

    'prepare left and right values
    If et And ISFLOAT Then
        linteger = 0
        l## = _CV(_Float, ev$)
        l&& = l##
    Else
        linteger = 1
        l&& = _CV(_Integer64, ev$)
        l## = l&&
    End If
    If btype(i) And ISFLOAT Then
        rinteger = 0
        r## = _CV(_Float, block(i))
        r&& = r##
    Else
        rinteger = 1
        r&& = _CV(_Integer64, block(i))
        r## = r&&
    End If

    If linteger = 1 And rinteger = 1 Then
        If o$ = "+" Then r&& = l&& + r&&: GoTo econstmarkupi
        If o$ = "-" Then r&& = l&& - r&&: GoTo econstmarkupi
        If o$ = "*" Then r&& = l&& * r&&: GoTo econstmarkupi
        If o$ = "^" Then r## = l&& ^ r&&: GoTo econstmarkupf
        If o$ = "/" Then r## = l&& / r&&: GoTo econstmarkupf
        If o$ = "\" Then r&& = l&& \ r&&: GoTo econstmarkupi
        If o$ = "MOD" Then r&& = l&& Mod r&&: GoTo econstmarkupi
        If o$ = "=" Then r&& = l&& = r&&: GoTo econstmarkupi16
        If o$ = ">" Then r&& = l&& > r&&: GoTo econstmarkupi16
        If o$ = "<" Then r&& = l&& < r&&: GoTo econstmarkupi16
        If o$ = ">=" Then r&& = l&& >= r&&: GoTo econstmarkupi16
        If o$ = "<=" Then r&& = l&& <= r&&: GoTo econstmarkupi16
        If o$ = "<>" Then r&& = l&& <> r&&: GoTo econstmarkupi16
        If o$ = "IMP" Then r&& = l&& Imp r&&: GoTo econstmarkupi
        If o$ = "EQV" Then r&& = l&& Eqv r&&: GoTo econstmarkupi
        If o$ = "XOR" Then r&& = l&& Xor r&&: GoTo econstmarkupi
        If o$ = "OR" Then r&& = l&& Or r&&: GoTo econstmarkupi
        If o$ = "AND" Then r&& = l&& And r&&: GoTo econstmarkupi
    End If

    If o$ = "+" Then r## = l## + r##: GoTo econstmarkupf
    If o$ = "-" Then r## = l## - r##: GoTo econstmarkupf
    If o$ = "*" Then r## = l## * r##: GoTo econstmarkupf
    If o$ = "^" Then r## = l## ^ r##: GoTo econstmarkupf
    If o$ = "/" Then r## = l## / r##: GoTo econstmarkupf
    If o$ = "\" Then r&& = l## \ r##: GoTo econstmarkupi32
    If o$ = "MOD" Then r&& = l## Mod r##: GoTo econstmarkupi32
    If o$ = "=" Then r&& = l## = r##: GoTo econstmarkupi16
    If o$ = ">" Then r&& = l## > r##: GoTo econstmarkupi16
    If o$ = "<" Then r&& = l## < r##: GoTo econstmarkupi16
    If o$ = ">=" Then r&& = l## >= r##: GoTo econstmarkupi16
    If o$ = "<=" Then r&& = l## <= r##: GoTo econstmarkupi16
    If o$ = "<>" Then r&& = l## <> r##: GoTo econstmarkupi16
    If o$ = "IMP" Then r&& = l## Imp r##: GoTo econstmarkupi32
    If o$ = "EQV" Then r&& = l## Eqv r##: GoTo econstmarkupi32
    If o$ = "XOR" Then r&& = l## Xor r##: GoTo econstmarkupi32
    If o$ = "OR" Then r&& = l## Or r##: GoTo econstmarkupi32
    If o$ = "AND" Then r&& = l## And r##: GoTo econstmarkupi32

    Give_Error "Invalid CONST expression.13": Exit Function

    econstmarkupi16:
    et = INTEGERTYPE - ISPOINTER
    ev$ = _MK$(_Integer64, r&&)
    GoTo econstmarkedup

    econstmarkupi32:
    et = LONGTYPE - ISPOINTER
    ev$ = _MK$(_Integer64, r&&)
    GoTo econstmarkedup

    econstmarkupi:
    If et <> btype(i) Then
        'keep unsigned?
        u = 0: If (et And ISUNSIGNED) <> 0 And (btype(i) And ISUNSIGNED) <> 0 Then u = 1
        lb = et And 511: rb = btype(i) And 511
        ob = 0
        If lb = rb Then
            If (et And ISOFFSETINBITS) <> 0 And (btype(i) And ISOFFSETINBITS) <> 0 Then ob = 1
            b = lb
        End If
        If lb > rb Then
            If (et And ISOFFSETINBITS) <> 0 Then ob = 1
            b = lb
        End If
        If lb < rb Then
            If (btype(i) And ISOFFSETINBITS) <> 0 Then ob = 1
            b = rb
        End If
        et = b
        If ob Then et = et + ISOFFSETINBITS
        If u Then et = et + ISUNSIGNED
    End If
    ev$ = _MK$(_Integer64, r&&)
    GoTo econstmarkedup

    econstmarkupf:
    lfb = 0: rfb = 0
    lib = 0: rib = 0
    If et And ISFLOAT Then lfb = et And 511 Else lib = et And 511
    If btype(i) And ISFLOAT Then rfb = btype(i) And 511 Else rib = btype(i) And 511
    f = 32
    If lib > 16 Or rib > 16 Then f = 64
    If lfb > 32 Or rfb > 32 Then f = 64
    If lib > 32 Or rib > 32 Then f = 256
    If lfb > 64 Or rfb > 64 Then f = 256
    et = ISFLOAT + f
    ev$ = _MK$(_Float, r##)

    econstmarkedup:

    i = i + 1

    If i <= n Then GoTo evalconstequ

    t = et
    evaluateconst$ = ev$

End Function

Function typevalue2symbol$ (t)

    If t And ISSTRING Then
        If t And ISFIXEDLENGTH Then Give_Error "Cannot convert expression type to symbol": Exit Function
        typevalue2symbol$ = "$"
        Exit Function
    End If

    s$ = ""

    If t And ISUNSIGNED Then s$ = "~"

    b = t And 511

    If t And ISOFFSETINBITS Then
        If b > 1 Then s$ = s$ + "`" + str2$(b) Else s$ = s$ + "`"
        typevalue2symbol$ = s$
        Exit Function
    End If

    If t And ISFLOAT Then
        If b = 32 Then s$ = "!"
        If b = 64 Then s$ = "#"
        If b = 256 Then s$ = "##"
        typevalue2symbol$ = s$
        Exit Function
    End If

    If b = 8 Then s$ = s$ + "%%"
    If b = 16 Then s$ = s$ + "%"
    If b = 32 Then s$ = s$ + "&"
    If b = 64 Then s$ = s$ + "&&"
    typevalue2symbol$ = s$

End Function


Function id2fulltypename$
    t = id.t
    If t = 0 Then t = id.arraytype
    size = id.tsize
    bits = t And 511
    If t And ISUDT Then
        a$ = RTrim$(udtxcname(t And 511))
        id2fulltypename$ = a$: Exit Function
    End If
    If t And ISSTRING Then
        If t And ISFIXEDLENGTH Then a$ = "STRING * " + str2(size) Else a$ = "STRING"
        id2fulltypename$ = a$: Exit Function
    End If
    If t And ISOFFSETINBITS Then
        If bits > 1 Then a$ = qb64prefix$ + "BIT * " + str2(bits) Else a$ = qb64prefix$ + "BIT"
        If t And ISUNSIGNED Then a$ = qb64prefix$ + "UNSIGNED " + a$
        id2fulltypename$ = a$: Exit Function
    End If
    If t And ISFLOAT Then
        If bits = 32 Then a$ = "SINGLE"
        If bits = 64 Then a$ = "DOUBLE"
        If bits = 256 Then a$ = qb64prefix$ + "FLOAT"
    Else 'integer-based
        If bits = 8 Then a$ = qb64prefix$ + "BYTE"
        If bits = 16 Then a$ = "INTEGER"
        If bits = 32 Then a$ = "LONG"
        If bits = 64 Then a$ = qb64prefix$ + "INTEGER64"
        If t And ISUNSIGNED Then a$ = qb64prefix$ + "UNSIGNED " + a$
    End If
    If t And ISOFFSET Then
        a$ = qb64prefix$ + "OFFSET"
        If t And ISUNSIGNED Then a$ = qb64prefix$ + "UNSIGNED " + a$
    End If
    id2fulltypename$ = a$
End Function

Function id2shorttypename$
    t = id.t
    If t = 0 Then t = id.arraytype
    size = id.tsize
    bits = t And 511
    If t And ISUDT Then
        a$ = RTrim$(udtxcname(t And 511))
        id2shorttypename$ = a$: Exit Function
    End If
    If t And ISSTRING Then
        If t And ISFIXEDLENGTH Then a$ = "STRING" + str2(size) Else a$ = "STRING"
        id2shorttypename$ = a$: Exit Function
    End If
    If t And ISOFFSETINBITS Then
        If t And ISUNSIGNED Then a$ = "_U" Else a$ = "_"
        If bits > 1 Then a$ = a$ + "BIT" + str2(bits) Else a$ = a$ + "BIT1"
        id2shorttypename$ = a$: Exit Function
    End If
    If t And ISFLOAT Then
        If bits = 32 Then a$ = "SINGLE"
        If bits = 64 Then a$ = "DOUBLE"
        If bits = 256 Then a$ = "_FLOAT"
    Else 'integer-based
        If bits = 8 Then
            If (t And ISUNSIGNED) Then a$ = "_UBYTE" Else a$ = "_BYTE"
        End If
        If bits = 16 Then
            If (t And ISUNSIGNED) Then a$ = "UINTEGER" Else a$ = "INTEGER"
        End If
        If bits = 32 Then
            If (t And ISUNSIGNED) Then a$ = "ULONG" Else a$ = "LONG"
        End If
        If bits = 64 Then
            If (t And ISUNSIGNED) Then a$ = "_UINTEGER64" Else a$ = "_INTEGER64"
        End If
    End If
    id2shorttypename$ = a$
End Function

Function symbol2fulltypename$ (s2$)
    'note: accepts both symbols and type names
    s$ = s2$

    If Left$(s$, 1) = "~" Then
        u = 1
        If Len(typ$) = 1 Then Give_Error "Expected ~...": Exit Function
        s$ = Right$(s$, Len(s$) - 1)
        u$ = qb64prefix$ + "UNSIGNED "
    End If

    If s$ = "%%" Then t$ = u$ + qb64prefix$ + "BYTE": GoTo gotsym2typ
    If s$ = "%" Then t$ = u$ + "INTEGER": GoTo gotsym2typ
    If s$ = "&" Then t$ = u$ + "LONG": GoTo gotsym2typ
    If s$ = "&&" Then t$ = u$ + qb64prefix$ + "INTEGER64": GoTo gotsym2typ
    If s$ = "%&" Then t$ = u$ + qb64prefix$ + "OFFSET": GoTo gotsym2typ

    If Left$(s$, 1) = "`" Then
        If Len(s$) = 1 Then
            t$ = u$ + qb64prefix$ + "BIT * 1"
            GoTo gotsym2typ
        End If
        n$ = Right$(s$, Len(s$) - 1)
        If isuinteger(n$) = 0 Then Give_Error "Expected number after symbol `": Exit Function
        t$ = u$ + qb64prefix$ + "BIT * " + n$
        GoTo gotsym2typ
    End If

    If u = 1 Then Give_Error "Expected type symbol after ~": Exit Function

    If s$ = "!" Then t$ = "SINGLE": GoTo gotsym2typ
    If s$ = "#" Then t$ = "DOUBLE": GoTo gotsym2typ
    If s$ = "##" Then t$ = qb64prefix$ + "FLOAT": GoTo gotsym2typ
    If s$ = "$" Then t$ = "STRING": GoTo gotsym2typ

    If Left$(s$, 1) = "$" Then
        n$ = Right$(s$, Len(s$) - 1)
        If isuinteger(n$) = 0 Then Give_Error "Expected number after symbol $": Exit Function
        t$ = "STRING * " + n$
        GoTo gotsym2typ
    End If

    t$ = s$

    gotsym2typ:

    If Right$(" " + t$, 5) = " _BIT" Then t$ = t$ + " * 1" 'clarify (_UNSIGNED) _BIT as (_UNSIGNED) _BIT * 1

    For i = 1 To Len(t$)
        If Asc(t$, i) = Asc(sp) Then Asc(t$, i) = 32
    Next

    symbol2fulltypename$ = t$

End Function

Sub lineinput3load (f$)
    Open f$ For Binary As #1
    l = LOF(1)
    lineinput3buffer$ = Space$(l)
    Get #1, , lineinput3buffer$
    If Len(lineinput3buffer$) Then If Right$(lineinput3buffer$, 1) = Chr$(26) Then lineinput3buffer$ = Left$(lineinput3buffer$, Len(lineinput3buffer$) - 1)
    Close #1
    lineinput3index = 1
End Sub

Function lineinput3$
    'returns CHR$(13) if no more lines are available
    l = Len(lineinput3buffer$)
    If lineinput3index > l Then lineinput3$ = Chr$(13): Exit Function
    c13 = InStr(lineinput3index, lineinput3buffer$, Chr$(13))
    c10 = InStr(lineinput3index, lineinput3buffer$, Chr$(10))
    If c10 = 0 And c13 = 0 Then
        lineinput3$ = Mid$(lineinput3buffer$, lineinput3index, l - lineinput3index + 1)
        lineinput3index = l + 1
        Exit Function
    End If
    If c10 = 0 Then c10 = 2147483647
    If c13 = 0 Then c13 = 2147483647
    If c10 < c13 Then
        '10 before 13
        lineinput3$ = Mid$(lineinput3buffer$, lineinput3index, c10 - lineinput3index)
        lineinput3index = c10 + 1
        If lineinput3index <= l Then
            If Asc(Mid$(lineinput3buffer$, lineinput3index, 1)) = 13 Then lineinput3index = lineinput3index + 1
        End If
    Else
        '13 before 10
        lineinput3$ = Mid$(lineinput3buffer$, lineinput3index, c13 - lineinput3index)
        lineinput3index = c13 + 1
        If lineinput3index <= l Then
            If Asc(Mid$(lineinput3buffer$, lineinput3index, 1)) = 10 Then lineinput3index = lineinput3index + 1
        End If
    End If
End Function

Function eleucase$ (a$)
    'this function upper-cases all elements except for quoted strings
    'check first element
    If Len(a$) = 0 Then Exit Function
    i = 1
    If Asc(a$) = 34 Then
        i2 = InStr(a$, sp)
        If i2 = 0 Then eleucase$ = a$: Exit Function
        a2$ = Left$(a$, i2 - 1)
        i = i2
    End If
    'check other elements
    sp34$ = sp + Chr$(34)
    If i < Len(a$) Then
        Do While InStr(i, a$, sp34$)
            i2 = InStr(i, a$, sp34$)
            a2$ = a2$ + UCase$(Mid$(a$, i, i2 - i + 1)) 'everything prior including spacer
            i3 = InStr(i2 + 1, a$, sp): If i3 = 0 Then i3 = Len(a$) Else i3 = i3 - 1
            a2$ = a2$ + Mid$(a$, i2 + 1, i3 - (i2 + 1) + 1) 'everything from " to before next spacer or end
            i = i3 + 1
            If i > Len(a$) Then Exit Do
        Loop
    End If
    a2$ = a2$ + UCase$(Mid$(a$, i, Len(a$) - i + 1))
    eleucase$ = a2$
End Function


Sub SetDependency (requirement)
    If requirement Then
        DEPENDENCY(requirement) = 1
    End If
End Sub

'Steve Subs/Functins for _MATH support with CONST
Function Evaluate_Expression$ (e$)
    t$ = e$ 'So we preserve our original data, we parse a temp copy of it
    PreParse t$


    If Left$(t$, 5) = "ERROR" Then Evaluate_Expression$ = t$: Exit Function

    'Deal with brackets first
    exp$ = "(" + t$ + ")" 'Starting and finishing brackets for our parse routine.

    Do
        Eval_E = InStr(exp$, ")")
        If Eval_E > 0 Then
            c = 0
            Do Until Eval_E - c <= 0
                c = c + 1
                If Eval_E Then
                    If Mid$(exp$, Eval_E - c, 1) = "(" Then Exit Do
                End If
            Loop
            s = Eval_E - c + 1
            If s < 1 Then Evaluate_Expression$ = "ERROR -- BAD () Count": Exit Function
            eval$ = " " + Mid$(exp$, s, Eval_E - s) + " " 'pad with a space before and after so the parser can pick up the values properly.

            ParseExpression eval$
            eval$ = LTrim$(RTrim$(eval$))
            If Left$(eval$, 5) = "ERROR" Then Evaluate_Expression$ = eval$: Exit Function
            exp$ = DWD(Left$(exp$, s - 2) + eval$ + Mid$(exp$, Eval_E + 1))
            If Mid$(exp$, 1, 1) = "N" Then Mid$(exp$, 1) = "-"
        End If
    Loop Until Eval_E = 0
    c = 0
    Do
        c = c + 1
        Select Case Mid$(exp$, c, 1)
            Case "0" To "9", ".", "-" 'At this point, we should only have number values left.
            Case Else: Evaluate_Expression$ = "ERROR - Unknown Diagnosis: (" + exp$ + ") ": Exit Function
        End Select
    Loop Until c >= Len(exp$)

    Evaluate_Expression$ = exp$
End Function



Sub ParseExpression (exp$)
    Dim num(10) As String
    'PRINT exp$
    exp$ = DWD(exp$)
    'We should now have an expression with no () to deal with

    For J = 1 To 250
        lowest = 0
        Do Until lowest = Len(exp$)
            lowest = Len(exp$): OpOn = 0
            For P = 1 To UBound(OName)
                'Look for first valid operator
                If J = PL(P) Then 'Priority levels match
                    If Left$(exp$, 1) = "-" Then startAt = 2 Else startAt = 1
                    op = InStr(startAt, exp$, OName(P))
                    If op = 0 And Left$(OName(P), 1) = "_" And qb64prefix_set = 1 Then
                        'try again without prefix
                        op = InStr(startAt, exp$, Mid$(OName(P), 2))
                        If op > 0 Then
                            exp$ = Left$(exp$, op - 1) + "_" + Mid$(exp$, op)
                            lowest = lowest + 1
                        End If
                    End If
                    If op > 0 And op < lowest Then lowest = op: OpOn = P
                End If
            Next
            If OpOn = 0 Then Exit Do 'We haven't gotten to the proper PL for this OP to be processed yet.
            If Left$(exp$, 1) = "-" Then startAt = 2 Else startAt = 1
            op = InStr(startAt, exp$, OName(OpOn))

            numset = 0

            '*** SPECIAL OPERATION RULESETS
            If OName(OpOn) = "-" Then 'check for BOOLEAN operators before the -
                Select Case Mid$(exp$, op - 3, 3)
                    Case "NOT", "XOR", "AND", "EQV", "IMP"
                        Exit Do 'Not an operator, it's a negative
                End Select
                If Mid$(exp$, op - 3, 2) = "OR" Then Exit Do 'Not an operator, it's a negative
            End If

            If op Then
                c = Len(OName(OpOn)) - 1
                Do
                    Select Case Mid$(exp$, op + c + 1, 1)
                        Case "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "N": numset = -1 'Valid digit
                        Case "-" 'We need to check if it's a minus or a negative
                            If OName(OpOn) = "_PI" Or numset Then Exit Do
                        Case ",": numset = 0
                        Case Else 'Not a valid digit, we found our separator
                            Exit Do
                    End Select
                    c = c + 1
                Loop Until op + c >= Len(exp$)
                E = op + c

                c = 0
                Do
                    c = c + 1
                    Select Case Mid$(exp$, op - c, 1)
                        Case "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "N" 'Valid digit
                        Case "-" 'We need to check if it's a minus or a negative
                            c1 = c
                            bad = 0
                            Do
                                c1 = c1 + 1
                                Select Case Mid$(exp$, op - c1, 1)
                                    Case "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "."
                                        bad = -1
                                        Exit Do 'It's a minus sign
                                    Case Else
                                        'It's a negative sign and needs to count as part of our numbers
                                End Select
                            Loop Until op - c1 <= 0
                            If bad Then Exit Do 'We found our seperator
                        Case Else 'Not a valid digit, we found our separator
                            Exit Do
                    End Select
                Loop Until op - c <= 0
                s = op - c
                num(1) = Mid$(exp$, s + 1, op - s - 1) 'Get our first number
                num(2) = Mid$(exp$, op + Len(OName(OpOn)), E - op - Len(OName(OpOn)) + 1) 'Get our second number
                If Mid$(num(1), 1, 1) = "N" Then Mid$(num(1), 1) = "-"
                If Mid$(num(2), 1, 1) = "N" Then Mid$(num(2), 1) = "-"
                If num(1) = "-" Then
                    num(3) = "N" + EvaluateNumbers(OpOn, num())
                Else
                    num(3) = EvaluateNumbers(OpOn, num())
                End If
                If Mid$(num(3), 1, 1) = "-" Then Mid$(num(3), 1) = "N"
                If Left$(num(3), 5) = "ERROR" Then exp$ = num(3): Exit Sub
                exp$ = LTrim$(N2S(DWD(Left$(exp$, s) + RTrim$(LTrim$(num(3))) + Mid$(exp$, E + 1))))
            End If
            op = 0
        Loop
    Next

End Sub



Sub Set_OrderOfOperations
    'PL sets our priortity level. 1 is highest to 65535 for the lowest.
    'I used a range here so I could add in new priority levels as needed.
    'OName ended up becoming the name of our commands, as I modified things.... Go figure!  LOL!
    ReDim OName(10000) As String, PL(10000) As Integer
    'Constants get evaluated first, with a Priority Level of 1

    i = i + 1: OName(i) = "C_UOF": PL(i) = 5 'convert to unsigned offset
    i = i + 1: OName(i) = "C_OF": PL(i) = 5 'convert to offset
    i = i + 1: OName(i) = "C_UBY": PL(i) = 5 'convert to unsigned byte
    i = i + 1: OName(i) = "C_BY": PL(i) = 5 'convert to byte
    i = i + 1: OName(i) = "C_UIN": PL(i) = 5 'convert to unsigned integer
    i = i + 1: OName(i) = "C_IN": PL(i) = 5 'convert to integer
    i = i + 1: OName(i) = "C_UIF": PL(i) = 5 'convert to unsigned int64
    i = i + 1: OName(i) = "C_IF": PL(i) = 5 'convert to int64
    i = i + 1: OName(i) = "C_ULO": PL(i) = 5 'convert to unsigned long
    i = i + 1: OName(i) = "C_LO": PL(i) = 5 'convert to long
    i = i + 1: OName(i) = "C_SI": PL(i) = 5 'convert to single
    i = i + 1: OName(i) = "C_FL": PL(i) = 5 'convert to float
    i = i + 1: OName(i) = "C_DO": PL(i) = 5 'convert to double
    i = i + 1: OName(i) = "C_UBI": PL(i) = 5 'convert to unsigned bit
    i = i + 1: OName(i) = "C_BI": PL(i) = 5 'convert to bit

    'Then Functions with PL 10
    i = i + 1:: OName(i) = "_PI": PL(i) = 10
    i = i + 1: OName(i) = "_ACOS": PL(i) = 10
    i = i + 1: OName(i) = "_ASIN": PL(i) = 10
    i = i + 1: OName(i) = "_ARCSEC": PL(i) = 10
    i = i + 1: OName(i) = "_ARCCSC": PL(i) = 10
    i = i + 1: OName(i) = "_ARCCOT": PL(i) = 10
    i = i + 1: OName(i) = "_SECH": PL(i) = 10
    i = i + 1: OName(i) = "_CSCH": PL(i) = 10
    i = i + 1: OName(i) = "_COTH": PL(i) = 10
    i = i + 1: OName(i) = "COS": PL(i) = 10
    i = i + 1: OName(i) = "SIN": PL(i) = 10
    i = i + 1: OName(i) = "TAN": PL(i) = 10
    i = i + 1: OName(i) = "LOG": PL(i) = 10
    i = i + 1: OName(i) = "EXP": PL(i) = 10
    i = i + 1: OName(i) = "ATN": PL(i) = 10
    i = i + 1: OName(i) = "_D2R": PL(i) = 10
    i = i + 1: OName(i) = "_D2G": PL(i) = 10
    i = i + 1: OName(i) = "_R2D": PL(i) = 10
    i = i + 1: OName(i) = "_R2G": PL(i) = 10
    i = i + 1: OName(i) = "_G2D": PL(i) = 10
    i = i + 1: OName(i) = "_G2R": PL(i) = 10
    i = i + 1: OName(i) = "ABS": PL(i) = 10
    i = i + 1: OName(i) = "SGN": PL(i) = 10
    i = i + 1: OName(i) = "INT": PL(i) = 10
    i = i + 1: OName(i) = "_ROUND": PL(i) = 10
    i = i + 1: OName(i) = "_CEIL": PL(i) = 10
    i = i + 1: OName(i) = "FIX": PL(i) = 10
    i = i + 1: OName(i) = "_SEC": PL(i) = 10
    i = i + 1: OName(i) = "_CSC": PL(i) = 10
    i = i + 1: OName(i) = "_COT": PL(i) = 10
    i = i + 1: OName(i) = "ASC": PL(i) = 10
    i = i + 1: OName(i) = "C_RG": PL(i) = 10 '_RGB32 converted
    i = i + 1: OName(i) = "C_RA": PL(i) = 10 '_RGBA32 converted
    i = i + 1: OName(i) = "_RGBA": PL(i) = 10
    i = i + 1: OName(i) = "_RGB": PL(i) = 10
    i = i + 1: OName(i) = "C_RX": PL(i) = 10 '_RED32 converted
    i = i + 1: OName(i) = "C_GR": PL(i) = 10 ' _GREEN32 converted
    i = i + 1: OName(i) = "C_BL": PL(i) = 10 '_BLUE32 converted
    i = i + 1: OName(i) = "C_AL": PL(i) = 10 '_ALPHA32 converted
    i = i + 1: OName(i) = "_RED": PL(i) = 10
    i = i + 1: OName(i) = "_GREEN": PL(i) = 10
    i = i + 1: OName(i) = "_BLUE": PL(i) = 10
    i = i + 1: OName(i) = "_ALPHA": PL(i) = 10

    'Exponents with PL 20
    i = i + 1: OName(i) = "^": PL(i) = 20
    i = i + 1: OName(i) = "SQR": PL(i) = 20
    i = i + 1: OName(i) = "ROOT": PL(i) = 20
    'Multiplication and Division PL 30
    i = i + 1: OName(i) = "*": PL(i) = 30
    i = i + 1: OName(i) = "/": PL(i) = 30
    'Integer Division PL 40
    i = i + 1: OName(i) = "\": PL(i) = 40
    'MOD PL 50
    i = i + 1: OName(i) = "MOD": PL(i) = 50
    'Addition and Subtraction PL 60
    i = i + 1: OName(i) = "+": PL(i) = 60
    i = i + 1: OName(i) = "-": PL(i) = 60

    'Relational Operators =, >, <, <>, <=, >=   PL 70
    i = i + 1: OName(i) = "<>": PL(i) = 70 'These next three are just reversed symbols as an attempt to help process a common typo
    i = i + 1: OName(i) = "><": PL(i) = 70
    i = i + 1: OName(i) = "<=": PL(i) = 70
    i = i + 1: OName(i) = ">=": PL(i) = 70
    i = i + 1: OName(i) = "=<": PL(i) = 70 'I personally can never keep these things straight.  Is it < = or = <...
    i = i + 1: OName(i) = "=>": PL(i) = 70 'Who knows, check both!
    i = i + 1: OName(i) = ">": PL(i) = 70
    i = i + 1: OName(i) = "<": PL(i) = 70
    i = i + 1: OName(i) = "=": PL(i) = 70
    'Logical Operations PL 80+
    i = i + 1: OName(i) = "NOT": PL(i) = 80
    i = i + 1: OName(i) = "AND": PL(i) = 90
    i = i + 1: OName(i) = "OR": PL(i) = 100
    i = i + 1: OName(i) = "XOR": PL(i) = 110
    i = i + 1: OName(i) = "EQV": PL(i) = 120
    i = i + 1: OName(i) = "IMP": PL(i) = 130
    i = i + 1: OName(i) = ",": PL(i) = 1000

    ReDim _Preserve OName(i) As String, PL(i) As Integer
End Sub

Function EvaluateNumbers$ (p, num() As String)
    Dim n1 As _Float, n2 As _Float, n3 As _Float
    'PRINT "EVALNUM:"; OName(p), num(1), num(2)

    If _Trim$(num(1)) = "" Then num(1) = "0"

    If PL(p) >= 20 And (Len(_Trim$(num(1))) = 0 Or Len(_Trim$(num(2))) = 0) Then
        EvaluateNumbers$ = "ERROR - Missing operand": Exit Function
    End If

    If InStr(num(1), ",") Then
        EvaluateNumbers$ = "ERROR - Invalid comma (" + num(1) + ")": Exit Function
    End If
    l2 = InStr(num(2), ",")
    If l2 Then
        Select Case OName(p) 'only certain commands should pass a comma value
            Case "C_RG", "C_RA", "_RGB", "_RGBA", "_RED", "_GREEN", "_BLUE", "C_BL", "_ALPHA"
            Case Else
                C$ = Mid$(num(2), l2)
                num(2) = Left$(num(2), l2 - 1)
        End Select
    End If

    Select Case PL(p) 'divide up the work so we want do as much case checking
        Case 5 'Type conversions
            'Note, these are special cases and work with the number BEFORE the command and not after
            Select Case OName(p) 'Depending on our operator..
                Case "C_UOF": n1~%& = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1~%&)))
                Case "C_ULO": n1%& = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1%&)))
                Case "C_UBY": n1~%% = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1~%%)))
                Case "C_UIN": n1~% = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1~%)))
                Case "C_BY": n1%% = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1%%)))
                Case "C_IN": n1% = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1%)))
                Case "C_UIF": n1~&& = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1~&&)))
                Case "C_OF": n1~& = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1~&)))
                Case "C_IF": n1&& = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1&&)))
                Case "C_LO": n1& = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1&)))
                Case "C_UBI": n1~` = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1~`)))
                Case "C_BI": n1` = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1`)))
                Case "C_FL": n1## = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1##)))
                Case "C_DO": n1# = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1#)))
                Case "C_SI": n1! = Val(num(1)): EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1!)))
            End Select
            Exit Function
        Case 10 'functions
            Select Case OName(p) 'Depending on our operator..
                Case "_PI"
                    n1 = 3.14159265358979323846264338327950288## 'Future compatable in case something ever stores extra digits for PI
                    If num(2) <> "" Then n1 = n1 * Val(num(2))
                Case "_ACOS": n1 = _Acos(Val(num(2)))
                Case "_ASIN": n1 = _Asin(Val(num(2)))
                Case "_ARCSEC": n1 = _Arcsec(Val(num(2)))
                Case "_ARCCSC": n1 = _Arccsc(Val(num(2)))
                Case "_ARCCOT": n1 = _Arccot(Val(num(2)))
                Case "_SECH": n1 = _Sech(Val(num(2)))
                Case "_CSCH": n1 = _Csch(Val(num(2)))
                Case "_COTH": n1 = _Coth(Val(num(2)))
                Case "C_RG"
                    n$ = num(2)
                    If n$ = "" Then EvaluateNumbers$ = "ERROR - Invalid null _RGB32": Exit Function
                    c1 = InStr(n$, ",")
                    If c1 Then c2 = InStr(c1 + 1, n$, ",")
                    If c2 Then c3 = InStr(c2 + 1, n$, ",")
                    If c3 Then c4 = InStr(c3 + 1, n$, ",")
                    If c1 = 0 Then 'there's no comma in the command to parse.  It's a grayscale value
                        n = Val(num(2))
                        n1 = _RGB32(n, n, n)
                    ElseIf c2 = 0 Then 'there's one comma and not 2.  It's grayscale with alpha.
                        n = Val(Left$(num(2), c1))
                        n2 = Val(Mid$(num(2), c1 + 1))
                        n1 = _RGBA32(n, n, n, n2)
                    ElseIf c3 = 0 Then 'there's two commas.  It's _RGB values
                        n = Val(Left$(num(2), c1))
                        n2 = Val(Mid$(num(2), c1 + 1))
                        n3 = Val(Mid$(num(2), c2 + 1))
                        n1 = _RGB32(n, n2, n3)
                    ElseIf c4 = 0 Then 'there's three commas.  It's _RGBA values
                        n = Val(Left$(num(2), c1))
                        n2 = Val(Mid$(num(2), c1 + 1))
                        n3 = Val(Mid$(num(2), c2 + 1))
                        n4 = Val(Mid$(num(2), c3 + 1))
                        n1 = _RGBA32(n, n2, n3, n4)
                    Else 'we have more than three commas.  I have no idea WTH type of values got passed here!
                        EvaluateNumbers$ = "ERROR - Invalid comma count (" + num(2) + ")": Exit Function
                    End If
                Case "C_RA"
                    n$ = num(2)
                    If n$ = "" Then EvaluateNumbers$ = "ERROR - Invalid null _RGBA32": Exit Function
                    c1 = InStr(n$, ",")
                    If c1 Then c2 = InStr(c1 + 1, n$, ",")
                    If c2 Then c3 = InStr(c2 + 1, n$, ",")
                    If c3 Then c4 = InStr(c3 + 1, n$, ",")
                    If c3 = 0 Or c4 <> 0 Then EvaluateNumbers$ = "ERROR - Invalid comma count (" + num(2) + ")": Exit Function
                    'we have to have 3 commas; not more, not less.
                    n = Val(Left$(num(2), c1))
                    n2 = Val(Mid$(num(2), c1 + 1))
                    n3 = Val(Mid$(num(2), c2 + 1))
                    n4 = Val(Mid$(num(2), c3 + 1))
                    n1 = _RGBA32(n, n2, n3, n4)
                Case "_RGB"
                    n$ = num(2)
                    If n$ = "" Then EvaluateNumbers$ = "ERROR - Invalid null _RGB": Exit Function
                    c1 = InStr(n$, ",")
                    If c1 Then c2 = InStr(c1 + 1, n$, ",")
                    If c2 Then c3 = InStr(c2 + 1, n$, ",")
                    If c3 Then c4 = InStr(c3 + 1, n$, ",")
                    If c3 = 0 Or c4 <> 0 Then EvaluateNumbers$ = "ERROR - Invalid comma count (" + num(2) + "). _RGB requires 4 parameters for Red, Green, Blue, ScreenMode.": Exit Function
                    'we have to have 3 commas; not more, not less.
                    n = Val(Left$(num(2), c1))
                    n2 = Val(Mid$(num(2), c1 + 1))
                    n3 = Val(Mid$(num(2), c2 + 1))
                    n4 = Val(Mid$(num(2), c3 + 1))
                    Select Case n4
                        Case 0 To 2, 7 To 13, 256, 32 'these are the good screen values
                        Case Else
                            EvaluateNumbers$ = "ERROR - Invalid Screen Mode (" + Str$(n4) + ")": Exit Function
                    End Select
                    t = _NewImage(1, 1, n4)
                    n1 = _RGB(n, n2, n3, t)
                    _FreeImage t
                Case "_RGBA"
                    n$ = num(2)
                    If n$ = "" Then EvaluateNumbers$ = "ERROR - Invalid null _RGBA": Exit Function
                    c1 = InStr(n$, ",")
                    If c1 Then c2 = InStr(c1 + 1, n$, ",")
                    If c2 Then c3 = InStr(c2 + 1, n$, ",")
                    If c3 Then c4 = InStr(c3 + 1, n$, ",")
                    If c4 Then c5 = InStr(c4 + 1, n$, ",")
                    If c4 = 0 Or c5 <> 0 Then EvaluateNumbers$ = "ERROR - Invalid comma count (" + num(2) + "). _RGBA requires 5 parameters for Red, Green, Blue, Alpha, ScreenMode.": Exit Function
                    'we have to have 4 commas; not more, not less.
                    n = Val(Left$(num(2), c1))
                    n2 = Val(Mid$(num(2), c1 + 1))
                    n3 = Val(Mid$(num(2), c2 + 1))
                    n4 = Val(Mid$(num(2), c3 + 1))
                    n5 = Val(Mid$(num(2), c4 + 1))
                    Select Case n5
                        Case 0 To 2, 7 To 13, 256, 32 'these are the good screen values
                        Case Else
                            EvaluateNumbers$ = "ERROR - Invalid Screen Mode (" + Str$(n5) + ")": Exit Function
                    End Select
                    t = _NewImage(1, 1, n5)
                    n1 = _RGBA(n, n2, n3, n4, t)
                    _FreeImage t
                Case "_RED", "_GREEN", "_BLUE", "_ALPHA"
                    n$ = num(2)
                    If n$ = "" Then EvaluateNumbers$ = "ERROR - Invalid null " + OName(p): Exit Function
                    c1 = InStr(n$, ",")
                    If c1 = 0 Then EvaluateNumbers$ = "ERROR - " + OName(p) + " requires 2 parameters for Color, ScreenMode.": Exit Function
                    If c1 Then c2 = InStr(c1 + 1, n$, ",")
                    If c2 Then EvaluateNumbers$ = "ERROR - " + OName(p) + " requires 2 parameters for Color, ScreenMode.": Exit Function
                    n = Val(Left$(num(2), c1))
                    n2 = Val(Mid$(num(2), c1 + 1))
                    Select Case n2
                        Case 0 To 2, 7 To 13, 256, 32 'these are the good screen values
                        Case Else
                            EvaluateNumbers$ = "ERROR - Invalid Screen Mode (" + Str$(n2) + ")": Exit Function
                    End Select
                    t = _NewImage(1, 1, n4)
                    Select Case OName(p)
                        Case "_RED": n1 = _Red(n, t)
                        Case "_BLUE": n1 = _Blue(n, t)
                        Case "_GREEN": n1 = _Green(n, t)
                        Case "_ALPHA": n1 = _Alpha(n, t)
                    End Select
                    _FreeImage t
                Case "C_RX", "C_GR", "C_BL", "C_AL"
                    n$ = num(2)
                    If n$ = "" Then EvaluateNumbers$ = "ERROR - Invalid null " + OName(p): Exit Function
                    n = Val(num(2))
                    Select Case OName(p)
                        Case "C_RX": n1 = _Red32(n)
                        Case "C_BL": n1 = _Blue32(n)
                        Case "C_GR": n1 = _Green32(n)
                        Case "C_AL": n1 = _Alpha32(n)
                    End Select
                Case "COS": n1 = Cos(Val(num(2)))
                Case "SIN": n1 = Sin(Val(num(2)))
                Case "TAN": n1 = Tan(Val(num(2)))
                Case "LOG": n1 = Log(Val(num(2)))
                Case "EXP": n1 = Exp(Val(num(2)))
                Case "ATN": n1 = Atn(Val(num(2)))
                Case "_D2R": n1 = 0.0174532925 * (Val(num(2)))
                Case "_D2G": n1 = 1.1111111111 * (Val(num(2)))
                Case "_R2D": n1 = 57.2957795 * (Val(num(2)))
                Case "_R2G": n1 = 0.015707963 * (Val(num(2)))
                Case "_G2D": n1 = 0.9 * (Val(num(2)))
                Case "_G2R": n1 = 63.661977237 * (Val(num(2)))
                Case "ABS": n1 = Abs(Val(num(2)))
                Case "SGN": n1 = Sgn(Val(num(2)))
                Case "INT": n1 = Int(Val(num(2)))
                Case "_ROUND": n1 = _Round(Val(num(2)))
                Case "_CEIL": n1 = _Ceil(Val(num(2)))
                Case "FIX": n1 = Fix(Val(num(2)))
                Case "_SEC": n1 = _Sec(Val(num(2)))
                Case "_CSC": n1 = _Csc(Val(num(2)))
                Case "_COT": n1 = _Cot(Val(num(2)))
            End Select
        Case 20 To 60 'Math Operators
            Select Case OName(p) 'Depending on our operator..
                Case "^": n1 = Val(num(1)) ^ Val(num(2))
                Case "SQR": n1 = Sqr(Val(num(2)))
                Case "ROOT"
                    n1 = Val(num(1)): n2 = Val(num(2))
                    If n2 = 1 Then EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1))): Exit Function
                    If n1 < 0 And n2 >= 1 Then sign = -1: n1 = -n1 Else sign = 1
                    n3 = 1## / n2
                    If n3 <> Int(n3) And n2 < 1 Then sign = Sgn(n1): n1 = Abs(n1)
                    n1 = sign * (n1 ^ n3)
                Case "*": n1 = Val(num(1)) * Val(num(2))
                Case "/"
                    If Val(num(2)) <> 0 Then
                        n1 = Val(num(1)) / Val(num(2))
                    Else
                        EvaluateNumbers$ = "ERROR - Division By Zero"
                        Exit Function
                    End If
                Case "\"
                    If Fix(Val(num(2))) = 0 Then
                        EvaluateNumbers$ = "ERROR - Division By Zero"
                        Exit Function
                    End If

                    n1 = Val(num(1)) \ Fix(Val(num(2)))
                Case "MOD"
                    If Fix(Val(num(2))) = 0 Then
                        EvaluateNumbers$ = "ERROR - Division By Zero"
                        Exit Function
                    End If

                    n1 = Val(num(1)) Mod Fix(Val(num(2)))

                Case "+": n1 = Val(num(1)) + Val(num(2))
                Case "-":
                    n1 = Val(num(1)) - Val(num(2))
            End Select
        Case 70 'Relational Operators =, >, <, <>, <=, >=
            Select Case OName(p) 'Depending on our operator..
                Case "=": n1 = Val(num(1)) = Val(num(2))
                Case ">": n1 = Val(num(1)) > Val(num(2))
                Case "<": n1 = Val(num(1)) < Val(num(2))
                Case "<>", "><": n1 = Val(num(1)) <> Val(num(2))
                Case "<=", "=<": n1 = Val(num(1)) <= Val(num(2))
                Case ">=", "=>": n1 = Val(num(1)) >= Val(num(2))
            End Select
        Case Else 'a value we haven't processed elsewhere
            Select Case OName(p) 'Depending on our operator..
                Case "NOT": n1 = Not Val(num(2))
                Case "AND": n1 = Val(num(1)) And Val(num(2))
                Case "OR": n1 = Val(num(1)) Or Val(num(2))
                Case "XOR": n1 = Val(num(1)) Xor Val(num(2))
                Case "EQV": n1 = Val(num(1)) Eqv Val(num(2))
                Case "IMP": n1 = Val(num(1)) Imp Val(num(2))
            End Select
    End Select

    EvaluateNumbers$ = RTrim$(LTrim$(Str$(n1))) + C$
End Function

Function DWD$ (exp$) 'Deal With Duplicates
    'To deal with duplicate operators in our code.
    'Such as --  becomes a +
    '++ becomes a +
    '+- becomes a -
    '-+ becomes a -
    t$ = exp$
    Do
        bad = 0
        Do
            l = InStr(t$, "++")
            If l Then t$ = Left$(t$, l - 1) + "+" + Mid$(t$, l + 2): bad = -1
        Loop Until l = 0
        Do
            l = InStr(t$, "+-")
            If l Then t$ = Left$(t$, l - 1) + "-" + Mid$(t$, l + 2): bad = -1
        Loop Until l = 0
        Do
            l = InStr(t$, "-+")
            If l Then t$ = Left$(t$, l - 1) + "-" + Mid$(t$, l + 2): bad = -1
        Loop Until l = 0
        Do
            l = InStr(t$, "--")
            If l Then t$ = Left$(t$, l - 1) + "+" + Mid$(t$, l + 2): bad = -1
        Loop Until l = 0
    Loop Until Not bad
    DWD$ = t$
End Function

Sub PreParse (e$)
    Dim f As _Float
    Static TotalPrefixedPP_TypeMod As Long, TotalPP_TypeMod As Long

    If PP_TypeMod(0) = "" Then
        ReDim PP_TypeMod(100) As String, PP_ConvertedMod(100) As String 'Large enough to hold all values to begin with
        PP_TypeMod(0) = "Initialized" 'Set so we don't do this section over and over, as we keep the values in shared memory.
        'and the below is a conversion list so symbols don't get cross confused.
        i = i + 1: PP_TypeMod(i) = "~`": PP_ConvertedMod(i) = "C_UBI" 'unsigned bit
        i = i + 1: PP_TypeMod(i) = "~%%": PP_ConvertedMod(i) = "C_UBY" 'unsigned byte
        i = i + 1: PP_TypeMod(i) = "~%&": PP_ConvertedMod(i) = "C_UOF" 'unsigned offset
        i = i + 1: PP_TypeMod(i) = "~%": PP_ConvertedMod(i) = "C_UIN" 'unsigned integer
        i = i + 1: PP_TypeMod(i) = "~&&": PP_ConvertedMod(i) = "C_UIF" 'unsigned integer64
        i = i + 1: PP_TypeMod(i) = "~&": PP_ConvertedMod(i) = "C_ULO" 'unsigned long
        i = i + 1: PP_TypeMod(i) = "`": PP_ConvertedMod(i) = "C_BI" 'bit
        i = i + 1: PP_TypeMod(i) = "%%": PP_ConvertedMod(i) = "C_BY" 'byte
        i = i + 1: PP_TypeMod(i) = "%&": PP_ConvertedMod(i) = "C_OF" 'offset
        i = i + 1: PP_TypeMod(i) = "%": PP_ConvertedMod(i) = "C_IN" 'integer
        i = i + 1: PP_TypeMod(i) = "&&": PP_ConvertedMod(i) = "C_IF" 'integer64
        i = i + 1: PP_TypeMod(i) = "&": PP_ConvertedMod(i) = "C_LO" 'long
        i = i + 1: PP_TypeMod(i) = "!": PP_ConvertedMod(i) = "C_SI" 'single
        i = i + 1: PP_TypeMod(i) = "##": PP_ConvertedMod(i) = "C_FL" 'float
        i = i + 1: PP_TypeMod(i) = "#": PP_ConvertedMod(i) = "C_DO" 'double
        i = i + 1: PP_TypeMod(i) = "_RGB32": PP_ConvertedMod(i) = "C_RG" 'rgb32
        i = i + 1: PP_TypeMod(i) = "_RGBA32": PP_ConvertedMod(i) = "C_RA" 'rgba32
        i = i + 1: PP_TypeMod(i) = "_RED32": PP_ConvertedMod(i) = "C_RX" 'red32
        i = i + 1: PP_TypeMod(i) = "_GREEN32": PP_ConvertedMod(i) = "C_GR" 'green32
        i = i + 1: PP_TypeMod(i) = "_BLUE32": PP_ConvertedMod(i) = "C_BL" 'blue32
        i = i + 1: PP_TypeMod(i) = "_ALPHA32": PP_ConvertedMod(i) = "C_AL" 'alpha32
        TotalPrefixedPP_TypeMod = i
        i = i + 1: PP_TypeMod(i) = "RGB32": PP_ConvertedMod(i) = "C_RG" 'rgb32
        i = i + 1: PP_TypeMod(i) = "RGBA32": PP_ConvertedMod(i) = "C_RA" 'rgba32
        i = i + 1: PP_TypeMod(i) = "RED32": PP_ConvertedMod(i) = "C_RX" 'red32
        i = i + 1: PP_TypeMod(i) = "GREEN32": PP_ConvertedMod(i) = "C_GR" 'green32
        i = i + 1: PP_TypeMod(i) = "BLUE32": PP_ConvertedMod(i) = "C_BL" 'blue32
        i = i + 1: PP_TypeMod(i) = "ALPHA32": PP_ConvertedMod(i) = "C_AL" 'alpha32
        TotalPP_TypeMod = i
        ReDim _Preserve PP_TypeMod(i) As String, PP_ConvertedMod(i) As String 'And then resized to just contain the necessary space in memory
    End If
    t$ = e$

    'First strip all spaces
    t$ = ""
    For i = 1 To Len(e$)
        If Mid$(e$, i, 1) <> " " Then t$ = t$ + Mid$(e$, i, 1)
    Next

    t$ = UCase$(t$)
    If t$ = "" Then e$ = "ERROR -- NULL string; nothing to evaluate": Exit Sub

    'ERROR CHECK by counting our brackets
    l = 0
    Do
        l = InStr(l + 1, t$, "("): If l Then c = c + 1
    Loop Until l = 0
    l = 0
    Do
        l = InStr(l + 1, t$, ")"): If l Then c1 = c1 + 1
    Loop Until l = 0
    If c <> c1 Then e$ = "ERROR -- Bad Parenthesis:" + Str$(c) + "( vs" + Str$(c1) + ")": Exit Sub

    'replace existing CONST values
    sep$ = "()+-*/\><=^"
    For i2 = 0 To constlast
        thisConstName$ = constname(i2)
        For replaceConstPass = 1 To 2
            found = 0
            Do
                found = InStr(found + 1, UCase$(t$), thisConstName$)
                If found Then
                    If found > 1 Then
                        If InStr(sep$, Mid$(t$, found - 1, 1)) = 0 Then _Continue
                    End If
                    If found + Len(thisConstName$) <= Len(t$) Then
                        If InStr(sep$, Mid$(t$, found + Len(thisConstName$), 1)) = 0 Then _Continue
                    End If
                    t = consttype(i2)
                    If t And ISSTRING Then
                        r$ = conststring(i2)
                        i4 = _InStrRev(r$, ",")
                        r$ = Left$(r$, i4 - 1)
                    Else
                        If t And ISFLOAT Then
                            r$ = Str$(constfloat(i2))
                            r$ = N2S(r$)
                        Else
                            If t And ISUNSIGNED Then r$ = Str$(constuinteger(i2)) Else r$ = Str$(constinteger(i2))
                        End If
                    End If
                    t$ = Left$(t$, found - 1) + _Trim$(r$) + Mid$(t$, found + Len(thisConstName$))
                End If
            Loop Until found = 0
            thisConstName$ = constname(i2) + constnamesymbol(i2)
        Next
    Next

    'Modify so that NOT will process properly
    l = 0
    Do
        l = InStr(l + 1, t$, "NOT ")
        If l Then
            'We need to work magic on the statement so it looks pretty.
            ' 1 + NOT 2 + 1 is actually processed as 1 + (NOT 2 + 1)
            'Look for something not proper
            l1 = InStr(l + 1, t$, "AND")
            If l1 = 0 Or (InStr(l + 1, t$, "OR") > 0 And InStr(l + 1, t$, "OR") < l1) Then l1 = InStr(l + 1, t$, "OR")
            If l1 = 0 Or (InStr(l + 1, t$, "XOR") > 0 And InStr(l + 1, t$, "XOR") < l1) Then l1 = InStr(l + 1, t$, "XOR")
            If l1 = 0 Or (InStr(l + 1, t$, "EQV") > 0 And InStr(l + 1, t$, "EQV") < l1) Then l1 = InStr(l + 1, t$, "EQV")
            If l1 = 0 Or (InStr(l + 1, t$, "IMP") > 0 And InStr(l + 1, t$, "IMP") < l1) Then l1 = InStr(l + 1, t$, "IMP")
            If l1 = 0 Then l1 = Len(t$) + 1
            t$ = Left$(t$, l - 1) + "(" + Mid$(t$, l, l1 - l) + ")" + Mid$(t$, l + l1 - l)
            l = l + 3
            'PRINT t$
        End If
    Loop Until l = 0

    uboundPP_TypeMod = TotalPrefixedPP_TypeMod
    If qb64prefix_set = 1 Then uboundPP_TypeMod = TotalPP_TypeMod
    For j = 1 To uboundPP_TypeMod
        l = 0
        Do
            l = InStr(l + 1, t$, PP_TypeMod(j))
            If l = 0 Then Exit Do
            i = 0: l1 = 0: l2 = 0: lo = Len(PP_TypeMod(j))
            Do
                If PL(i) > 10 Then
                    l2 = _InStrRev(l, t$, OName$(i))
                    If l2 > 0 And l2 > l1 Then l1 = l2
                End If
                i = i + lo
            Loop Until i > UBound(PL)
            l$ = Left$(t$, l1)
            m$ = Mid$(t$, l1 + 1, l - l1 - 1)
            r$ = PP_ConvertedMod(j) + Mid$(t$, l + lo)
            If j > 15 Then
                t$ = l$ + m$ + r$ 'replacement routine for commands which might get confused with others, like _RGB and _RGB32
            Else
                'the first 15 commands need to properly place the parenthesis around the value we want to convert.
                t$ = l$ + "(" + m$ + ")" + r$
            End If
            l = l + 2 + Len(PP_TypeMod(j)) 'move forward from the length of the symbol we checked + the new "(" and  ")"
        Loop
    Next

    'Check for bad operators before a ( bracket
    l = 0
    Do
        l = InStr(l + 1, t$, "(")
        If l > 0 And l > 2 Then 'Don't check the starting bracket; there's nothing before it.
            good = 0
            For i = 1 To UBound(OName)
                m$ = Mid$(t$, l - Len(OName(i)), Len(OName(i)))
                If m$ = OName(i) Then
                    good = -1: Exit For 'We found an operator after our ), and it's not a CONST (like PI)
                Else
                    If Left$(OName(i), 1) = "_" And qb64prefix_set = 1 Then
                        'try without prefix
                        m$ = Mid$(t$, l - (Len(OName(i)) - 1), Len(OName(i)) - 1)
                        If m$ = Mid$(OName(i), 2) Then good = -1: Exit For
                    End If
                End If
            Next
            If Not good Then e$ = "ERROR - Improper operations before (.": Exit Sub
            l = l + 1
        End If
    Loop Until l = 0

    'Check for bad operators after a ) bracket
    l = 0
    Do
        l = InStr(l + 1, t$, ")")
        If l > 0 And l < Len(t$) Then
            good = 0
            For i = 1 To UBound(OName)
                m$ = Mid$(t$, l + 1, Len(OName(i)))
                If m$ = OName(i) Then
                    good = -1: Exit For 'We found an operator after our ), and it's not a CONST (like PI
                Else
                    If Left$(OName(i), 1) = "_" And qb64prefix_set = 1 Then
                        'try without prefix
                        m$ = Mid$(t$, l + 1, Len(OName(i)) - 1)
                        If m$ = Mid$(OName(i), 2) Then good = -1: Exit For
                    End If
                End If
            Next
            If Mid$(t$, l + 1, 1) = ")" Then good = -1
            If Not good Then e$ = "ERROR - Improper operations after ).": Exit Sub
            l = l + 1
        End If
    Loop Until l = 0 Or l = Len(t$) 'last symbol is a bracket

    'Turn all &H (hex) numbers into decimal values for the program to process properly
    l = 0
    Do
        l = InStr(t$, "&H")
        If l Then
            E = l + 1: finished = 0
            Do
                E = E + 1
                comp$ = Mid$(t$, E, 1)
                Select Case comp$
                    Case "0" To "9", "A" To "F" 'All is good, our next digit is a number, continue to add to the hex$
                    Case Else
                        good = 0
                        For i = 1 To UBound(OName)
                            If Mid$(t$, E, Len(OName(i))) = OName(i) And PL(i) > 1 And PL(i) <= 250 Then good = -1: Exit For 'We found an operator after our ), and it's not a CONST (like PI)
                        Next
                        If Not good Then e$ = "ERROR - Improper &H value. (" + comp$ + ")": Exit Sub
                        E = E - 1
                        finished = -1
                End Select
            Loop Until finished Or E = Len(t$)
            t$ = Left$(t$, l - 1) + LTrim$(RTrim$(Str$(Val(Mid$(t$, l, E - l + 1))))) + Mid$(t$, E + 1)
        End If
    Loop Until l = 0

    'Turn all &B (binary) numbers into decimal values for the program to process properly
    l = 0
    Do
        l = InStr(t$, "&B")
        If l Then
            E = l + 1: finished = 0
            Do
                E = E + 1
                comp$ = Mid$(t$, E, 1)
                Select Case comp$
                    Case "0", "1" 'All is good, our next digit is a number, continue to add to the hex$
                    Case Else
                        good = 0
                        For i = 1 To UBound(OName)
                            If Mid$(t$, E, Len(OName(i))) = OName(i) And PL(i) > 1 And PL(i) <= 250 Then good = -1: Exit For 'We found an operator after our ), and it's not a CONST (like PI)
                        Next
                        If Not good Then e$ = "ERROR - Improper &B value. (" + comp$ + ")": Exit Sub
                        E = E - 1
                        finished = -1
                End Select
            Loop Until finished Or E = Len(t$)
            bin$ = Mid$(t$, l + 2, E - l - 1)
            For i = 1 To Len(bin$)
                If Mid$(bin$, i, 1) = "1" Then f = f + 2 ^ (Len(bin$) - i)
            Next
            t$ = Left$(t$, l - 1) + LTrim$(RTrim$(Str$(f))) + Mid$(t$, E + 1)
        End If
    Loop Until l = 0


    't$ = N2S(t$)
    VerifyString t$
    e$ = t$
End Sub



Sub VerifyString (t$)
    'ERROR CHECK for unrecognized operations
    j = 1
    Do
        comp$ = Mid$(t$, j, 1)
        Select Case comp$
            Case "0" To "9", ".", "(", ")", ",": j = j + 1
            Case Else
                good = 0
                extrachar = 0
                For i = 1 To UBound(OName)
                    If Mid$(t$, j, Len(OName(i))) = OName(i) Then
                        good = -1: Exit For 'We found an operator after our ), and it's not a CONST (like PI)
                    Else
                        If Left$(OName(i), 1) = "_" And qb64prefix_set = 1 Then
                            'try without prefix
                            If Mid$(t$, j, Len(OName(i)) - 1) = Mid$(OName(i), 2) Then
                                good = -1: extrachar = 1: Exit For
                            End If
                        End If
                    End If
                Next
                If Not good Then t$ = "ERROR - Bad Operational value. (" + comp$ + ")": Exit Sub
                j = j + (Len(OName(i)) - extrachar)
        End Select
    Loop Until j > Len(t$)
End Sub

Function N2S$ (exp$) 'scientific Notation to String

    t$ = LTrim$(RTrim$(exp$))
    If Left$(t$, 1) = "-" Or Left$(t$, 1) = "N" Then sign$ = "-": t$ = Mid$(t$, 2)

    dp = InStr(t$, "D+"): dm = InStr(t$, "D-")
    ep = InStr(t$, "E+"): em = InStr(t$, "E-")
    check1 = Sgn(dp) + Sgn(dm) + Sgn(ep) + Sgn(em)
    If check1 < 1 Or check1 > 1 Then N2S = exp$: Exit Function 'If no scientic notation is found, or if we find more than 1 type, it's not SN!

    Select Case l 'l now tells us where the SN starts at.
        Case Is < dp: l = dp
        Case Is < dm: l = dm
        Case Is < ep: l = ep
        Case Is < em: l = em
    End Select

    l$ = Left$(t$, l - 1) 'The left of the SN
    r$ = Mid$(t$, l + 1): r&& = Val(r$) 'The right of the SN, turned into a workable long


    If InStr(l$, ".") Then 'Location of the decimal, if any
        If r&& > 0 Then
            r&& = r&& - Len(l$) + 2
        Else
            r&& = r&& + 1
        End If
        l$ = Left$(l$, 1) + Mid$(l$, 3)
    End If

    Select Case r&&
        Case 0 'what the heck? We solved it already?
            'l$ = l$
        Case Is < 0
            For i = 1 To -r&&
                l$ = "0" + l$
            Next
            l$ = "0." + l$
        Case Else
            For i = 1 To r&&
                l$ = l$ + "0"
            Next
    End Select

    N2S$ = sign$ + l$
End Function


Function QuotedFilename$ (f$)

    If os$ = "WIN" Then
        QuotedFilename$ = Chr$(34) + f$ + Chr$(34)
        Exit Function
    End If

    If os$ = "LNX" Then
        QuotedFilename$ = "'" + f$ + "'"
        Exit Function
    End If

End Function


Function HashValue& (a$) 'returns the hash table value of a string
    '[5(first)][5(second)][5(last)][5(2nd-last)][3(length AND 7)][1(first char is underscore)]
    l = Len(a$)
    If l = 0 Then Exit Function 'an (invalid) NULL string equates to 0
    a = Asc(a$)
    If a <> 95 Then 'does not begin with underscore
        Select Case l
            Case 1
                HashValue& = hash1char(a) + 1048576
                Exit Function
            Case 2
                HashValue& = hash2char(CVI(a$)) + 2097152
                Exit Function
            Case 3
                HashValue& = hash2char(CVI(a$)) + hash1char(Asc(a$, 3)) * 1024 + 3145728
                Exit Function
            Case Else
                HashValue& = hash2char(CVI(a$)) + hash2char(Asc(a$, l) + Asc(a$, l - 1) * 256) * 1024 + (l And 7) * 1048576
                Exit Function
        End Select
    Else 'does begin with underscore
        Select Case l
            Case 1
                HashValue& = (1048576 + 8388608): Exit Function 'note: underscore only is illegal in QB64 but supported by hash
            Case 2
                HashValue& = hash1char(Asc(a$, 2)) + (2097152 + 8388608)
                Exit Function
            Case 3
                HashValue& = hash2char(Asc(a$, 2) + Asc(a$, 3) * 256) + (3145728 + 8388608)
                Exit Function
            Case 4
                HashValue& = hash2char((CVL(a$) And &HFFFF00) \ 256) + hash1char(Asc(a$, 4)) * 1024 + (4194304 + 8388608)
                Exit Function
            Case Else
                HashValue& = hash2char((CVL(a$) And &HFFFF00) \ 256) + hash2char(Asc(a$, l) + Asc(a$, l - 1) * 256) * 1024 + (l And 7) * 1048576 + 8388608
                Exit Function
        End Select
    End If
End Function

Sub HashAdd (a$, flags, reference)

    'find the index to use
    If HashListFreeLast > 0 Then
        'take from free list
        i = HashListFree(HashListFreeLast)
        HashListFreeLast = HashListFreeLast - 1
    Else
        If HashListNext > HashListSize Then
            'double hash list size
            HashListSize = HashListSize * 2
            ReDim _Preserve HashList(1 To HashListSize) As HashListItem
            ReDim _Preserve HashListName(1 To HashListSize) As String * 256
        End If
        i = HashListNext
        HashListNext = HashListNext + 1
    End If

    'setup links to index
    x = HashValue(a$)
    i2 = HashTable(x)
    If i2 Then
        i3 = HashList(i2).LastItem
        HashList(i2).LastItem = i
        HashList(i3).NextItem = i
        HashList(i).PrevItem = i3
    Else
        HashTable(x) = i
        HashList(i).PrevItem = 0
        HashList(i).LastItem = i
    End If
    HashList(i).NextItem = 0

    'set common hashlist values
    HashList(i).Flags = flags
    HashList(i).Reference = reference
    HashListName(i) = UCase$(a$)

End Sub

Function HashFind (a$, searchflags, resultflags, resultreference)
    '(0,1,2)z=hashfind[rev]("RUMI",Hashflag_label,resflag,resref)
    '0=doesn't exist
    '1=found, no more items to scan
    '2=found, more items still to scan
    i = HashTable(HashValue(a$))
    If i Then
        ua$ = UCase$(a$) + Space$(256 - Len(a$))
        hashfind_next:
        f = HashList(i).Flags
        If searchflags And f Then 'flags in common
            If HashListName(i) = ua$ Then
                resultflags = f
                resultreference = HashList(i).Reference
                i2 = HashList(i).NextItem
                If i2 Then
                    HashFind = 2
                    HashFind_NextListItem = i2
                    HashFind_Reverse = 0
                    HashFind_SearchFlags = searchflags
                    HashFind_Name = ua$
                    HashRemove_LastFound = i
                    Exit Function
                Else
                    HashFind = 1
                    HashRemove_LastFound = i
                    Exit Function
                End If
            End If
        End If
        i = HashList(i).NextItem
        If i Then GoTo hashfind_next
    End If
End Function

Function HashFindRev (a$, searchflags, resultflags, resultreference)
    '(0,1,2)z=hashfind[rev]("RUMI",Hashflag_label,resflag,resref)
    '0=doesn't exist
    '1=found, no more items to scan
    '2=found, more items still to scan
    i = HashTable(HashValue(a$))
    If i Then
        i = HashList(i).LastItem
        ua$ = UCase$(a$) + Space$(256 - Len(a$))
        hashfindrev_next:
        f = HashList(i).Flags
        If searchflags And f Then 'flags in common
            If HashListName(i) = ua$ Then
                resultflags = f
                resultreference = HashList(i).Reference
                i2 = HashList(i).PrevItem
                If i2 Then
                    HashFindRev = 2
                    HashFind_NextListItem = i2
                    HashFind_Reverse = 1
                    HashFind_SearchFlags = searchflags
                    HashFind_Name = ua$
                    HashRemove_LastFound = i
                    Exit Function
                Else
                    HashFindRev = 1
                    HashRemove_LastFound = i
                    Exit Function
                End If
            End If
        End If
        i = HashList(i).PrevItem
        If i Then GoTo hashfindrev_next
    End If
End Function

Function HashFindCont (resultflags, resultreference)
    '(0,1,2)z=hashfind[rev](resflag,resref)
    '0=no more items exist
    '1=found, no more items to scan
    '2=found, more items still to scan
    If HashFind_Reverse Then

        i = HashFind_NextListItem
        hashfindrevc_next:
        f = HashList(i).Flags
        If HashFind_SearchFlags And f Then 'flags in common
            If HashListName(i) = HashFind_Name Then
                resultflags = f
                resultreference = HashList(i).Reference
                i2 = HashList(i).PrevItem
                If i2 Then
                    HashFindCont = 2
                    HashFind_NextListItem = i2
                    HashRemove_LastFound = i
                    Exit Function
                Else
                    HashFindCont = 1
                    HashRemove_LastFound = i
                    Exit Function
                End If
            End If
        End If
        i = HashList(i).PrevItem
        If i Then GoTo hashfindrevc_next
        Exit Function

    Else

        i = HashFind_NextListItem
        hashfindc_next:
        f = HashList(i).Flags
        If HashFind_SearchFlags And f Then 'flags in common
            If HashListName(i) = HashFind_Name Then
                resultflags = f
                resultreference = HashList(i).Reference
                i2 = HashList(i).NextItem
                If i2 Then
                    HashFindCont = 2
                    HashFind_NextListItem = i2
                    HashRemove_LastFound = i
                    Exit Function
                Else
                    HashFindCont = 1
                    HashRemove_LastFound = i
                    Exit Function
                End If
            End If
        End If
        i = HashList(i).NextItem
        If i Then GoTo hashfindc_next
        Exit Function

    End If
End Function

Sub HashRemove

    i = HashRemove_LastFound

    'add to free list
    HashListFreeLast = HashListFreeLast + 1
    If HashListFreeLast > HashListFreeSize Then
        HashListFreeSize = HashListFreeSize * 2
        ReDim _Preserve HashListFree(1 To HashListFreeSize) As Long
    End If
    HashListFree(HashListFreeLast) = i

    'unlink
    i1 = HashList(i).PrevItem
    If i1 Then
        'not first item in list
        i2 = HashList(i).NextItem
        If i2 Then
            '(not first and) not last item
            HashList(i1).NextItem = i2
            HashList(i2).LastItem = i1
        Else
            'last item
            x = HashTable(HashValue(HashListName$(i)))
            HashList(x).LastItem = i1
            HashList(i1).NextItem = 0
        End If
    Else
        'first item in list
        x = HashTable(HashValue(HashListName$(i)))
        i2 = HashList(i).NextItem
        If i2 Then
            '(first item but) not last item
            HashTable(x) = i2
            HashList(i2).PrevItem = 0
            HashList(i2).LastItem = HashList(i).LastItem
        Else
            '(first and) last item
            HashTable(x) = 0
        End If
    End If

End Sub

Sub HashDump 'used for debugging purposes
    fh = FreeFile
    Open "hashdump.txt" For Output As #fh
    b$ = "12345678901234567890123456789012}"
    For x = 0 To 16777215
        If HashTable(x) Then

            Print #fh, "START HashTable("; x; "):"
            i = HashTable(x)

            'validate
            lasti = HashList(i).LastItem
            If HashList(i).LastItem = 0 Or HashList(i).PrevItem <> 0 Or HashValue(HashListName(i)) <> x Then GoTo corrupt

            Print #fh, "  HashList("; i; ").LastItem="; HashList(i).LastItem
            hashdumpnextitem:
            x$ = "  [" + Str$(i) + "]" + HashListName(i)

            f = HashList(i).Flags
            x$ = x$ + ",.Flags=" + Str$(f) + "{"
            For z = 1 To 32
                Asc(b$, z) = (f And 1) + 48
                f = f \ 2
            Next
            x$ = x$ + b$

            x$ = x$ + ",.Reference=" + Str$(HashList(i).Reference)

            Print #fh, x$

            'validate
            i1 = HashList(i).PrevItem
            i2 = HashList(i).NextItem
            If i1 Then
                If HashList(i1).NextItem <> i Then GoTo corrupt
            End If
            If i2 Then
                If HashList(i2).PrevItem <> i Then GoTo corrupt
            End If
            If i2 = 0 Then
                If lasti <> i Then GoTo corrupt
            End If

            i = HashList(i).NextItem
            If i Then GoTo hashdumpnextitem

            Print #fh, "END HashTable("; x; ")"
        End If
    Next
    Close #fh

    Exit Sub
    corrupt:
    Print #fh, "HASH TABLE CORRUPT!" 'should never happen
    Close #fh

End Sub

Sub HashClear 'clear entire hash table

    HashListSize = 65536
    HashListNext = 1
    HashListFreeSize = 1024
    HashListFreeLast = 0
    ReDim HashList(1 To HashListSize) As HashListItem
    ReDim HashListName(1 To HashListSize) As String * 256
    ReDim HashListFree(1 To HashListFreeSize) As Long
    ReDim HashTable(16777215) As Long '64MB lookup table with indexes to the hashlist

    HashFind_NextListItem = 0
    HashFind_Reverse = 0
    HashFind_SearchFlags = 0
    HashFind_Name = ""
    HashRemove_LastFound = 0

End Sub

Function removecast$ (a$)
    removecast$ = a$
    If InStr(a$, "  )") Then
        removecast$ = Right$(a$, Len(a$) - InStr(a$, "  )") - 2)
    End If
End Function

Function converttabs$ (a2$)
    If ideautoindent Then s = ideautoindentsize Else s = 4
    a$ = a2$
    Do While InStr(a$, CHR_TAB)
        x = InStr(a$, CHR_TAB)
        a$ = Left$(a$, x - 1) + Space$(s - ((x - 1) Mod s)) + Right$(a$, Len(a$) - x)
    Loop
    converttabs$ = a$
End Function


Function NewByteElement$
    a$ = "byte_element_" + str2$(uniquenumber)
    NewByteElement$ = a$
    If use_global_byte_elements Then
        WriteBufLine GlobTxtBuf, "byte_element_struct *" + a$ + "=(byte_element_struct*)malloc(12);"
    Else
        WriteBufLine DataTxtBuf, "byte_element_struct *" + a$ + "=NULL;"
        WriteBufLine DataTxtBuf, "if (!" + a$ + "){"
        WriteBufLine DataTxtBuf, "if ((mem_static_pointer+=12)<mem_static_limit) " + a$ + "=(byte_element_struct*)(mem_static_pointer-12); else " + a$ + "=(byte_element_struct*)mem_static_malloc(12);"
        WriteBufLine DataTxtBuf, "}"
    End If
End Function

Function validname (a$)
    'notes:
    '1) '_1' is invalid because it has no alphabet letters
    '2) 'A_' is invalid because it has a trailing _
    '3) '_1A' is invalid because it contains a number before the first alphabet letter
    '4) names cannot be longer than 40 characters
    l = Len(a$)

    If l = 0 Or l > 40 Then
        If l = 0 Then Exit Function
        'Note: variable names with periods need to be obfuscated, and this affects their length
        i = InStr(a$, fix046$)
        Do While i
            l = l - Len(fix046$) + 1
            i = InStr(i + 1, a$, fix046$)
        Loop
        If l > 40 Then Exit Function
        l = Len(a$)
    End If

    'check for single, leading underscore
    If l >= 2 Then
        If Asc(a$, 1) = 95 And Asc(a$, 2) <> 95 Then Exit Function
    End If

    For i = 1 To l
        a = Asc(a$, i)
        If alphanumeric(a) = 0 Then Exit Function
        If isnumeric(a) Then
            trailingunderscore = 0
            If alphabetletter = 0 Then Exit Function
        Else
            If a = 95 Then
                trailingunderscore = 1
            Else
                alphabetletter = 1
                trailingunderscore = 0
            End If
        End If
    Next
    If trailingunderscore Then Exit Function
    validname = 1
End Function

Function str_nth$ (x)
    If x = 1 Then str_nth$ = "1st": Exit Function
    If x = 2 Then str_nth$ = "2nd": Exit Function
    If x = 3 Then str_nth$ = "3rd": Exit Function
    str_nth$ = str2(x) + "th"
End Function

Sub Give_Error (a$)
    Error_Happened = 1
    Error_Message = a$
End Sub

Sub WriteConfigSetting (section$, item$, value$)
    WriteSetting ConfigFile$, section$, item$, value$
End Sub

Function ReadConfigSetting (section$, item$, value$)
    value$ = ReadSetting$(ConfigFile$, section$, item$)
    ReadConfigSetting = (Len(value$) > 0)
End Function

Function VRGBS~& (text$, DefaultColor As _Unsigned Long)
    'Value of RGB String = VRGBS without a ton of typing
    'A function to get the RGB value back from a string such as _RGB32(255,255,255)
    'text$ is the string that we send to check for a value
    'DefaultColor is the value we send back if the string isn't in the proper format

    VRGBS~& = DefaultColor 'A return the default value if we can't parse the string properly
    If UCase$(Left$(text$, 4)) = "_RGB" Then
        rpos = InStr(text$, "(")
        gpos = InStr(rpos, text$, ",")
        bpos = InStr(gpos + 1, text$, ",")
        If rpos <> 0 And bpos <> 0 And gpos <> 0 Then
            red = Val(_Trim$(Mid$(text$, rpos + 1)))
            green = Val(_Trim$(Mid$(text$, gpos + 1)))
            blue = Val(_Trim$(Mid$(text$, bpos + 1)))
            VRGBS~& = _RGB32(red, green, blue)
        End If
    End If
End Function

Function rgbs$ (c As _Unsigned Long)
    rgbs$ = "_RGB32(" + _Trim$(Str$(_Red32(c))) + ", " + _Trim$(Str$(_Green32(c))) + ", " + _Trim$(Str$(_Blue32(c))) + ")"
End Function

Function EvalPreIF (text$, err$)
    temp$ = text$ 'so we don't corrupt the string sent to us for evaluation
    err$ = "" 'null the err message to begin with
    'first order of business is to solve for <>=
    Dim PC_Op(3) As String
    PC_Op(1) = "="
    PC_Op(2) = "<"
    PC_Op(3) = ">"
    Do
        'look for the existence of the first symbol if there is any
        firstsymbol$ = "": first = 0
        For i = 1 To UBound(PC_Op)
            temp = InStr(temp$, PC_Op(i))
            If first = 0 Then first = temp: firstsymbol$ = PC_Op(i)
            If temp <> 0 And temp < first Then first = temp: firstsymbol$ = PC_Op(i)
        Next
        If firstsymbol$ <> "" Then 'we've got = < >; let's see if we have a combination of them
            secondsymbol = 0: second = 0
            For i = first + 1 To Len(temp$)
                a$ = Mid$(temp$, i, 1)
                Select Case a$
                    Case " " 'ignore spaces
                    Case "=", "<", ">"
                        If a$ = firstsymbol$ Then err$ = "Duplicate operator (" + a$ + ")": Exit Function
                        second = i: secondsymbol$ = a$
                    Case Else 'we found a symbol we don't recognize
                        Exit For
                End Select
            Next
        End If
        If first Then 'we found a symbol
            l$ = RTrim$(Left$(temp$, first - 1))
            If second Then rightstart = second + 1 Else rightstart = first + 1

            r$ = LTrim$(Mid$(temp$, rightstart))
            symbol$ = Mid$(temp$, first, 1) + Mid$(temp$, second, 1)
            'now we check for spaces to separate this segment from any other AND/OR conditions and such
            For i = Len(l$) To 1 Step -1
                If Asc(l$, i) = 32 Then Exit For
            Next
            leftside$ = RTrim$(Left$(temp$, i))
            l$ = LTrim$(RTrim$(Mid$(temp$, i + 1, Len(l$) - i)))
            If validname(l$) = 0 Then err$ = "Invalid flag name": Exit Function
            rightstop = Len(r$)
            For i = 1 To Len(r$)
                If Asc(r$, i) = 32 Then Exit For
            Next
            rightside$ = LTrim$(Mid$(r$, i + 1))
            r$ = LTrim$(RTrim$(Left$(r$, i - 1)))
            If symbol$ = "=<" Then symbol$ = "<="
            If symbol$ = "=>" Then symbol$ = ">="
            If symbol$ = "><" Then symbol$ = "<>"
            result$ = " 0 "
            If symbol$ = "<>" Then 'check to see if we're NOT equal in any case with <>
                For i = 0 To UserDefineCount
                    If UserDefine(0, i) = l$ And UserDefine(1, i) <> r$ Then result$ = " -1 ": GoTo finishedcheck
                Next
            End If
            If InStr(symbol$, "=") Then 'check to see if we're equal in any case with =
                UserFound = 0
                For i = 0 To UserDefineCount
                    If UserDefine(0, i) = l$ Then
                        UserFound = -1
                        If UserDefine(1, i) = r$ Then result$ = " -1 ": GoTo finishedcheck
                    End If
                Next
                If UserFound = 0 And LTrim$(RTrim$(r$)) = "UNDEFINED" Then result$ = " -1 ": GoTo finishedcheck
                If UserFound = -1 And LTrim$(RTrim$(r$)) = "DEFINED" Then result$ = " -1 ": GoTo finishedcheck
            End If

            If InStr(symbol$, ">") Then 'check to see if we're greater than in any case with >
                For i = 0 To UserDefineCount
                    If VerifyNumber(r$) And VerifyNumber(UserDefine(1, i)) Then 'we're comparing numeric values
                        If UserDefine(0, i) = l$ And Val(UserDefine(1, i)) > Val(r$) Then result$ = " -1 ": GoTo finishedcheck
                    Else
                        If UserDefine(0, i) = l$ And UserDefine(1, i) > r$ Then result$ = " -1 ": GoTo finishedcheck
                    End If
                Next
            End If
            If InStr(symbol$, "<") Then 'check to see if we're less than in any case with <
                For i = 0 To UserDefineCount
                    If VerifyNumber(r$) And VerifyNumber(UserDefine(1, i)) Then 'we're comparing numeric values
                        If UserDefine(0, i) = l$ And Val(UserDefine(1, i)) < Val(r$) Then result$ = " -1 ": GoTo finishedcheck
                    Else
                        If UserDefine(0, i) = l$ And UserDefine(1, i) < r$ Then result$ = " -1 ": GoTo finishedcheck
                    End If
                Next
            End If



            finishedcheck:
            temp$ = leftside$ + result$ + rightside$
        End If
    Loop Until first = 0

    'And at this point we should now be down to a statement with nothing but AND/OR/XORS in it

    PC_Op(1) = " AND "
    PC_Op(2) = " OR "
    PC_Op(3) = " XOR "

    Do
        first = 0
        For i = 1 To UBound(PC_Op)
            If PC_Op(i) <> "" Then
                t = InStr(temp$, PC_Op(i))
                If first <> 0 Then
                    If t < first And t <> 0 Then first = t: firstsymbol = i
                Else
                    first = t: firstsymbol = i
                End If
            End If
        Next
        If first = 0 Then Exit Do
        leftside$ = RTrim$(Left$(temp$, first - 1))
        symbol$ = Mid$(temp$, first, Len(PC_Op(firstsymbol)))
        t$ = Mid$(temp$, first + Len(PC_Op(firstsymbol)))
        t = InStr(t$, " ") 'the first space we come to
        If t Then
            m$ = LTrim$(RTrim$(Left$(t$, t - 1)))
            rightside$ = LTrim$(Mid$(t$, t))
        Else
            m$ = LTrim$(Mid$(t$, t))
            rightside$ = ""
        End If
        leftresult = 0
        If VerifyNumber(leftside$) Then
            If Val(leftside$) <> 0 Then leftresult = -1
        Else
            For i = 0 To UserDefineCount
                If UserDefine(0, i) = leftside$ Then
                    t$ = LTrim$(RTrim$(UserDefine(1, i)))
                    If t$ <> "0" And t$ <> "" Then leftresult = -1: Exit For
                End If
            Next
        End If
        rightresult = 0
        If VerifyNumber(m$) Then
            If Val(m$) <> 0 Then rightresult = -1
        Else
            For i = 0 To UserDefineCount
                If UserDefine(0, i) = m$ Then
                    t$ = LTrim$(RTrim$(UserDefine(1, i)))
                    If t$ <> "0" And t$ <> "" Then rightresult = -1: Exit For
                End If
            Next
        End If
        Select Case LTrim$(RTrim$(symbol$))
            Case "AND"
                If leftresult <> 0 And rightresult <> 0 Then result$ = " -1 " Else result$ = " 0 "
            Case "OR"
                If leftresult <> 0 Or rightresult <> 0 Then result$ = " -1 " Else result$ = " 0 "
            Case "XOR"
                If leftresult <> rightresult Then result$ = " -1 " Else result$ = " 0 "
        End Select
        temp$ = result$ + rightside$
    Loop

    If VerifyNumber(temp$) Then
        EvalPreIF = Val(temp$)
    Else
        If InStr(temp$, " ") Then err$ = "Invalid Resolution of $IF; check statements" 'If we've got more than 1 statement, it's invalid
        For i = 0 To UserDefineCount
            If UserDefine(0, i) = temp$ Then
                t$ = LTrim$(RTrim$(UserDefine(1, i)))
                If t$ <> "0" And t$ <> "" Then EvalPreIF = -1: Exit For
            End If
        Next
    End If

End Function

Function VerifyNumber (text$)
    t$ = LTrim$(RTrim$(text$))
    v = Val(t$)
    t1$ = LTrim$(Str$(v))
    If t$ = t1$ Then VerifyNumber = -1
End Function

Sub initialise_udt_varstrings (n$, udt, buf, base_offset)
    If Not udtxvariable(udt) Then Exit Sub
    element = udtxnext(udt)
    offset = 0
    Do While element
        If udtetype(element) And ISSTRING Then
            If (udtetype(element) And ISFIXEDLENGTH) = 0 Then
                WriteBufLine buf, "*(qbs**)(((char*)" + n$ + ")+" + Str$(base_offset + offset) + ") = qbs_new(0,0);"
            End If
        ElseIf udtetype(element) And ISUDT Then
            initialise_udt_varstrings n$, udtetype(element) And 511, buf, offset
        End If
        offset = offset + udtesize(element) \ 8
        element = udtenext(element)
    Loop
End Sub

Sub free_udt_varstrings (n$, udt, buf, base_offset)
    If Not udtxvariable(udt) Then Exit Sub
    element = udtxnext(udt)
    offset = 0
    Do While element
        If udtetype(element) And ISSTRING Then
            If (udtetype(element) And ISFIXEDLENGTH) = 0 Then
                WriteBufLine buf, "qbs_free(*((qbs**)(((char*)" + n$ + ")+" + Str$(base_offset + offset) + ")));"
            End If
        ElseIf udtetype(element) And ISUDT Then
            initialise_udt_varstrings n$, udtetype(element) And 511, buf, offset
        End If
        offset = offset + udtesize(element) \ 8
        element = udtenext(element)
    Loop
End Sub

Sub clear_udt_with_varstrings (n$, udt, buf, base_offset)
    If Not udtxvariable(udt) Then Exit Sub
    element = udtxnext(udt)
    offset = 0
    Do While element
        If udtetype(element) And ISSTRING Then
            If (udtetype(element) And ISFIXEDLENGTH) = 0 Then
                WriteBufLine buf, "(*(qbs**)(((char*)" + n$ + ")+" + Str$(base_offset + offset) + "))->len=0;"
            Else
                WriteBufLine buf, "memset((char*)" + n$ + "+" + Str$(base_offset + offset) + ",0," + Str$(udtesize(element) \ 8) + ");"
            End If
        Else
            If udtetype(element) And ISUDT Then
                clear_udt_with_varstrings n$, udtetype(element) And 511, buf, base_offset + offset
            Else
                WriteBufLine buf, "memset((char*)" + n$ + "+" + Str$(base_offset + offset) + ",0," + Str$(udtesize(element) \ 8) + ");"
            End If
        End If
        offset = offset + udtesize(element) \ 8
        element = udtenext(element)
    Loop
End Sub


Sub initialise_array_udt_varstrings (n$, udt, base_offset, bytesperelement$, acc$)
    If Not udtxvariable(udt) Then Exit Sub
    offset = base_offset
    element = udtxnext(udt)
    Do While element
        If udtetype(element) And ISSTRING Then
            If (udtetype(element) And ISFIXEDLENGTH) = 0 Then
                acc$ = acc$ + Chr$(13) + Chr$(10) + "*(qbs**)(" + n$ + "[0]+(" + bytesperelement$ + "-1)*tmp_long+" + Str$(offset) + ")=qbs_new(0,0);"
            End If
        ElseIf udtetype(element) And ISUDT Then
            initialise_array_udt_varstrings n$, udtetype(element) And 511, offset, bytesperelement$, acc$
        End If
        offset = offset + udtesize(element) \ 8
        element = udtenext(element)
    Loop
End Sub

Sub free_array_udt_varstrings (n$, udt, base_offset, bytesperelement$, acc$)
    If Not udtxvariable(udt) Then Exit Sub
    offset = base_offset
    element = udtxnext(udt)
    Do While element
        If udtetype(element) And ISSTRING Then
            If (udtetype(element) And ISFIXEDLENGTH) = 0 Then
                acc$ = acc$ + Chr$(13) + Chr$(10) + "qbs_free(*(qbs**)(" + n$ + "[0]+(" + bytesperelement$ + "-1)*tmp_long+" + Str$(offset) + "));"
            End If
        ElseIf udtetype(element) And ISUDT Then
            free_array_udt_varstrings n$, udtetype(element) And 511, offset, bytesperelement$, acc$
        End If
        offset = offset + udtesize(element) \ 8
        element = udtenext(element)
    Loop
End Sub

Sub copy_full_udt (dst$, src$, buf, base_offset, udt)
    If Not udtxvariable(udt) Then
        WriteBufLine buf, "memcpy(" + dst$ + "+" + Str$(base_offset) + "," + src$ + "+" + Str$(base_offset) + "," + Str$(udtxsize(udt) \ 8) + ");"
        Exit Sub
    End If
    offset = base_offset
    element = udtxnext(udt)
    Do While element
        If ((udtetype(element) And ISSTRING) > 0) And (udtetype(element) And ISFIXEDLENGTH) = 0 Then
            WriteBufLine buf, "qbs_set(*(qbs**)(" + dst$ + "+" + Str$(offset) + "), *(qbs**)(" + src$ + "+" + Str$(offset) + "));"
        ElseIf ((udtetype(element) And ISUDT) > 0) Then
            copy_full_udt dst$, src$, MainTxtBuf, offset, udtetype(element) And 511
        Else
            WriteBufLine buf, "memcpy((" + dst$ + "+" + Str$(offset) + "),(" + src$ + "+" + Str$(offset) + ")," + Str$(udtesize(element) \ 8) + ");"
        End If
        offset = offset + udtesize(element) \ 8
        element = udtenext(element)
    Loop
End Sub

Sub dump_udts
    fh = FreeFile
    Open "types.txt" For Output As #fh
    Print #fh, "Name   Size   Align? Next   Var?"
    For i = 1 To lasttype
        Print #fh, RTrim$(udtxname(i)), udtxsize(i), udtxbytealign(i), udtxnext(i), udtxvariable(i)
    Next i
    Print #fh, "Name   Size   Align? Next   Type   Tsize  Arr"
    For i = 1 To lasttypeelement
        Print #fh, RTrim$(udtename(i)), udtesize(i), udtebytealign(i), udtenext(i), udtetype(i), udtetypesize(i), udtearrayelements(i)
    Next i
    Close #fh
End Sub

Sub manageVariableList (__name$, __cname$, localIndex As Long, action As _Byte)
    Dim findItem As Long, cname$, i As Long, j As Long, name$, temp$
    name$ = RTrim$(__name$)
    cname$ = RTrim$(__cname$)

    If Len(cname$) = 0 Then Exit Sub

    findItem = InStr(cname$, "[")
    If findItem Then
        cname$ = Left$(cname$, findItem - 1)
    End If

    found = 0
    For i = 1 To totalVariablesCreated
        If usedVariableList(i).cname = cname$ Then found = -1: Exit For
    Next

    Select Case action
        Case 0 'add
            If found = 0 Then
                If i > UBound(usedVariableList) Then
                    ReDim _Preserve usedVariableList(UBound(usedVariableList) + 999) As usedVarList
                End If

                usedVariableList(i).id = currentid
                usedVariableList(i).used = 0
                usedVariableList(i).watch = 0
                usedVariableList(i).displayFormat = 0
                usedVariableList(i).storage = ""
                usedVariableList(i).linenumber = linenumber
                usedVariableList(i).includeLevel = inclevel
                If inclevel > 0 Then
                    usedVariableList(i).includedLine = inclinenumber(inclevel)
                    thisincname$ = getfilepath$(incname$(inclevel))
                    thisincname$ = Mid$(incname$(inclevel), Len(thisincname$) + 1)
                    usedVariableList(i).includedFile = thisincname$
                Else
                    totalMainVariablesCreated = totalMainVariablesCreated + 1
                    usedVariableList(i).includedLine = 0
                    usedVariableList(i).includedFile = ""
                End If
                usedVariableList(i).scope = subfuncn
                usedVariableList(i).subfunc = subfunc
                usedVariableList(i).varType = id2fulltypename$
                usedVariableList(i).cname = cname$
                usedVariableList(i).localIndex = localIndex

                'remove eventual instances of fix046$ in name$
                Do While InStr(name$, fix046$)
                    x = InStr(name$, fix046$): name$ = Left$(name$, x - 1) + "." + Right$(name$, Len(name$) - x + 1 - Len(fix046$))
                Loop

                If Len(RTrim$(id.musthave)) > 0 Then
                    usedVariableList(i).name = name$ + RTrim$(id.musthave)
                ElseIf Len(RTrim$(id.mayhave)) > 0 Then
                    usedVariableList(i).name = name$ + RTrim$(id.mayhave)
                Else
                    usedVariableList(i).name = name$
                End If

                If (id.arrayelements > 0) Then
                    usedVariableList(i).isarray = -1
                    usedVariableList(i).name = usedVariableList(i).name + "()"
                Else
                    usedVariableList(i).isarray = 0
                End If
                usedVariableList(i).watchRange = ""
                usedVariableList(i).arrayElementSize = 0
                usedVariableList(i).indexes = ""
                usedVariableList(i).elements = ""
                usedVariableList(i).elementTypes = ""
                usedVariableList(i).elementOffset = ""
                totalVariablesCreated = totalVariablesCreated + 1

                temp$ = MKL$(-1) + MKL$(Len(cname$)) + cname$
                found = InStr(backupVariableWatchList$, temp$)
                If found Then
                    'this variable existed in a previous edit of this program
                    'in this same session; let's preselect it.
                    j = CVL(Mid$(backupVariableWatchList$, found + Len(temp$), 4))

                    'if there have been changes in TYPEs, this variable won't be preselected
                    IF (LEN(backupUsedVariableList(j).elements) > 0 AND backupTypeDefinitions$ = typeDefinitions$) OR _
                        (LEN(backupUsedVariableList(j).elements) = 0) THEN
                        usedVariableList(i).watch = backupUsedVariableList(j).watch
                        usedVariableList(i).watchRange = backupUsedVariableList(j).watchRange
                        usedVariableList(i).indexes = backupUsedVariableList(j).indexes
                        usedVariableList(i).displayFormat = backupUsedVariableList(j).displayFormat
                        usedVariableList(i).elements = backupUsedVariableList(j).elements
                        usedVariableList(i).elementTypes = backupUsedVariableList(j).elementTypes
                        usedVariableList(i).elementOffset = backupUsedVariableList(j).elementOffset
                    End If
                End If
            End If
        Case Else 'find and mark as used
            If found Then
                usedVariableList(i).used = -1
            End If
    End Select
End Sub

Sub addWarning (whichLineNumber As Long, includeLevel As Long, incLineNumber As Long, incFileName$, header$, text$)
    warningsissued = -1
    totalWarnings = totalWarnings + 1

    If idemode = 0 And ShowWarnings Then
        thissource$ = getfilepath$(CMDLineFile)
        thissource$ = Mid$(CMDLineFile, Len(thissource$) + 1)
        thisincname$ = getfilepath$(incFileName$)
        thisincname$ = Mid$(incFileName$, Len(thisincname$) + 1)

        If Not MonochromeLoggingMode Then Color 15
        If includeLevel > 0 And incLineNumber > 0 Then
            Print thisincname$; ":";
            Print str2$(incLineNumber); ": ";
        Else
            Print thissource$; ":";
            Print str2$(whichLineNumber); ": ";
        End If

        If Not MonochromeLoggingMode Then Color 13
        Print "warning: ";
        If Not MonochromeLoggingMode Then Color 7
        Print header$

        If Len(text$) > 0 Then
            If Not MonochromeLoggingMode Then Color 2
            Print Space$(4); text$
            If Not MonochromeLoggingMode Then Color 7
        End If
    ElseIf idemode Then
        If Not IgnoreWarnings Then
            If whichLineNumber > maxLineNumber Then maxLineNumber = whichLineNumber
            If lastWarningHeader <> header$ Then
                lastWarningHeader = header$
                GoSub increaseWarningCount
                warning$(warningListItems) = header$
                warningLines(warningListItems) = 0
            End If

            GoSub increaseWarningCount
            warning$(warningListItems) = text$
            warningLines(warningListItems) = whichLineNumber
            If includeLevel > 0 Then
                thisincname$ = getfilepath$(incFileName$)
                thisincname$ = Mid$(incFileName$, Len(thisincname$) + 1)
                warningIncLines(warningListItems) = incLineNumber
                warningIncFiles(warningListItems) = thisincname$
            Else
                warningIncLines(warningListItems) = 0
                warningIncFiles(warningListItems) = ""
            End If
        End If
    End If
    Exit Sub
    increaseWarningCount:
    warningListItems = warningListItems + 1
    If warningListItems > UBound(warning$) Then
        ReDim _Preserve warning$(warningListItems + 999)
        ReDim _Preserve warningLines(warningListItems + 999) As Long
        ReDim _Preserve warningIncLines(warningListItems + 999) As Long
        ReDim _Preserve warningIncFiles(warningListItems + 999) As String
    End If
    Return
End Sub

Function SCase$ (t$)
    If ideautolayoutkwcapitals Then SCase$ = UCase$(t$) Else SCase$ = t$
End Function

Function SCase2$ (t$)
    separator$ = sp
    If ideautolayoutkwcapitals Then
        SCase2$ = UCase$(t$)
    Else
        newWord = -1
        temp$ = ""
        For i = 1 To Len(t$)
            s$ = Mid$(t$, i, 1)
            If newWord Then
                If s$ = "_" Or s$ = separator$ Then
                    temp$ = temp$ + s$
                Else
                    temp$ = temp$ + UCase$(s$)
                    newWord = 0
                End If
            Else
                If s$ = separator$ Then
                    temp$ = temp$ + separator$
                    newWord = -1
                Else
                    temp$ = temp$ + LCase$(s$)
                End If
            End If
        Next
        SCase2$ = temp$
    End If
End Function

Sub increaseUDTArrays
    x = UBound(udtxname)
    ReDim _Preserve udtxname(x + 1000) As String * 256
    ReDim _Preserve udtxcname(x + 1000) As String * 256
    ReDim _Preserve udtxsize(x + 1000) As Long
    ReDim _Preserve udtxbytealign(x + 1000) As Integer 'first element MUST be on a byte alignment & size is a multiple of 8
    ReDim _Preserve udtxnext(x + 1000) As Long
    ReDim _Preserve udtxvariable(x + 1000) As Integer 'true if the udt contains variable length elements
    'elements
    ReDim _Preserve udtename(x + 1000) As String * 256
    ReDim _Preserve udtecname(x + 1000) As String * 256
    ReDim _Preserve udtebytealign(x + 1000) As Integer
    ReDim _Preserve udtesize(x + 1000) As Long
    ReDim _Preserve udtetype(x + 1000) As Long
    ReDim _Preserve udtetypesize(x + 1000) As Long
    ReDim _Preserve udtearrayelements(x + 1000) As Long
    ReDim _Preserve udtenext(x + 1000) As Long
End Sub

'$INCLUDE:'utilities\strings.bas'
'$INCLUDE:'utilities\file.bas'
'$INCLUDE:'utilities\build.bas'
'$INCLUDE:'subs_functions\extensions\opengl\opengl_methods.bas'
'$INCLUDE:'utilities\ini-manager\ini.bm'
'$INCLUDE:'utilities\s-buffer\simplebuffer.bm'

DefLng A-Z

'-------- Optional IDE Component (2/2) --------
'$INCLUDE:'ide\ide_methods.bas'


